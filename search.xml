<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo-butterfly主题配置摘录_1</title>
    <url>/%E4%B8%BB%E9%A2%98%E5%8F%8A%E5%8D%9A%E6%96%87%E7%9B%B8%E5%85%B3_1/</url>
    <content><![CDATA[<blockquote>
<p>本教程摘录自<a href="https://butterfly.js.org/posts/dc584b87/">butterfly主题官网文档</a>，为留作备份使用。</p>
</blockquote>
<h2 id="1-Front-matter">1 Front-matter</h2>
<p>Front-matter 是 markdown 文件最上方以 <code>---</code> 分隔的区域，用于指定个别档案的变数。</p>
<ul class="lvl-0">
<li class="lvl-2">Page Front-matter 用于<code>页面</code>配置</li>
<li class="lvl-2">Post Front-matter 用于<code>文章页</code>配置</li>
</ul>
<h3 id="1-1-Page-Front-matter">1.1 Page Front-matter</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<table>
<thead>
<tr>
<th style="text-align:center">写法</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:left">【必需】页面标题</td>
</tr>
<tr>
<td style="text-align:center">date</td>
<td style="text-align:left">【必需】页面创建日期</td>
</tr>
<tr>
<td style="text-align:center">type</td>
<td style="text-align:left">【必需】标签、分类和友情链接三个页面需要配置</td>
</tr>
<tr>
<td style="text-align:center">updated</td>
<td style="text-align:left">【可选】页面更新日期</td>
</tr>
<tr>
<td style="text-align:center">description</td>
<td style="text-align:left">【可选】页面描述</td>
</tr>
<tr>
<td style="text-align:center">keywords</td>
<td style="text-align:left">【可选】页面关键字</td>
</tr>
<tr>
<td style="text-align:center">comments</td>
<td style="text-align:left">【可选】显示页面评论模块 (默认 true)</td>
</tr>
<tr>
<td style="text-align:center">top_img</td>
<td style="text-align:left">【可选】页面顶部图片</td>
</tr>
<tr>
<td style="text-align:center">mathjax</td>
<td style="text-align:left">【可选】显示mathjax (当设置mathjax的per_page: false时，才需要配置，默认 false)</td>
</tr>
<tr>
<td style="text-align:center">katex</td>
<td style="text-align:left">【可选】显示katex (当设置katex的per_page: false时，才需要配置，默认 false)</td>
</tr>
<tr>
<td style="text-align:center">aside</td>
<td style="text-align:left">【可选】显示侧边栏 (默认 true)</td>
</tr>
<tr>
<td style="text-align:center">aplayer</td>
<td style="text-align:left">【可选】在需要的页面加载aplayer的js和css,请参考文章下面的<code>音乐 </code>配置</td>
</tr>
<tr>
<td style="text-align:center">highlight_shrink</td>
<td style="text-align:left">【可选】配置代码框是否展开 (true/false) (默认为设置中highlight_shrink的配置)</td>
</tr>
</tbody>
</table>
<h3 id="1-2-Post-Front-matter">1.2 Post Front-matter</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">toc<span class="emphasis">_style_</span>simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright<span class="emphasis">_author:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href:</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:</span><br><span class="line">copyright<span class="emphasis">_info:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line">aside:</span><br><span class="line"><span class="section">abcjs:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">写法</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">title</td>
<td>【必需】文章标题</td>
</tr>
<tr>
<td style="text-align:center">date</td>
<td>【必需】文章创建日期</td>
</tr>
<tr>
<td style="text-align:center">updated</td>
<td>【可选】文章更新日期</td>
</tr>
<tr>
<td style="text-align:center">tags</td>
<td>【可选】文章标签</td>
</tr>
<tr>
<td style="text-align:center">catagoties</td>
<td>【可选】文章分类</td>
</tr>
<tr>
<td style="text-align:center">keywords</td>
<td>【可选】文章关键字</td>
</tr>
<tr>
<td style="text-align:center">description</td>
<td>【可选】文章描述</td>
</tr>
<tr>
<td style="text-align:center">top_img</td>
<td>【可选】文章顶部图片</td>
</tr>
<tr>
<td style="text-align:center">cover</td>
<td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</td>
</tr>
<tr>
<td style="text-align:center">comments</td>
<td>【可选】显示文章评论模块(默认 true)</td>
</tr>
<tr>
<td style="text-align:center">toc</td>
<td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td>
</tr>
<tr>
<td style="text-align:center">toc_number</td>
<td>【可选】显示toc_number(默认为设置中toc的number配置)</td>
</tr>
<tr>
<td style="text-align:center">top_style_simple</td>
<td>【可选】显示 toc 简洁模式</td>
</tr>
<tr>
<td style="text-align:center">copyright</td>
<td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td>
</tr>
<tr>
<td style="text-align:center">copyright_author</td>
<td>【可选】文章版权模块的<code>文章作者</code></td>
</tr>
<tr>
<td style="text-align:center">copyright_author_href</td>
<td>【可选】文章版权模块的<code>文章作者</code>链接</td>
</tr>
<tr>
<td style="text-align:center">copyright_url</td>
<td>【可选】文章版权模块的<code>文章链接</code></td>
</tr>
<tr>
<td style="text-align:center">copyright_info</td>
<td>【可选】文章版权模块的<code>版权声明</code>文字</td>
</tr>
<tr>
<td style="text-align:center">mathjax</td>
<td>【可选】显示mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false )</td>
</tr>
<tr>
<td style="text-align:center">katex</td>
<td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false )</td>
</tr>
<tr>
<td style="text-align:center">aplayer</td>
<td>【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的<code>音乐</code> 配置</td>
</tr>
<tr>
<td style="text-align:center">highlight_shrink</td>
<td>【可选】配置代码框是否展开(true/false)(默认为设置中 highlight_shrink 的配置)</td>
</tr>
<tr>
<td style="text-align:center">aside</td>
<td>【可选】显示侧边栏 (默认 true)</td>
</tr>
<tr>
<td style="text-align:center">abcjs</td>
<td>【可选】加载 abcjs (当设置 abcjs 的 per_page: false 时，才需要配置，默认 false )</td>
</tr>
</tbody>
</table>
<h2 id="2-标签页">2 标签页</h2>
<ol>
<li class="lvl-3">
<p>在博客根目录 <code>hexo new page tags</code></p>
</li>
<li class="lvl-3">
<p>在<code>source/tags/index.md</code> 修改<code>type: tags</code></p>
</li>
</ol>
<p><em>标签页 页头配置：</em></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">orderby: random</span><br><span class="line"><span class="section">order: 1</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">type</td>
<td>【必须】页面类型，必须为 <code>tags</code></td>
</tr>
<tr>
<td style="text-align:center">orderby</td>
<td>【可选】排序方式 ：random/name/length</td>
</tr>
<tr>
<td style="text-align:center">order</td>
<td>【可选】排序次序： 1, asc for ascending; -1, desc for descending</td>
</tr>
</tbody>
</table>
<h2 id="3-分类页">3 分类页</h2>
<ol>
<li class="lvl-3">
<p>在博客根目录 <code>hexo new page categories</code></p>
</li>
<li class="lvl-3">
<p>在<code>source/categories/index.md</code> 修改<code>type: categories</code></p>
</li>
</ol>
<p><em>分类页 页头配置：</em></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<h2 id="4-友情链接">4 友情链接</h2>
<blockquote>
<p>添加友情链接，可以将朋友或一些有价值的链接摆在这。</p>
</blockquote>
<h3 id="4-1-创建友链页面">4.1 创建友链页面</h3>
<ol>
<li class="lvl-3">
<p>在博客根目录 `hexo new page link</p>
</li>
<li class="lvl-3">
<p>在<code>source/link/index.md</code> 修改<code>type: link</code></p>
</li>
</ol>
<p><em>友链页 页头配置：</em></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友情链接</span><br><span class="line">date: 2018-06-07 22:17:49</span><br><span class="line"><span class="section">type: &quot;link&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<h3 id="4-2-添加友情链接">4.2 添加友情链接</h3>
<h4 id="4-2-1-本地生成">4.2.1 本地生成</h4>
<blockquote>
<p>在Hexo博客目录中的 <code>source/_data</code>（如果没有自行创建）创建一个文件 <code>link.yml</code> ，内容如下：</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网志框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">中国最大社交分享平台</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">社交分享平台</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>class_name</code> 和 <code>class_desc</code> 支持 html 格式书写，如不需要，也可以留空。</p>
</blockquote>
<h4 id="4-2-2-远程拉取">4.2.2 远程拉取</h4>
<blockquote>
<p>支持<code>json</code> ，选择远程拉取后本地方法会失效。</p>
<p>在 <code>source/link/index.md</code> 这个文件的 <code>front-matter</code> 添加远程链接</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">flink<span class="emphasis">_url: xxxxx</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>远程拉取的json数据格式：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;class_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;友情链接&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;class_desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;那些人，那些事&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;link_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hexo&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://hexo.io/zh-tw/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;descr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;快速、简单且强大的网志框架&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;class_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;网站&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;class_desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值得推荐的网站&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;link_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Youtube&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.youtube.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;descr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;视频网站&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Weibo&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.weibo.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;descr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中国最大社交分享平台&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Twitter&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://twitter.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;descr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;社交分享平台&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<h4 id="4-2-3-友链页界面设置">4.2.3 友链页界面设置</h4>
<p>由 2.2.0 起，友情链接界面可以由用户自己自定义，只需要在友情链接的md档设置就行，以普通的Markdown格式书写。</p>
<h2 id="5-其它目录">5 其它目录</h2>
<h3 id="5-1-图库">5.1 图库</h3>
<p><code>hexo new page xxx</code> 创建普通页面即可；</p>
<p>然后使用标签外挂 galleryGroup：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span><br><span class="line">&#123;% galleryGroup &#x27;壁纸&#x27; &#x27;收藏的一些壁纸&#x27; &#x27;/Gallery/wallpaper&#x27; https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %&#125;</span><br><span class="line">&#123;% galleryGroup &#x27;漫威&#x27; &#x27;关于漫威的图片&#x27; &#x27;/Gallery/marvel&#x27; https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup &#x27;OH MY GIRL&#x27; &#x27;关于OH MY GIRL的图片&#x27; &#x27;/Gallery/ohmygirl&#x27; https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-2-子页面">5.2 子页面</h3>
<p>同图库，也为子页面，然后使用标签外挂 gallery：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-3-404页">5.3 404页</h3>
<p>主题内置了一个简单的 404 页面，可在设置中开启</p>
<blockquote>
<p>本地预览时，访问出错的网站是不会跳到 404 页面的。</p>
<p>如需本地预览，请访问 <a href="http://localhost:4000/404.html">http://localhost:4000/404.html</a></p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&quot;页面没有找到&quot;</span></span><br><span class="line">  <span class="attr">background:</span> </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>butterfly主题</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-butterfly主题配置摘录_2</title>
    <url>/%E4%B8%BB%E9%A2%98%E5%8F%8A%E5%8D%9A%E6%96%87%E7%9B%B8%E5%85%B3-2/</url>
    <content><![CDATA[<div class="note warning simple"><p>本教程摘录自<a href="https://butterfly.js.org/posts/dc584b87/">butterfly主题官网文档</a>，为留作备份使用。</p>
</div>
<h2 id="1-语言">1 语言</h2>
<p>修改站点配置文件 <code>_config.yml</code></p>
<p>默认语言为 en</p>
<p>支持语言：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>default(en)</p>
</li>
<li class="lvl-2">
<p>zh-CN(简体中文)</p>
</li>
<li class="lvl-2">
<p>zh-TW(繁体中文)</p>
</li>
</ul>
<h2 id="2-网站资料">2 网站资料</h2>
<blockquote>
<p>修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改博客根目录的<code>_config.yml</code></p>
</blockquote>
<h2 id="3-导航栏设置">3 导航栏设置</h2>
<h3 id="3-1-参数设置">3.1 参数设置</h3>
<p>在 <code>主题配置</code> 文件中：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nav:</span></span><br><span class="line">  <span class="attr">logo:</span> <span class="comment">#image</span></span><br><span class="line">  <span class="attr">display_title:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">false</span> <span class="comment"># fixed navigation bar</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-菜单-目录">3.2 菜单/目录</h3>
<ol>
<li class="lvl-3">
<p>菜单配置：</p>
</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line"><span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line"><span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line"><span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line"><span class="string">List||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">  <span class="attr">Music:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">  <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line"><span class="attr">Link:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line"><span class="attr">About:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>必须为<code>/xxx/</code> ，后面用 <code>||</code> 分开，跟图标名称，图标可不写。</p>
</li>
<li class="lvl-3">
<p>如果默认隐藏子目录，可在子目录添加 <code>hide</code></p>
</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">List||fas</span> <span class="string">fa-list||hide:</span></span><br><span class="line">  <span class="attr">Music:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">  <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>导航文字可自行更改。</p>
</li>
</ol>
<h2 id="4-代码块">4 代码块</h2>
<div class="note info simple"><p>代码块中的所有功能只适用于 <code>Hexo</code> 自带的代码渲染，第三方渲染器不一定生效。</p>
</div>
<h3 id="4-1-代码高亮主题">4.1 代码高亮主题</h3>
<p>修改 <code>主题配置文件</code> ：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">light</span></span><br></pre></td></tr></table></figure>
<p>支持6中预设：</p>
<ol>
<li class="lvl-3">
<p>darker</p>
</li>
<li class="lvl-3">
<p>pale night</p>
</li>
<li class="lvl-3">
<p>light</p>
</li>
<li class="lvl-3">
<p>ocean</p>
</li>
<li class="lvl-3">
<p>mac</p>
</li>
<li class="lvl-3">
<p>mac light</p>
</li>
</ol>
<h3 id="4-2-代码复制">4.2 代码复制</h3>
<p>修改 <code>主题配置文件</code> ：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="4-3-代码狂展开-关闭">4.3 代码狂展开/关闭</h3>
<p>默认关闭，通过修改 <code>主题配置文件</code> 修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">true</span> <span class="comment">#代码框不展开，需点击 &#x27;&gt;&#x27; 打开</span></span><br></pre></td></tr></table></figure>
<p>也可在每个post页的页头中单独设置此项，灵活控制。</p>
<h3 id="4-4-代码换行">4.4 代码换行</h3>
<p>在默认情况下，<code>Hexo</code> 在编译的时候不会实现代码自动换行。如果不希望在代码块的区域里有横向滚动条的话，可修改<code>主题配置文件</code> :</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="4-5-代码高度限制">4.5 代码高度限制</h3>
<blockquote>
<p>3.7.0以上支持</p>
</blockquote>
<p>可配置代码高度限制，超出的部分会隐藏，并显示展开按钮:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_height_limit:</span> <span class="literal">false</span> <span class="comment"># unit: px</span></span><br></pre></td></tr></table></figure>
<h2 id="5-社交图标">5 社交图标</h2>
<p>Butterfly支持 <a href="https://fontawesome.com/icons?from=io">font-awesome v6</a> 图标.</p>
<p>书写格式：<code>图标名：url || 描述文字 || color</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/xxxxx</span> <span class="string">||</span> <span class="string">Github</span> <span class="string">||</span> <span class="string">&quot;#hdhfbb&quot;</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:xxxxxx@gmail.com</span> <span class="string">||</span> <span class="string">Email</span> <span class="string">||</span> <span class="string">&quot;#000000&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="6-头像">6 头像</h2>
<p>修改 <code>主题配置文件</code> ：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/avatar.png</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span> <span class="comment"># 头像会一直转圈</span></span><br></pre></td></tr></table></figure>
<h2 id="7-顶部图">7 顶部图</h2>
<blockquote>
<p>如果不需要，可配置 <code>disable_top_img: true</code></p>
</blockquote>
<blockquote>
<p>顶部图获取顺序:[如果都没有配置则不显示顶部图]</p>
<p>1.页面顶部图获取顺序：</p>
<p><code>各自配置的 top_img</code> &gt; <code>配置文件的 default_top_img</code></p>
<p>2.文章页顶部图获取顺序：</p>
<p><code>各自配置的 top_img</code> &gt; <code>cover</code> &gt; <code>配置文案金的 default_top_img</code></p>
</blockquote>
<p>配置中的值说明：</p>
<table>
<thead>
<tr>
<th>配置</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>index_img</td>
<td>主页的 top_img</td>
</tr>
<tr>
<td>default_top_img</td>
<td>默认的 top_img，当页面的 top_img 没有配置时，会显示 default_top_img</td>
</tr>
<tr>
<td>archive_img</td>
<td>归档页面的 top_img</td>
</tr>
<tr>
<td>tag_img</td>
<td>tag 子页面 的 默认 top_img</td>
</tr>
<tr>
<td>tag_per_img</td>
<td>tag 子页面的 top_img，可配置每个 tag 的 top_img</td>
</tr>
<tr>
<td>category_img</td>
<td>category 子页面 的 默认 top_img</td>
</tr>
<tr>
<td>category_per_img</td>
<td>category 子页面的 top_img，可配置每个 category 的 top_img</td>
</tr>
</tbody>
</table>
<p>其它页面 （tags/categories/自建页面）和 文章页 的 <code>top_img</code> ，可到对应的 md 页面设置front-matter中的<code>top_img</code></p>
<blockquote>
<p>以上所有 <code>top_img</code> 可配置如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">配置</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">留空</td>
<td>显示默认的 top_img（如有），否则显示默认的顔色（文章页top_img留空的话，会显示 cover 的值）</td>
</tr>
<tr>
<td style="text-align:center">img链接</td>
<td>图片的链接，显示所配置的图片</td>
</tr>
<tr>
<td style="text-align:center">颜色</td>
<td>对应的顔色</td>
</tr>
<tr>
<td style="text-align:center">transparent</td>
<td>透明</td>
</tr>
<tr>
<td style="text-align:center">false</td>
<td>不显示 top_img</td>
</tr>
</tbody>
</table>
</blockquote>
<p><strong><code>tag_per_img</code> 和 <code>category_per_img</code> 是 3.2.0 新增的内容，可对 tag 和 category 进行单独的配置</strong></p>
<p><strong>!</strong> 但并不推荐，会拖慢生成速度</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">tag_per_img：</span></span><br><span class="line">  <span class="attr">aplayer:</span> <span class="string">https://xxxxxx.png</span></span><br><span class="line">  <span class="attr">android:</span> <span class="string">ddddddd.png</span></span><br><span class="line">  </span><br><span class="line"><span class="string">category_per_img：</span></span><br><span class="line">  <span class="string">随想:</span> <span class="string">hdhdh.png</span></span><br><span class="line">  <span class="string">推荐:</span> <span class="string">ddjdjdjd.png</span></span><br></pre></td></tr></table></figure>
<h2 id="8-文章封面">8 文章封面</h2>
<p>在文章页头的<code>Front-matter</code> 添加 <code>cover</code> ，并填上要显示的图片地址。</p>
<p>不配置cover会显示默认的cover。</p>
<p>不想显示可以设置为false。</p>
<blockquote>
<p>文章封面的获取顺序为 Front-matter的cover &gt; 配置文件的 default_cover &gt; false</p>
</blockquote>
<p>修改主题配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 主页是否显示文章封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 侧栏是否显示封面图</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 归档页面是否显示封面图</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 封面显示的位置</span></span><br><span class="line">  <span class="comment"># 三个值可配置 left , right , both(左右轮流)</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># 当没有设置cover时，默认的封面显示</span></span><br><span class="line">  <span class="attr">default_cover:</span> </span><br></pre></td></tr></table></figure>
<p>配置多张时会随机显示：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">default_cover:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://file.crazywong.com/gh/jerryc127/CDN@latest/cover/default_bg.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://file.crazywong.com/gh/jerryc127/CDN@latest/cover/default_bg2.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://file.crazywong.com/gh/jerryc127/CDN@latest/cover/default_bg3.png</span></span><br></pre></td></tr></table></figure>
<h2 id="9-页面meta显示">9 页面meta显示</h2>
<blockquote>
<p>设置显示文章的相关信息。</p>
</blockquote>
<p>修改<code>主题配置文件</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 主页文章日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 主页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 主页是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 文章页日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字</span></span><br></pre></td></tr></table></figure>
<h2 id="10-文章节选摘要和描述">10 文章节选摘要和描述</h2>
<p><code>主页文章节选</code> 支持<code>自动节选</code> 和 <code>文章页description</code></p>
<p>有四种选择：</p>
<ol>
<li class="lvl-3">
<p>description: 只显示description</p>
</li>
<li class="lvl-3">
<p>both:优先description，未设置则节选内容</p>
</li>
<li class="lvl-3">
<p>auto_excerpt:只显示自动节选</p>
</li>
<li class="lvl-3">
<p>false：不显示</p>
</li>
</ol>
<p>修改 <code>主题配置文件</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br></pre></td></tr></table></figure>
<h2 id="11-页面锚点">11 页面锚点</h2>
<p>开启页面锚点后，当你在进行滚动时，页面链接会根据标题ID进行替换<br>
(注意: 每替换一次，会留下一个历史记录。所以如果一篇文章有很多锚点的话，网页的历史记录会很多。)</p>
<p>修改 <code>主题配置文件</code> :</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># anchor</span></span><br><span class="line"><span class="comment"># when you scroll in post , the url will update according to header id.</span></span><br><span class="line"><span class="attr">anchor:</span></span><br><span class="line">  <span class="attr">button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">always_show:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="comment"># the unicode value of Font Awesome icon, such as &#x27;\3423&#x27;</span></span><br><span class="line">  <span class="attr">auto_update:</span> <span class="literal">false</span> <span class="comment"># when you scroll in post, the URL will update according to header id.</span></span><br></pre></td></tr></table></figure>
<h2 id="12-图片描述">12 图片描述</h2>
<p>可开启图片Figcaption描述文字显示</p>
<p>优先显示图片的 title 属性，然后是 alt 属性</p>
<p>修改 <code>主题配置文件</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">photofigcaption:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="13-网页文字复制">13 网页文字复制</h2>
<p>可以配置是否可以复制、复制的内容是否添加版权信息。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># copy settings</span></span><br><span class="line"><span class="comment"># copyright: Add the copyright information after copied content (复制的内容后面加上版权信息)</span></span><br><span class="line"><span class="attr">copy:</span></span><br><span class="line">  <span class="comment"># 是否开启网站复制权限</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 复制的内容后面加上版权信息</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 字数限制，当复制文字大于这个字数限制时，将在复制的内容后面加上版权信息</span></span><br><span class="line">    <span class="attr">limit_count:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure>
<h2 id="14-文章页相关配置">14 文章页相关配置</h2>
<h3 id="14-1-文章版权">14.1 文章版权</h3>
<blockquote>
<p>为你的博客文章展示文章版权和许可协议。</p>
</blockquote>
<p>修改 <code>主题配置文件</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">decode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">author_href:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br></pre></td></tr></table></figure>
<p>可在文章的Foront-matter的<code>copyright_xxx</code> 单独设置是否展示。</p>
<h3 id="14-2-文章打赏">14.2 文章打赏</h3>
<p>在文章的结尾添加打赏按钮，配置二维码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/wechat.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">微信</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/alipay.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">支付宝</span></span><br></pre></td></tr></table></figure>
<h3 id="14-3-TOC">14.3 TOC</h3>
<p>在文章页有一个目录显示TOC</p>
<p>修改 <code>主题配置文件</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="comment"># 文章页是否显示TOC</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 普通页是否显示TOC</span></span><br><span class="line">  <span class="attr">page:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否显示章节数</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否展开TOC</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 简介模式（侧边栏只显示 TOC, 只对文章页有效）</span></span><br><span class="line">  <span class="attr">style_simple:</span> <span class="literal">false</span> <span class="comment"># for post</span></span><br><span class="line">  <span class="comment"># 是否显示滚动进度百分比</span></span><br><span class="line">  <span class="attr">scroll_percent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>在文章md头部加入 <code>toc_num</code> 和 <code>toc</code> ，配置 true或false即可。</p>
<h3 id="14-4-相关文章">14.4 相关文章</h3>
<blockquote>
<p>当文章封面设置为false时，相关文章背景会显示主题色；</p>
<p>相关文章推荐原理是tags的比重。</p>
</blockquote>
<p>修改 <code>主题配置文件</code> ：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">related_post:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># 显示推荐文章数目</span></span><br><span class="line">  <span class="attr">date_type:</span> <span class="string">created</span> <span class="comment"># or created or updated 文章日期显示创建日或者更新日</span></span><br></pre></td></tr></table></figure>
<h3 id="14-5-文章过期提醒">14.5 文章过期提醒</h3>
<p>将以更新时间为基准显示文章是否过期</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Displays outdated notice for a post (文章过期提醒)</span></span><br><span class="line"><span class="attr">noticeOutdate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span> <span class="comment"># style: simple/flat</span></span><br><span class="line">  <span class="comment"># 距离更新时间多少天才显示文章过期提醒</span></span><br><span class="line">  <span class="attr">limit_day:</span> <span class="number">365</span> <span class="comment"># When will it be shown</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span> <span class="comment"># position: top/bottom</span></span><br><span class="line">  <span class="comment"># 天数之前的文字</span></span><br><span class="line">  <span class="attr">message_prev:</span> <span class="string">It</span> <span class="string">has</span> <span class="string">been</span></span><br><span class="line">  <span class="comment"># 天数之后的文字</span></span><br><span class="line">  <span class="attr">message_next:</span> <span class="string">days</span> <span class="string">since</span> <span class="string">the</span> <span class="string">last</span> <span class="string">update,</span> <span class="string">the</span> <span class="string">content</span> <span class="string">of</span> <span class="string">the</span> <span class="string">article</span> <span class="string">may</span> <span class="string">be</span> <span class="string">outdated.</span></span><br></pre></td></tr></table></figure>
<h3 id="14-6-文章编辑按钮">14.6 文章编辑按钮</h3>
<p>文章标题旁的编辑按钮，点击会跳转到对应链接。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Post edit</span><br><span class="line"># Easily browse and edit blog source code online.</span><br><span class="line">post_edit:</span><br><span class="line">  enable: false</span><br><span class="line">  # url: https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name/</span><br><span class="line">  # For example: https://github.com/jerryc127/butterfly.js.org/edit/main/source/</span><br><span class="line">  url:</span><br></pre></td></tr></table></figure>
<h3 id="14-7-文章分页按钮">14.7 文章分页按钮</h3>
<p>可以设置分页逻辑或关闭</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># post_pagination (分页)</span></span><br><span class="line"><span class="comment"># value: 1 || 2 || false</span></span><br><span class="line"><span class="comment"># 1: The &#x27;next post&#x27; will link to old post</span></span><br><span class="line"><span class="comment"># 2: The &#x27;next post&#x27; will link to new post</span></span><br><span class="line"><span class="comment"># false: disable pagination</span></span><br><span class="line"><span class="attr">post_pagination:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="15-Footer">15 Footer</h2>
<h3 id="15-1-博客年份">15.1 博客年份</h3>
<p><code>since</code> 是一个展示站点起始时间的选项</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2018</span></span><br></pre></td></tr></table></figure>
<h3 id="15-2-页脚自定义脚本">15.2 页脚自定义脚本</h3>
<p><code>custom_text</code>是一个用来在页脚自定义文本的选项。通常在这里写声明文本等。支持 HTML</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_text:</span> <span class="string">Hi,</span> <span class="string">welcome</span> <span class="string">to</span> <span class="string">my</span> <span class="string">&lt;a</span> <span class="string">href=&quot;https://butterfly.js.org/&quot;&gt;blog&lt;/a&gt;!</span></span><br></pre></td></tr></table></figure>
<h2 id="16-侧边栏设置">16 侧边栏设置</h2>
<h3 id="16-1-侧边排版">16.1 侧边排版</h3>
<p>可自行决定显式的项目以及位置，也可以不显示。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left or right</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">category:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">Follow</span> <span class="string">Me</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/xxxxxx</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">my</span> <span class="string">Blog</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">5</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort:</span> <span class="string">date</span> <span class="comment"># date or updated</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="string">none</span> <span class="comment"># none/true/false</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">40</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">orderby:</span> <span class="string">random</span> <span class="comment"># Order of tags, random/name/length</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_webinfo:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br></pre></td></tr></table></figure>
<h3 id="16-2-访问人数">16.2 访问人数</h3>
<p>访问<a href="http://busuanzi.ibruce.info/">busuanzi官网</a> 可查看更多详情。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>如果需要修改 <code>busuanzi</code> 的 CDN 链接，可通过 主题配置文件 的 CDN 中的 option 进行修改</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">CDN:</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line">  	<span class="attr">busuanzi:</span> <span class="string">xxxxxxxxx</span></span><br></pre></td></tr></table></figure>
<h3 id="16-3-运行时间">16.3 运行时间</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">publish_date:</span> <span class="number">6</span><span class="string">/7/2018</span> <span class="number">00</span><span class="string">:00:00</span>  </span><br><span class="line">  <span class="comment">##网页开通时间</span></span><br><span class="line">  <span class="comment">#格式: 月/日/年 时间</span></span><br><span class="line">  <span class="comment">#也可以写成 年/月/日 时间</span></span><br></pre></td></tr></table></figure>
<h3 id="16-4-最新评论">16.4 最新评论</h3>
<blockquote>
<p>最新评论只会在刷新时才会去读取，并不会实时变化。</p>
<p>由于 API 有 访问次数限制，为了避免调用太多，主题默认存取期限为 10 分钟。也就是説，调用后资料会存在 <em>localStorage</em> 里，10分钟内刷新网站只会去 <em>localStorage</em> 读取资料。 10 分钟期限一过，刷新页面时才会去调取 API 读取新的数据。（ 3.6.0 新增了 <code>storage</code> 配置，可自行配置缓存时间）</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Aside widget - Newest Comments</span></span><br><span class="line"><span class="attr">newest_comments:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="comment"># 显示数量</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span></span><br><span class="line">  <span class="comment"># 缓存时间</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="number">10</span> <span class="comment"># unit: mins, save data to localStorage</span></span><br><span class="line">  <span class="comment"># 是否显示头像</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="16-5-自定义添加栏目">16.5 自定义添加栏目</h3>
<blockquote>
<p>适用于 &gt;= 3.8.0</p>
<p>可添加自己的 <code>widget</code>，也可以对现有的 <code>widget</code> 进行排序（<code>博客资料</code>和 <code>公告</code>这两个固定，其它的能排序）</p>
</blockquote>
<h4 id="16-5-1-widget排序">16.5.1 widget排序</h4>
<p>只需要配置 <code>sort_order</code>就行。（使用了 <code>Flex</code> 佈局的 <code>order</code> 属性，具体可查看 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Ordering_Flex_Items">mozilla</a> 文档。简单来讲，就是配置数字来实现排序，如果不配置，则默认为 0。数字越小，排序越靠前。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line"> <span class="string">...</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_webinfo:</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line"></span><br><span class="line"><span class="attr">newest_comments:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br></pre></td></tr></table></figure>
<h4 id="16-5-2-自定义widget">16.5.2 自定义widget</h4>
<ol>
<li class="lvl-3">
<p>创建widget.yml</p>
</li>
</ol>
<p>在<code>Hexo</code>博客目录中的<code>source/_data</code>（如果没有 _data 文件夹，请自行创建），创建一个文件 <code>widget.yml</code></p>
<ol start="2">
<li class="lvl-3">
<p>格式：</p>
</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建的 widget 会出现在非 sticky 区域（即所有页面都会显示)</span></span><br><span class="line"><span class="attr">top:</span></span><br><span class="line">    <span class="comment"># 所创建的 widget 父类 class 名 （可选）</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">class_name:</span></span><br><span class="line">    <span class="comment"># 所创建的 widget 父类 id 名（可选）</span></span><br><span class="line">    <span class="attr">id_name:</span></span><br><span class="line">    <span class="comment"># 所创建的 widget 标题</span></span><br><span class="line">    <span class="attr">name:</span></span><br><span class="line">    <span class="comment"># 所创建的 widget 图标</span></span><br><span class="line">    <span class="attr">icon:</span></span><br><span class="line">    <span class="comment"># 所创建的 widget 相关代码</span></span><br><span class="line">    <span class="attr">html:</span></span><br><span class="line"><span class="comment"># 创建的 widget 会出现在 sticky 区域（除了文章页都会显示)</span></span><br><span class="line"><span class="attr">bottom:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">class_name:</span></span><br><span class="line">    <span class="attr">id_name:</span></span><br><span class="line">    <span class="attr">name:</span></span><br><span class="line">    <span class="attr">icon:</span></span><br><span class="line">    <span class="comment"># 所创建的 widget 排序 （可选）</span></span><br><span class="line">    <span class="attr">order:</span></span><br><span class="line">    <span class="attr">html:</span></span><br></pre></td></tr></table></figure>
<p>生成的代码为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-widget 所写的 class_name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;所写的 id_name&quot;</span> <span class="attr">style</span>=<span class="string">&quot;order: 所写的 order&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-headline&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;所写的 icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>所写的 name<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-content&quot;</span>&gt;</span></span><br><span class="line">        所写的 html</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果需要对添加的 widget 进行 UI 调整，请自行添加 css 到 inject 去。</p>
<h4 id="16-5-3-示例">16.5.3 示例</h4>
<p><strong>访客地图：</strong></p>
<ol>
<li class="lvl-3">
<p>获取方可地图的html代码</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">id</span>=<span class="string">&quot;clstr_globe&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>创建 widget.yml</p>
</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">user-map</span></span><br><span class="line">      <span class="attr">id_name:</span> <span class="string">user-map</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">访客地图</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-heartbeat</span></span><br><span class="line">      <span class="attr">order:</span></span><br><span class="line">      <span class="attr">html:</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot; id=&quot;clstr_globe&quot; src=&quot;//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8&quot;&gt;&lt;/script&gt;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>3.运行hexo即可。</p>
<h2 id="17-右下角按钮">17 右下角按钮</h2>
<h3 id="17-1-简繁转换">17.1 简繁转换</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 默认按钮显示文字(网站是简体，应设置为&#x27;default: 繁&#x27;)</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">简</span></span><br><span class="line">  <span class="comment">#网站默认语言，1: 繁体中文, 2: 简体中文</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment">#延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment">#当文字是简体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&quot;繁&quot;</span></span><br><span class="line">  <span class="comment">#当文字是繁体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&quot;简&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="17-2-阅读模式">17.2 阅读模式</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="17-3-夜间模式">17.3 夜间模式</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dark mode</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># dark mode和 light mode切换按钮 	是否在右下角显示日夜模式切换按钮</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Set the light mode time. The value is between 0 and 24. If not set, the default value is 6 and 18</span></span><br><span class="line">  <span class="attr">start:</span> <span class="comment"># 8</span></span><br><span class="line">  <span class="attr">end:</span> <span class="comment"># 22</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>自动切换的模式<br>
autoChangeMode: 1 跟随系统而变化，不支持的浏览器/系统将按照时间 start 到 end 之间切换为 light mode<br>
autoChangeMode: 2 只按照时间 start 到 end 之间切换为 light mode ,其余时间为 dark mode<br>
autoChangeMode: false 取消自动切换</p>
</blockquote>
<h3 id="17-4-滚动状态百分比">17.4 滚动状态百分比</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show scroll percent in scroll-to-top button</span></span><br><span class="line"><span class="attr">rightside_scroll_percent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="17-5-按钮排序">17.5 按钮排序</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work (非必要请不要修改 )</span></span><br><span class="line"><span class="comment"># Choose: readmode,translate,darkmode,hideAside,toc,chat,comment</span></span><br><span class="line"><span class="comment"># Don&#x27;t repeat 不要重复</span></span><br><span class="line"><span class="attr">rightside_item_order:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="comment"># readmode,translate,darkmode,hideAside</span></span><br><span class="line">  <span class="attr">show:</span> <span class="comment"># toc,chat,comment</span></span><br></pre></td></tr></table></figure>
<h2 id="18-标签外挂">18 标签外挂</h2>
<h3 id="18-1-Note">18.1 Note</h3>
<p>即类似引用块的标签块带上图标：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>默认用法：</p>
</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
</tr>
</thead>
<tbody>
<tr>
<td>class</td>
<td>【可选】标识，不同的标识有不同的配色<br/>（ default / primary / success / info / warning / danger ）</td>
</tr>
<tr>
<td>no-icon</td>
<td>【可选】不显示 icon</td>
</tr>
<tr>
<td>style</td>
<td>【可选】可以覆盖配置中的 style<br/>（simple/modern/flat/disabled）</td>
</tr>
</tbody>
</table>
<ol start="2">
<li class="lvl-3">
<p>自定义icon</p>
</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>color:【可选】颜色 (default / blue / pink / red / purple / orange / green)</p>
<p>icon:【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</p>
</div>
<h3 id="18-2-Gallery相册图库">18.2 Gallery相册图库</h3>
<p>一个图库集合</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>name：图库名字</p>
</li>
<li class="lvl-2">
<p>description：图库描述</p>
</li>
<li class="lvl-2">
<p>link：连接到对应相册的地址</p>
</li>
<li class="lvl-2">
<p>img-url：图库封面的地址</p>
</li>
</ul>
<p>如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span><br><span class="line">&#123;% galleryGroup &#x27;壁纸&#x27; &#x27;收藏的一些壁纸&#x27; &#x27;/Gallery/wallpaper&#x27; https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %&#125;</span><br><span class="line">&#123;% galleryGroup &#x27;漫威&#x27; &#x27;关于漫威的图片&#x27; &#x27;/Gallery/marvel&#x27; https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup &#x27;OH MY GIRL&#x27; &#x27;关于OH MY GIRL的图片&#x27; &#x27;/Gallery/ohmygirl&#x27; https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="18-3-Gallery相册">18.3 Gallery相册</h3>
<p>新的 Gallery 相册会自动根据图片长度进行排版，书写也更加方便，与 markdown 格式一样。可根据需要插入到相应的 md。</p>
<ol>
<li class="lvl-3">
<p>本地</p>
</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery [lazyload],[rowHeight],[limit] %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>lazyload</td>
<td>【可选】点击按钮加载更多图片，填写 true/false。默认为 false</td>
</tr>
<tr>
<td>rowHeight</td>
<td>【可选】图片显示的高度，如果需要一行显示更多的图片，可设置更小的数字。默认为 220。</td>
</tr>
<tr>
<td>limit</td>
<td>【可选】每次加载多少张照片。默认为 10。</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>远程拉取</p>
</li>
</ol>
<p>写法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery url,[link],[lazyload],[rowHeight],[limit] %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td>【必须】 识别词</td>
</tr>
<tr>
<td>link</td>
<td>【必须】远程的 json 链接</td>
</tr>
<tr>
<td>lazyload</td>
<td>【可选】点击按钮加载更多图片，填写 true/false。默认为 false。</td>
</tr>
<tr>
<td>rowHeight</td>
<td>【可选】图片显示的高度，如果需要一行显示更多的图片，可设置更小的数字。默认为 220。</td>
</tr>
<tr>
<td>limit</td>
<td>【可选】每次加载多少张照片。默认为 10。</td>
</tr>
</tbody>
</table>
<p>远程链接返回的json格式：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/IMG_0556.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IMG_0556.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这是title&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/IMG_0472.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IMG_0472.jpg&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/IMG_0453.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/IMG_0931.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<h3 id="18-4-tag-hide">18.4 tag-hide</h3>
<p>如果你想把一些文字、内容隐藏起来，并提供按钮让用户点击显示。可以使用这个标签外挂。</p>
<ol>
<li class="lvl-3">
<p>inline: 仅限文字</p>
</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% hideInline content,display,bg,color %&#125;</span><br></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">门里站着一个人? &#123;% hideInline 闪 %&#125;</span><br></pre></td></tr></table></figure>
<span class="hide-inline"><button type="button" class="hide-button" style="">Click
  </button><span class="hide-content">闪</span></span>
<ol start="2">
<li class="lvl-3">
<p>Block：可以隐藏很多内容，包括图片，代码块等等</p>
</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>( display 不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p>
</div>
<ul class="lvl-0">
<li class="lvl-2">
<p>content: 文本内容</p>
</li>
<li class="lvl-2">
<p>display: 按钮显示的文字(可选)</p>
</li>
<li class="lvl-2">
<p>bg: 按钮的背景颜色(可选)</p>
</li>
<li class="lvl-2">
<p>color: 按钮文字的颜色(可选)</p>
</li>
</ul>
<p>如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">查看答案</span><br><span class="line">&#123;% hideBlock 查看答案 %&#125;</span><br><span class="line">傻子，怎么可能有答案</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure>
<div class="hide-block"><button type="button" class="hide-button" style="">查看答案
    </button><div class="hide-content"><p>傻子，怎么可能有答案</p>
</div></div>
<ol start="3">
<li class="lvl-3">
<p>Toogle:展示的内容太多，可以把它隐藏在收缩框里，需要时再把它展开。</p>
</li>
</ol>
<div class="note info simple"><p>( display 不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p>
</div>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% hideToggle display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% hideToggle Butterfly安装方法 %&#125;</span><br><span class="line">在你的博客根目录里</span><br><span class="line"></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">如果想要安装比较新的dev分支，可以</span><br><span class="line"></span><br><span class="line">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure>
<details class="toggle" ><summary class="toggle-button" style="">Butterfly安装方法</summary><div class="toggle-content"><p>在你的博客根目录里</p>
<p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p>
<p>如果想要安装比较新的dev分支，可以</p>
<p>git clone -b dev <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p>
</div></details>
<h3 id="18-5-mermaid">18.5 mermaid</h3>
<p>使用mermaid标签可以绘制Flowchart（流程图）、Sequence diagram（时序图 ）、Class Diagram（类别图）、State Diagram（状态图）、Gantt（甘特图）和Pie Chart（圆形图），具体可以查看<a href="https://mermaid.js.org/#/">Mermaid文档</a> 。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mermaid</span></span><br><span class="line"><span class="comment"># see https://github.com/mermaid-js/mermaid</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># built-in themes: default/forest/dark/neutral</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br></pre></td></tr></table></figure>
<p>写法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">pie</span><br><span class="line"><span class="code">    title Key elements in Product X</span></span><br><span class="line"><span class="code">    &quot;Calcium&quot; : 42.96</span></span><br><span class="line"><span class="code">    &quot;Potassium&quot; : 50.05</span></span><br><span class="line"><span class="code">    &quot;Magnesium&quot; : 10.01</span></span><br><span class="line"><span class="code">    &quot;Iron&quot; :  5</span></span><br><span class="line"><span class="code">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  pie
    title Key elements in Product X
    &quot;Calcium&quot; : 42.96
    &quot;Potassium&quot; : 50.05
    &quot;Magnesium&quot; : 10.01
    &quot;Iron&quot; :  5
  </pre></div>
<h3 id="18-5-Tabs">18.5 Tabs</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line"><span class="code">                Will be used in #id&#x27;s as prefix for each tab with their index numbers.</span></span><br><span class="line"><span class="code">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span></span><br><span class="line"><span class="code">                Only for current url of post/page must be unique!</span></span><br><span class="line"><span class="code">[index]       : Index number of active tab.</span></span><br><span class="line"><span class="code">                If not specified, first tab (1) will be selected.</span></span><br><span class="line"><span class="code">                If index is -1, no tab will be selected. It&#x27;s will be something like spoiler.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[Tab caption] : Caption of current tab.</span></span><br><span class="line"><span class="code">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span></span><br><span class="line"><span class="code">                If not caption specified, but specified icon, caption will empty.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[@icon]       : FontAwesome icon name (full-name, look like &#x27;fas fa-font&#x27;)</span></span><br><span class="line"><span class="code">                Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; similar to &#x27;Tab caption@icon&#x27;.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br></pre></td></tr></table></figure>
<p>写法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<div class="note info simple"><p>可以设置预设选中index，设为-1则为都不选中。</p>
<p>可以设置icon</p>
</div>
<h3 id="18-6-Button">18.6 Button</h3>
<p>使用方法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class="line"></span><br><span class="line">[url]         : 链接</span><br><span class="line">[text]        : 按钮文字</span><br><span class="line">[icon]        : [可选] 图标</span><br><span class="line">[color]       : [可选] 按钮背景顔色(默认style时）</span><br><span class="line"><span class="code">                      按钮字体和边框顔色(outline时)</span></span><br><span class="line"><span class="code">                      default/blue/pink/red/purple/orange/green</span></span><br><span class="line"><span class="code">[style]       : [可选] 按钮样式 默认实心</span></span><br><span class="line"><span class="code">                      outline/留空</span></span><br><span class="line"><span class="code">[layout]      : [可选] 按钮佈局 默认为line</span></span><br><span class="line"><span class="code">                      block/留空</span></span><br><span class="line"><span class="code">[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边</span></span><br><span class="line"><span class="code">                      center/right/留空</span></span><br><span class="line"><span class="code">[size]        : [可选] 按钮大小</span></span><br><span class="line"><span class="code">                      larger/留空</span></span><br></pre></td></tr></table></figure>
<p>示例</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">This is theme-owner&#x27;s website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly %&#125;</span><br><span class="line">This is theme-owner&#x27;s website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right %&#125;</span><br><span class="line">This is theme-owner&#x27;s website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,,outline %&#125;</span><br><span class="line">This is theme-owner&#x27;s website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline %&#125;</span><br><span class="line">This is theme-owner&#x27;s website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br></pre></td></tr></table></figure>
<p>This is theme-owner’s website, click the button <a class="btn-beautify " href="https://butterfly.js.org/" 
  title="Butterfly"><span>Butterfly</span></a><br>
This is theme-owner’s website, click the button <a class="btn-beautify " href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>
This is theme-owner’s website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/" 
  title="Butterfly"><span>Butterfly</span></a><br>
This is theme-owner’s website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>
This is theme-owner’s website, click the button <a class="btn-beautify larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p>
<a class="btn-beautify outline blue larger" href="http://www.baidu.com" 
  title="去百度一下"><i class="far fa-hand-point-right"></i><span>去百度一下</span></a>
<h3 id="18-8-inlineImg">18.8 inlineImg</h3>
<p>主题中的图片都是默认以<code>块级元素</code>显示，如果你想以<code>内联元素</code>显示，可以使用这个标签外挂。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% inlineImg [src] [height] %&#125;</span><br><span class="line"></span><br><span class="line">[src]      :    图片链接</span><br><span class="line">[height]   ：   图片高度限制【可选】</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">内联图片： &#123;% inlineImg https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png 150px %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="18-9-label">18.9 label</h3>
<p>高亮需要的文字</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br><span class="line"></span><br><span class="line">[label] : 文字</span><br><span class="line">[color] ： 【可选】背景颜色，默认为 default ，default/blue/pink/red/purple/orange/green</span><br></pre></td></tr></table></figure>
<p>这是一段<mark class="hl-label default">测试</mark>  文字，<mark class="hl-label blue">我是蓝色</mark> ,而<mark class="hl-label pink">我是粉色</mark> 。</p>
<h3 id="18-10-timeline">18.10 timeline</h3>
<div class="note info simple"><p>4.0.0以上支持。</p>
</div>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% timeline title,color %&#125;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br><span class="line"></span><br><span class="line">[title] : 标题/时间线</span><br><span class="line">[color] : timeline 颜色 default(留空) / blue / pink / red / purple / orange / green</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 2022 %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure>
<div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p>
</div></div><div class='timeline-item-content'><p>这是测试页面</p>
</div></div></div>
<h3 id="18-11-flink">18.11 flink</h3>
<div class="note info simple"><p>4.1.0以上支持。</p>
</div>
<p>可在任何界面插入类似友情链接列表效果</p>
<p>内容格式与友情链接界面一样，支持 yml 格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line">xxxxxx</span><br><span class="line">&#123;% endflink %&#125;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line"><span class="bullet">-</span> class<span class="emphasis">_name: 友情链接</span></span><br><span class="line"><span class="emphasis">  class_</span>desc: 那些人，那些事</span><br><span class="line">  link<span class="emphasis">_list:</span></span><br><span class="line"><span class="emphasis">    - name: JerryC</span></span><br><span class="line"><span class="emphasis">      link: https://jerryc.me/</span></span><br><span class="line"><span class="emphasis">      avatar: https://jerryc.me/img/avatar.png</span></span><br><span class="line"><span class="emphasis">      descr: 今日事,今日毕</span></span><br><span class="line"><span class="emphasis">    - name: Hexo</span></span><br><span class="line"><span class="emphasis">      link: https://hexo.io/zh-tw/</span></span><br><span class="line"><span class="emphasis">      avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line"><span class="emphasis">      descr: 快速、简单且强大的网志框架</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">- class_</span>name: 网站</span><br><span class="line">  class<span class="emphasis">_desc: 值得推荐的网站</span></span><br><span class="line"><span class="emphasis">  link_</span>list:</span><br><span class="line"><span class="bullet">    -</span> name: Youtube</span><br><span class="line"><span class="code">      link: https://www.youtube.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line"><span class="code">      descr: 视频网站</span></span><br><span class="line"><span class="code">    - name: Weibo</span></span><br><span class="line"><span class="code">      link: https://www.weibo.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line"><span class="code">      descr: 中国最大社交分享平台</span></span><br><span class="line"><span class="code">    - name: Twitter</span></span><br><span class="line"><span class="code">      link: https://twitter.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line"><span class="code">      descr: 社交分享平台</span></span><br><span class="line"><span class="code">&#123;% endflink %&#125;</span></span><br></pre></td></tr></table></figure>
<div class="flink"><div class="flink-name">友情链接</div><div class="flink-desc">那些人，那些事</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://jerryc.me/" title="JerryC" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://jerryc.me/img/avatar.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="JerryC" />
              </div>
              <div class="flink-item-name">JerryC</div> 
              <div class="flink-item-desc" title="今日事,今日毕">今日事,今日毕</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://hexo.io/zh-tw/" title="Hexo" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Hexo" />
              </div>
              <div class="flink-item-name">Hexo</div> 
              <div class="flink-item-desc" title="快速、简单且强大的网志框架">快速、简单且强大的网志框架</div>
            </a>
          </div></div><div class="flink-name">网站</div><div class="flink-desc">值得推荐的网站</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://www.youtube.com/" title="Youtube" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Youtube" />
              </div>
              <div class="flink-item-name">Youtube</div> 
              <div class="flink-item-desc" title="视频网站">视频网站</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://www.weibo.com/" title="Weibo" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Weibo" />
              </div>
              <div class="flink-item-name">Weibo</div> 
              <div class="flink-item-desc" title="中国最大社交分享平台">中国最大社交分享平台</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://twitter.com/" title="Twitter" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Twitter" />
              </div>
              <div class="flink-item-name">Twitter</div> 
              <div class="flink-item-desc" title="社交分享平台">社交分享平台</div>
            </a>
          </div></div></div>
<div class="note warning simple"><p>本文为测试博客而摘录的教程。更多深入请访问<a href="https://butterfly.js.org/posts/dc584b87/">butterfly主题官网文档</a>。</p>
</div>]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>butterfly主题</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>我做了一个专属形象-头像</title>
    <url>/person/%E5%85%B3%E4%BA%8E%E5%A4%B4%E5%83%8F/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>一直以来，看到一些自媒体平台上（个人主要是在B站刷的多）大小博主们都会有一个自己的专属形象，作为头像或是在视频中作为参与者出现，我会感觉这是一件很酷的事情！而近在眼前的例子，我的本科舍友巫大佬[ <a href="https://www.bookrest.top/">书歇于此 - 读书歇脚处，璺道静心斋 (bookrest.top)</a> ]就为自己设计了专属的头像(虽然不是人形，但也算是形象了)和书斋名。一方面会觉得很酷，另一方面，作为一个有个性的人，这也是锦上添花的。于是，早年我也想着手设计一下自己的形象，但奈何缺少绘画技术与天赋，也没有足够的灵感火花，事情就这样搁置了。</p>
<h2 id="伏笔">伏笔</h2>
<p>本科那会，本人就像个进了大观园的刘姥姥，对一些新鲜的技术充满了好奇。那会经常会有培训班的人打着免费课程的幌子懵懂的大学生入群，教授PhotoShop的基础技术，极其基础，但又确实有点小用，导致你能跟着他做出一些小东西，但实现不了自己想做的东西，从而诱导你购买进阶课程或者报班。</p>
<p>我便是被骗的懵懂大学生之一，虽然没有被骗到付费，但也花费了很多时间去学习PhotoShop的基础知识。后来发现B站上有很多更优质一些的教程，也跟随着学过，算是掌握了一些基础的作图修图技能。因掌握的技术有限，又缺少实践场景，这个技能便藏在我的大脑仓库角落了。</p>
<h2 id="转机">转机</h2>
<p>直到目前研二，距离哼哧哼哧学PhotoShop已经过去了4年多（时间过得真快啊~），前不久导师安排的一个影像征集网站的制作，需要进行一个首页的设计，原本是交给一个同学来进行，但是对方可能比较忙，迟迟没有交给我设计稿，再拖下去开发就来不及了~，嘛~合作的任务这种事常有的啦，想起大三程序设计课程小组任务，整个项目的四分之三愣是我一个人干的，见怪不怪了，于是自己动手开干。</p>
<p>但是我在视觉设计上曾经是一个审美被老师和同学批判的存在，怎么设计呢？只能参考别人的设计了，恰巧就找到了一个还不错的大学生影像征集平台，于是把布局全部copy过来，处理，运行，修理红字，嘿，还真就像那么回事，挺整洁漂亮。不得不说，专业的设计师还真是厉害。</p>
<p>布局有了，接下来就是各种贴图了，于是我让同学去做三个图片，我来继续根据现有设计开发前端。然而等我前端做完了图还没来，这时我便想起了在角落积灰已久的PhotoShop技能了，花了一个多小时，Logo，主页图有了，后来与同学协商，小贴图也有了。最后的感觉还不错呢~</p>
<p><a href="https://z4a.net/image/VuXqOK"><img src="https://z4a.net/images/2023/04/23/c68626cdea8f256c3cd0c1eaf488ee8b.md.png" alt="高新区影像征集平台成品"></a></p>
<h2 id="灵感？借鉴！">灵感？借鉴！</h2>
<p>这件事给了我两个启发：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>我还有个半吊子水平的PhotoShop技能在手上</p>
</li>
<li class="lvl-2">
<p>做不到从0开始创造，但可以借鉴优秀的成品</p>
</li>
</ul>
<p>我想起了数年前那个念想——<mark class="hl-label pink">做一个自己的专属形象</mark> ，我可以利用手上的技术，借鉴大佬的作品风格！我第一时间想到了我很喜欢的简约而又美观的可爱的 <a href="https://space.bilibili.com/402576555">画渣花小烙</a> 的个人形象风格。于是找了下图的形象作为绘图风格参考：</p>
<p><a href="https://z4a.net/image/VuXD4U"><img src="https://z4a.net/images/2023/04/23/bc559b72686847de702f21a7049ac8c4.md.png" alt="花小烙的可爱形象"></a></p>
<p>由于绘画技能掌握生疏，这件事说起来容易，做起来对我来说却挺困难，整整花了一个下午：</p>
<p><a href="https://z4a.net/image/VuXNcJ"><img src="https://z4a.net/images/2023/04/23/c65dcb518e8a9d11396e6f06bb933c99.md.png" alt="绘图过程中"></a></p>
<p>最后勉强做出来了一个还算满意的，还有更多想法，不过能力有限实现上有些困难。</p>
<p><a href="https://z4a.net/image/VuXaOI"><img src="https://z4a.net/images/2023/04/23/lenl_01.md.png" alt="Lenl个人形象成品"></a></p>
<p>没有太多的寓意与设计，就是一个简单的个人形象，不过我已经很满意了，他就和我现在一样，简单而朴素，需要继续加油捏~</p>
<h2 id="结语">结语</h2>
<p>不过话说回来，这样做画风的高度借鉴需不需要去得到花小烙授权呢？放在一起看还真像姐弟嘞。我就去多给花小烙投几个币好了。顺带推荐一下，一个画风巨可爱的科普up主，立志要做一个有梦想的(此处可加各种前缀)的博学的画渣，传送门： <a href="https://space.bilibili.com/402576555">画渣花小烙</a></p>
<p>由此记录一下这段小小的经历，感觉蛮有趣的，拥有了自己的专属形象也有那么一丢丢成就感呢。</p>
<div class="note warning simple"><p>开个玩笑：如果有想要相同画风的，本人可以有偿接稿捏~毕竟我画一个需要半天至一天</p>
</div>
]]></content>
      <categories>
        <category>生活</category>
        <category>创造</category>
      </categories>
      <tags>
        <tag>DIY</tag>
        <tag>个人相关</tag>
        <tag>头像</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab安装记录</title>
    <url>/notes/GitLabInstall/</url>
    <content><![CDATA[<h2 id="一、安装过程">一、安装过程</h2>
<h3 id="1-下载gitlab">1.下载gitlab</h3>
<p>前往官网 <a href="https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-15.4.5-ce.0.el7.x86_64.rpm">点击跳转</a> 下载15.4.5版本的安装包，并上传至linux的/opt目录。</p>
<h3 id="2-安装">2.安装</h3>
<p>运行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh /opt/gitlab-ce-15.4.5-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h3 id="3-删除安装包">3.删除安装包</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f /opt/gitlab-ce-15.4.5-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h3 id="4-配置">4.配置</h3>
<p>修改 <code>etc/gitlab/gitlab.rb</code> 配置文件：</p>
<h4 id="4-1设置外部url">4.1设置外部url</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 文件32行</span><br><span class="line">external_url &#x27;http://ip:8989&#x27;</span><br></pre></td></tr></table></figure>
<h4 id="4-2设置时区">4.2设置时区</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 文件68行</span><br><span class="line">gitlab_rails[&#x27;time_zone&#x27;] = &#x27;Asia/Shanghai&#x27;</span><br></pre></td></tr></table></figure>
<h4 id="4-3设置数据存储地址">4.3设置数据存储地址</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 文件629行</span><br><span class="line">git_data_dirs(&#123;</span><br><span class="line">	&quot;default&quot; =&gt; &#123;</span><br><span class="line">		&quot;path&quot; =&gt; &quot;/usr/local/gitlab/data&quot;</span><br><span class="line">	&#125;,</span><br><span class="line">	&quot;alternative&quot; =&gt; &#123;</span><br><span class="line">		&quot;path&quot; =&gt; &quot;/usr/local/gitlab/data/backup&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="4-4设置sidekiq最大并发量">4.4设置sidekiq最大并发量</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 文件1051行</span><br><span class="line">sidekiq[&#x27;max_concurrency&#x27;] = 50</span><br></pre></td></tr></table></figure>
<h4 id="4-5设置postgresql">4.5设置postgresql</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 文件1136行</span><br><span class="line">postgresql[&#x27;shared_buffers&#x27;] = &quot;256MB&quot;</span><br><span class="line"># 文件1221行</span><br><span class="line">postgresql[&#x27;max_worker_processes&#x27;] = 8</span><br></pre></td></tr></table></figure>
<h4 id="4-6修改nginx默认端口，避免冲突">4.6修改nginx默认端口，避免冲突</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 文件1457行</span><br><span class="line">nginx[&#x27;listen_port&#x27;] = 8989</span><br></pre></td></tr></table></figure>
<p>注意：此处必须要与外部url的端口一致</p>
<h4 id="4-7关闭prometheus监控">4.7关闭prometheus监控</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 文件2222行</span><br><span class="line">prometheus_monitoring[&#x27;enable&#x27;] = false</span><br></pre></td></tr></table></figure>
<h3 id="5-重载">5.重载</h3>
<p>重新加载gitlab配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>
<h3 id="6-重启">6.重启</h3>
<p>重新启动gitlab</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure>
<h3 id="7-自启动">7.自启动</h3>
<p>开启gitlab开机自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> gitlab-runsvdir.service</span><br></pre></td></tr></table></figure>
<h3 id="8-端口">8.端口</h3>
<p>开放8989端口号，允许外部通过该端口访问gitlab</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8989/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h3 id="9-日志">9.日志</h3>
<p>查看gitlab日志信息，ctrl+c退出。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl <span class="built_in">tail</span></span><br></pre></td></tr></table></figure>
<h3 id="10-访问">10.访问</h3>
<p>通过浏览器访问即可 <a href="http://ip">http://ip</a>:port/</p>
<p>初始用户名为root，密码在 <code>/etc/gitlab/</code> 下会生成一个 <code>initial_root_password</code> 初始密码。</p>
<p>初始密码较长不便于记忆，可在登录后进行更改。</p>
]]></content>
      <categories>
        <category>学习经验</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>基于pdf.js的前后端分离式PDF文件预览实现</title>
    <url>/notes/PdfView/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>为了实现前后端分离模式下的pdf预览，结合网上的一些文章做了一些尝试，折腾了一天终于完成了，在这里记录一下最后正确的实现，以便后续查阅。</p>
<p>前后端分离模式下的文件预览不同于服务端渲染前端，可以通过直接传递文件路径进行文件的预览；而前后端分离模式只能是通过接口让前端下载文件后再进行展示。</p>
<p>当然，这种需求早就是烂大街了，网上应该有很多实现吧。我这么想着，但是搜索出来的结果都是残缺的复制粘贴搬运，根本没法用（唉，这脏乱差的中文互联网环境~），于是东拼西凑，慢慢折腾好了。前端就用大名鼎鼎的 <code>pdf.js</code> 好了，后端 <code>SpringBoot</code> 做一个接口，让前端下载。</p>
<h2 id="前端实现">前端实现</h2>
<h3 id="下载pdf-js">下载pdf.js</h3>
<p>首先前往pdf.js的 <code>github</code> 仓库下载（<a href="https://github.com/mozilla/pdf.js/releases">仓库release地址</a>）合适的版本，遵从找到的文章，这里我选择了 <code>2.3.313</code> 版本。需要下载的是 <code>pdfjs-2.3.313-dist.zip</code> 这个 <code>Assets</code> 。</p>
<h3 id="引入项目">引入项目</h3>
<p>下载并解压完成后，需要引入项目，并做一些适配性改动。</p>
<p>首先，解压后其结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">build</span><br><span class="line">web</span><br><span class="line">LICENSE</span><br></pre></td></tr></table></figure>
<p>在前端目录的 <code>public</code> 下创建文件夹 <code>pdfjs</code> ，这里如果是electron或者比较旧的版本的话需要建在static文件夹下。然后将 <code>build</code> 与 <code>web</code> 两部分拷到新建的文件夹下。这样，就算是项目将 <code>pdf.js</code> 引入了。</p>
<p>接下来为了其可用，还要做一些配置：</p>
<h4 id="解决跨域">解决跨域</h4>
<p><code>pdf.js</code> 会检查源的跨域与否，需要在 <code>web/view.js</code> 中找到如下的代码，并将其注释掉：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (origin !== viewerOrigin &amp;&amp; protocol !== <span class="string">&quot;blob:&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;file origin does not match viewer&#x27;s&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此外，后端也需要做一些跨域相关配置的，详见后文后端部分。</p>
<h4 id="支持分页预览">支持分页预览</h4>
<p>预览的pdf可能会比较大，一次性加载显然在部分情况下不合适，因此需要分页传输，这需要做一些更改：</p>
<p>在 <code>web/viewer.js</code> 中搜索 <code>disable</code> ，找到如下配置并修改为如下样子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;disableAutoFetch&quot;: true, //是否禁用自动获取，true为禁用自动获取，开启分页</span><br><span class="line">&quot;disableFontFace&quot;: false,</span><br><span class="line">&quot;disableRange&quot;: false, //是否禁用range获取文件，false表示支持分页请求头</span><br><span class="line">&quot;disableStream&quot;: true, //分页关键，是否禁用流的形式加载</span><br></pre></td></tr></table></figure>
<h4 id="设置分页尺寸">设置分页尺寸</h4>
<p>在 <code>build/pdf.js</code> 中，找到 <code>DEFAULT_RANGE_CHUNK_SIZE</code> 配置项，其默认是 <code>65536</code> ，我们可以将其配置的大一些，这里我配置成了 <code>65536 * 16</code> 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const DEFAULT_RANGE_CHUNK_SIZE = 65536 * 16 ;</span><br></pre></td></tr></table></figure>
<h4 id="请求头加上token">请求头加上token</h4>
<p>在正常的前后端交流中，这里可能是需要登录才能访问，因此需要在请求头加上token。基本上没有文章提到这一点，在我经过数次失败后，发现这一点并苦苦寻找到了相关文件以及代码位置。</p>
<p>在 <code>build/pdf.js</code> 中找到 <code>function createHeaders(httpHeaders)</code> ，并在这里添加token，参考如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createHeaders</span>(<span class="params">httpHeaders</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> headers = <span class="keyword">new</span> <span class="title class_">Headers</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> property <span class="keyword">in</span> httpHeaders) &#123;</span><br><span class="line">        <span class="keyword">const</span> value = httpHeaders[property];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        headers.<span class="title function_">append</span>(property, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义 添加了请求的token</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">TokenKey</span> = <span class="string">&#x27;TZCJ-ONLINE-TOKEN&#x27;</span></span><br><span class="line">    headers.<span class="title function_">append</span>(<span class="string">&#x27;token&#x27;</span>, sessionStorage.<span class="title function_">getItem</span>(<span class="title class_">TokenKey</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> headers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样一来，准备工作就做好了，接下来是预览的实现。</p>
<h3 id="创建预览组件">创建预览组件</h3>
<p>新建一个组件 <code>PdfView</code> ，pdf使用iframe呈现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;iframe :src=&quot;pdfUrl&quot; width=&quot;95%&quot; height=&quot;100%&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;PdfView&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // pdf.js中view.html所在位置</span><br><span class="line">      baseUrl: &#x27;/static/pdf/web/viewer.html&#x27;,</span><br><span class="line">      // 要传输给iframe的最终url</span><br><span class="line">      pdfUrl: &#x27;&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;&#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 传来的参数是后端接口地址，使用encodeURIComponent做一下格式化</span><br><span class="line">    setPdf(url) &#123;</span><br><span class="line">      this.pdfUrl = `$&#123;this.baseUrl&#125;?file=$&#123;encodeURIComponent(url)&#125;`</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">  height: 100vh;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后我们在自己的页面中进行使用，示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;pdf-view ref=&quot;PdfView&quot;&gt;&lt;/pdf-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import PdfView from &#x27;@/components/PdfView&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;PromiseView&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    PdfView,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">      this.openFile(1);</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    openFile(id) &#123;</span><br><span class="line">      const that = this</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        // 组合后端请求api</span><br><span class="line">        const api = `$&#123;window.g.BASE_URL&#125;projects/promiseView?id=$&#123;id&#125;`</span><br><span class="line">        that.$refs.PdfView.setPdf(api)</span><br><span class="line">      &#125;, 200);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.container&#123;</span><br><span class="line">  width:950px;</span><br><span class="line">  height: 650px;</span><br><span class="line">  overflow: auto;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="后端实现">后端实现</h2>
<p>后端的接口实现这里也费了一番功夫，咱就是说网上那些搬运工搬运的时候自己不试一下的？有问题的代码搬运得到处都是，误人子弟。</p>
<p>总之需要一个 <code>commons-io</code> 的pom依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io 工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后直接放调整后的接口实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">promiseView</span><span class="params">(Integer id,HttpServletResponse response, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">// 数据库查询到项目实体，以便于获取文件路径</span></span><br><span class="line">    <span class="type">Projects</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="built_in">super</span>.getById(id);</span><br><span class="line">    <span class="keyword">if</span>(pro == <span class="literal">null</span>)&#123;</span><br><span class="line">        log.error(<span class="string">&quot;未能找到项目对象&quot;</span>);</span><br><span class="line">        response.setStatus(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 这里存储的是文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">promise</span> <span class="operator">=</span> pro.getPromise();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(promise))&#123;</span><br><span class="line">            log.error(<span class="string">&quot;未能找到文件名称&quot;</span>);</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 这里是拼接一些自定义常量得到文件在服务器的真实位置</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span>  Paths.get(workspace, Consts.UNIT_PROJECT_PROMISE_DIR,promise).toString();</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">            <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">                log.error(<span class="string">&quot;未能找到文件&quot;</span>);</span><br><span class="line">                response.setStatus(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">boolean</span> firstRequest=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                    bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(is);</span><br><span class="line">                    os = response.getOutputStream();</span><br><span class="line">                    bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(os);</span><br><span class="line">                    <span class="comment">// 下载的字节范围</span></span><br><span class="line">                    <span class="type">int</span> startByte, endByte, totalByte;</span><br><span class="line">                    <span class="keyword">if</span> (request != <span class="literal">null</span> &amp;&amp; request.getHeader(<span class="string">&quot;range&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 断点续传</span></span><br><span class="line">                        String[] range = request.getHeader(<span class="string">&quot;range&quot;</span>).replaceAll(<span class="string">&quot;[^0-9\\-]&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">                        <span class="comment">// 文件总大小</span></span><br><span class="line">                        totalByte = is.available();</span><br><span class="line">                        <span class="comment">// 下载起始位置</span></span><br><span class="line">                        startByte = Integer.parseInt(range[<span class="number">0</span>]);</span><br><span class="line">                        <span class="comment">// 下载结束位置</span></span><br><span class="line">                        <span class="keyword">if</span> (range.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                            endByte = Integer.parseInt(range[<span class="number">1</span>]);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            endByte = totalByte - <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 返回http状态</span></span><br><span class="line">                        response.setStatus(<span class="number">206</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 首次请求</span></span><br><span class="line">                        firstRequest = <span class="literal">true</span>;</span><br><span class="line">                        <span class="comment">// 正常下载</span></span><br><span class="line">                        <span class="comment">// 文件总大小</span></span><br><span class="line">                        totalByte = is.available();</span><br><span class="line">                        <span class="comment">// 下载起始位置</span></span><br><span class="line">                        startByte = <span class="number">0</span>;</span><br><span class="line">                        <span class="comment">// 下载结束位置</span></span><br><span class="line">                        endByte = totalByte - <span class="number">1</span>;</span><br><span class="line">                        <span class="comment">// 返回http状态</span></span><br><span class="line">                        response.setHeader(<span class="string">&quot;Accept-Ranges&quot;</span>, <span class="string">&quot;bytes&quot;</span>);</span><br><span class="line">                        response.setStatus(<span class="number">200</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 需要下载字节数</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> endByte - startByte + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 响应头</span></span><br><span class="line">                    response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line">                    response.setHeader(<span class="string">&quot;Accept-Ranges&quot;</span>, <span class="string">&quot;bytes&quot;</span>);</span><br><span class="line">                    response.setHeader(<span class="string">&quot;Content-Range&quot;</span>, <span class="string">&quot;bytes &quot;</span> + startByte + <span class="string">&quot;-&quot;</span> + endByte + <span class="string">&quot;/&quot;</span> + totalByte);</span><br><span class="line">                    response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">                    response.setContentLength(length);</span><br><span class="line">                    <span class="type">int</span> BLOCK_SIZE=<span class="number">1024</span> * <span class="number">64</span> * <span class="number">16</span>;</span><br><span class="line">                    <span class="comment">// 如果是需要分片的且是首次请求，直接返回一个需要切片的信号</span></span><br><span class="line">                    <span class="keyword">if</span>(firstRequest &amp;&amp; totalByte&gt;BLOCK_SIZE)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    <span class="comment">// 响应内容</span></span><br><span class="line">                    bis.skip(startByte);</span><br><span class="line">                    <span class="type">int</span> len;</span><br><span class="line">                    <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[BLOCK_SIZE];</span><br><span class="line">                    <span class="keyword">if</span> ((len = bis.read(buff, <span class="number">0</span>, buff.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        bos.write(buff, <span class="number">0</span>, len);</span><br><span class="line">                        bos.flush();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ce)&#123;</span><br><span class="line">                    ce.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    IOUtils.closeQuietly(bos);</span><br><span class="line">                    IOUtils.closeQuietly(os);</span><br><span class="line">                    IOUtils.closeQuietly(bis);</span><br><span class="line">                    IOUtils.closeQuietly(is);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如此即可。</p>
<h3 id="网上搬运人错误鉴定">网上搬运人错误鉴定</h3>
<p>以下是网上搬运人到处搬运的后端代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>:2022/2/10 14:00</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>:lngrid 分页加载pdf</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadPDFByPage</span><span class="params">(File file, HttpServletResponse response, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(is);</span><br><span class="line">        os = response.getOutputStream();</span><br><span class="line">        bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(os);</span><br><span class="line">        <span class="comment">// 下载的字节范围</span></span><br><span class="line">        <span class="type">int</span> startByte, endByte, totalByte;</span><br><span class="line">        <span class="keyword">if</span> (request != <span class="literal">null</span> &amp;&amp; request.getHeader(<span class="string">&quot;range&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 断点续传</span></span><br><span class="line">            String[] range = request.getHeader(<span class="string">&quot;range&quot;</span>).replaceAll(<span class="string">&quot;[^0-9\\-]&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="comment">// 文件总大小</span></span><br><span class="line">            totalByte = is.available();</span><br><span class="line">            <span class="comment">// 下载起始位置</span></span><br><span class="line">            startByte = Integer.parseInt(range[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">// 下载结束位置</span></span><br><span class="line">            <span class="keyword">if</span> (range.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                endByte = Integer.parseInt(range[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                endByte = totalByte - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 返回http状态</span></span><br><span class="line">            response.setStatus(<span class="number">206</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 正常下载</span></span><br><span class="line">            <span class="comment">// 文件总大小</span></span><br><span class="line">            totalByte = is.available();</span><br><span class="line">            <span class="comment">// 下载起始位置</span></span><br><span class="line">            startByte = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 下载结束位置</span></span><br><span class="line">            endByte = totalByte - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 返回http状态</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Accept-Ranges&quot;</span>, <span class="string">&quot;bytes&quot;</span>);</span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 需要下载字节数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> endByte - startByte + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 响应头</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Accept-Ranges&quot;</span>, <span class="string">&quot;bytes&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Range&quot;</span>, <span class="string">&quot;bytes &quot;</span> + startByte + <span class="string">&quot;-&quot;</span> + endByte + <span class="string">&quot;/&quot;</span> + totalByte);</span><br><span class="line">        <span class="comment">//            response.setContentType(&quot;application/pdf&quot;);</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">        response.setContentLength(length);</span><br><span class="line">        <span class="comment">// 响应内容</span></span><br><span class="line">        bis.skip(startByte);</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">64</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(buff, <span class="number">0</span>, buff.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (length &lt;= len) &#123;</span><br><span class="line">                bos.write(buff, <span class="number">0</span>, length);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                length -= len;</span><br><span class="line">                bos.write(buff, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//也可使用try catch关闭IO流</span></span><br><span class="line">        IOUtils.closeQuietly(bos);</span><br><span class="line">        IOUtils.closeQuietly(os);</span><br><span class="line">        IOUtils.closeQuietly(bis);</span><br><span class="line">        IOUtils.closeQuietly(is);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其问题在于，中间的循环会使得分页传输完全没有什么意义，第一次就会读取文件的全部内容并进行传输写入，还会导致连接关闭后后端报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.apache.catalina.connector.ClientAbortException: java.io.IOException: 您的主机中的软件中止了一个已建立的连接。</span><br></pre></td></tr></table></figure>
<p>而首次请求仅仅是为了让pdf.js发送后续的分页请求而已。但是如果文件大小本身就小于分片大小时，就需要第一次请求就传输全部数据了。因此对这段代码做了更改，如此既能实现分片预览，又不会出现奇怪的报错了。</p>
]]></content>
      <categories>
        <category>编程随记</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>PDF</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2集成Knife4j完成api文档自动生成</title>
    <url>/notes/Knife4j/</url>
    <content><![CDATA[<div class="note info simple"><p>在之前的学习中尝试了使用SpringBoot2集成Swagger2完成api文档的自动生成，但是个人不是很喜欢swagger的api文档风格，使用体验也比较糟糕。因此循着swagger找到了knife4j，并初次尝试了集成使用，感觉还不错，在此记录一下初次使用的经验。</p>
</div>
<h3 id="1-引入依赖">1 引入依赖</h3>
<p>首先在 <code>pom.xml</code> 中引入knife4j的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这是SpringBoot2.x的版本，SpringBoot3.x所引用的依赖是下面这个。本人暂时未涉足SpringBoot3，因此后面的经验仅限于SpringBoot2.x。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringBoot3集成knife4j的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-添加Knife4j配置">2 添加Knife4j配置</h3>
<p>在 <code>WebConfig</code> 中加入knife4j的相关配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span>  <span class="title class_">WebMvcConfigurer</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SignInterceptor <span class="title function_">signInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SignInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean(value = &quot;testApiDoc&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> Docket <span class="title function_">testApiDoc</span><span class="params">()</span> &#123;</span><br><span class="line">            Docket docket=<span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                    .apiInfo(<span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                            <span class="comment">//文档标题</span></span><br><span class="line">                            .title(<span class="string">&quot;测试Knife4j-API文档&quot;</span>)</span><br><span class="line">                            <span class="comment">//文档描述</span></span><br><span class="line">                            .description(<span class="string">&quot;测试一下SpringBoot集成Knife4j自动生成API文档&quot;</span>)</span><br><span class="line">                            .termsOfServiceUrl(<span class="string">&quot;http://www.xx.com/&quot;</span>)</span><br><span class="line">                            .contact(<span class="string">&quot;xx@qq.com&quot;</span>)</span><br><span class="line">                            <span class="comment">//版本</span></span><br><span class="line">                            .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                            .build()</span><br><span class="line">                            <span class="comment">//.ignoredParameterTypes(HttpSession.class) //添加默认忽略类型</span></span><br><span class="line">                            )</span><br><span class="line">                    <span class="comment">//分组名称</span></span><br><span class="line">                    .groupName(<span class="string">&quot;初始版本&quot;</span>)</span><br><span class="line">                    .select()</span><br><span class="line">                    <span class="comment">//这里指定Controller扫描包路径</span></span><br><span class="line">                   .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;cn.wolfcode.wolf2w.controller&quot;</span>))</span><br><span class="line">                    .paths(PathSelectors.any())</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="keyword">return</span> docket;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//添加签名拦截器（防篡改）</span></span><br><span class="line">        registry.addInterceptor(signInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">//排除接口文档</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/swagger-resources&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里有一些需要注意的问题：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>@EnableSwagger2WebMvc</code> 注解问题</p>
<p>Config需要添加该注解，但如果项目同时还引入了 swagger 相关依赖，则会提示找不到该注解，需要在pom.xml中注掉swagger的相关依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger相关依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>文档接口的排除问题</p>
<p>api文档的访问是 <code>host:ip/swagger-resources</code> 接口，如果项目中有一些接口访问控制操作，如一些过滤器、拦截器，统一接口返回增强等，需要排除 <code>/swagger-resources</code> 这个接口，否则api文档将无法访问。</p>
</li>
</ul>
<h3 id="3-api文档访问">3 api文档访问</h3>
<p>上述配置完成后，访问 <code>host:ip/doc.html</code> 即可看到文档。</p>
<p>但是此时的文档比较原始，缺少中文说明，需要在接口、参数中使用注解进行美化。</p>
<h3 id="4-api文档内容注解">4 api文档内容注解</h3>
<p>knife4j的文档内容注解与swagger差不多（也可能是一样？），部分如下所示：</p>
<ol>
<li class="lvl-3">
<p>关于控制器的说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(value = &quot;用户资源&quot;,tags = &quot;用户控制器&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>关于接口方法的说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;账号检测&quot;,notes=&quot;查看当前电话是否已经注册&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/checkPhone&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">checkPhone</span><span class="params">(String phone)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> ret=userinfoService.checkPhone(phone);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>关于接口方法说明和请求参数的说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;账号检测&quot;,notes=&quot;查看当前电话是否已经注册&quot;)</span></span><br><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta"> 	@ApiImplicitParam(value = &quot;手机号&quot;,name=&quot;phone&quot;,dataType = &quot;String&quot;,required = true), //这里可以添加多个，用逗号隔开</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/checkPhone&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">checkPhone</span><span class="params">(String phone)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> ret=userinfoService.checkPhone(phone);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>关于响应的说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/currentUser&quot;)</span></span><br><span class="line"><span class="meta">@ApiResponse(code = 200,message = &quot;获取当前用户成功&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult <span class="title function_">getCurrentUser</span><span class="params">(<span class="meta">@UserParam</span> UserInfo user)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> JsonResult.success(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>当请求参数为对象时，可以直接在对应参数上添加说明注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 游记查询参数封装对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ApiModel(value=&quot;游记查询&quot;,description=&quot;游记查询参数&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TravelQuery</span> <span class="keyword">extends</span>  <span class="title class_">QueryObject</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long destId;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;天数类型&quot;,name=&quot;dayType&quot;,dataType=&quot;Integer&quot;,requird=true,example=12)</span></span><br><span class="line">    <span class="keyword">private</span> Integer dayType;</span><br><span class="line">    <span class="keyword">private</span> Integer travelTimeType;</span><br><span class="line">    <span class="keyword">private</span> Integer consumeType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时在controller的方法上添加 @ApiOperationSupport(ignoreParameters = &#123;&quot;qo.id&quot;,&quot;qo.xx&quot;&#125;)  注解可以排除Model中的一些属性。</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>当需要指定忽略掉请求方法中的某些参数时，可以为该参数加上 <code>@ApiIgnore</code> 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequiredLogin</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/currentUser&quot;)</span></span><br><span class="line"><span class="meta">@ApiResponse(code = 200,message = &quot;获取当前用户成功&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult <span class="title function_">getCurrentUser</span><span class="params">(<span class="meta">@UserParam</span> <span class="meta">@ApiIgnore</span> UserInfo user)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> JsonResult.success(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p><code>@ApiIgnore</code> 方法还能用在controller上、Class上。</p>
</div>
</li>
</ol>
<div class="note warning simple"><p>目前对于knife4j还在了解和认识阶段，本人尚未投入实战使用，下次项目中实际使用后有新的经验会继续补充。</p>
</div>
]]></content>
      <categories>
        <category>学习经验</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Knife4j</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基本使用与协作开发学习</title>
    <url>/notes/GitLearn/</url>
    <content><![CDATA[<div class="note info simple"><p>在以往的git使用中，由于基本上是单人开发，而且项目比较小，因此仅仅是将其作为一个备份防丢失的远程库，存放代码文件，对其使用进阶技巧和功能知之甚少也很少关注。</p>
<p>随着项目做的比较大，需要协作开发，想推进使用git与团队进行协作开发，但囿于自身掌握程度偏低，没有顺利带领团队推进使用git的协作。</p>
<p>因此，打算再再再一次系统地、广泛地学习git使用技巧，一方面为了推进团队的协作开发，另一方面为了之后能够在git上和大佬们一起玩代码。</p>
</div>
<p>git可以在一些优秀的博客文章中学习，很多。</p>
<p>关于github 的学习最好的方法还是阅读又细又全的官方文档：<a href="https://docs.github.com/zh">GitHub Docs</a></p>
<p>这里我从一个协作开发实战的教学视频中进行一些总结，仅供个人参考备忘。</p>
<h2 id="基本概念">基本概念</h2>
<p>git : 分布式 版本控制 软件。</p>
<p>进步：多文件版本 – 本地单文件版本控制 – 集中式版本控制(SVN) – 分布式版本控制</p>
<h2 id="基本使用">基本使用</h2>
<h3 id="初始操作">初始操作</h3>
<ol>
<li class="lvl-3">
<p>进入要管理的目录</p>
</li>
<li class="lvl-3">
<p>初始化：<code>git init</code></p>
</li>
<li class="lvl-3">
<p>状态查看： <code>git status</code></p>
<ul class="lvl-2">
<li class="lvl-5">红色：新增文件/修改了的原老文件</li>
<li class="lvl-5">绿色：git已经管理了该文件，但尚未生成版本</li>
<li class="lvl-5">生成了版本的文件不再显示</li>
</ul>
</li>
<li class="lvl-3">
<p>将文件管理起来：<code>git add .</code> 或 <code>git add xxx</code></p>
</li>
<li class="lvl-3">
<p>个人信息配置(用户名、邮箱)：</p>
<ul class="lvl-2">
<li class="lvl-5"><code>git conig --global user.name &quot;xxx&quot;</code></li>
<li class="lvl-5"><code>git config --global user.email &quot;xxx@xx.com&quot;</code></li>
</ul>
</li>
<li class="lvl-3">
<p>提交，生成版本：<code>git commit -m &quot;v1 description&quot;</code></p>
</li>
<li class="lvl-3">
<p>查看提交记录：<code>git log</code></p>
</li>
</ol>
<h3 id="git三大区域">git三大区域</h3>
<table>
<thead>
<tr>
<th>工作区</th>
<th>暂存区</th>
<th>版本库</th>
</tr>
</thead>
<tbody>
<tr>
<td>|已管理(绿色)|新增/修改(红色)|     —&gt;(git add .)</td>
<td>—&gt;(git commit -m “”)</td>
<td>生成版本</td>
</tr>
</tbody>
</table>
<p>详细如图：</p>
<p><a href="https://z4a.net/image/VmvrOI"><img src="https://z4a.net/images/2023/05/05/git.md.png" alt="git三大区域及关系示意图"></a></p>
<h3 id="git回滚">git回滚</h3>
<h4 id="场景1-回滚">场景1 回滚</h4>
<p>当前已提交了v1，v2两个版本，但此时需要重新回滚到v1版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询提交日志</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">commit f5ca8858834f603402fcd49c363ba17ae5356969 (HEAD -&gt; master)</span><br><span class="line">Author: LNL &lt;2570358917@qq.com&gt;</span><br><span class="line">Date:   Fri May 5 13:44:42 2023 +0800</span><br><span class="line"></span><br><span class="line">    v2</span><br><span class="line"></span><br><span class="line">commit 9b12418d47c2c1712d0ad6cfa8b0cb770ed0cfb4</span><br><span class="line">Author: LNL &lt;2570358917@qq.com&gt;</span><br><span class="line">Date:   Fri May 5 13:44:07 2023 +0800</span><br><span class="line"></span><br><span class="line">    v1</span><br></pre></td></tr></table></figure>
<p>得到的结果可以得到两个提交版本的id，其中v1版本id为 <code>9b12418d47c2c1712d0ad6cfa8b0cb770ed0cfb4</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过版本id回到v1版本</span></span><br><span class="line">git reset --hard 9b12418d47c2c1712d0ad6cfa8b0cb770ed0cfb4</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">HEAD is now at 9b12418 v1</span><br></pre></td></tr></table></figure>
<p>此时文件的版本已经回到了v1。</p>
<h4 id="场景2-回滚再恢复">场景2 回滚再恢复</h4>
<p>如果已经回滚到了v1,但是此时又因为某些原因发现不用回滚，需要再恢复到v2版本：</p>
<p>此时再执行 <code>git log</code> 会发现只有 v1 的一个版本提交记录。所以需要查询所有历史版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询所有历史提交日志</span></span><br><span class="line">git reflog</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">9b12418 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 9b12418d47c2c1712d0ad6cfa8b0cb770ed0cfb4</span><br><span class="line">f5ca885 HEAD@&#123;1&#125;: commit: v2</span><br><span class="line">9b12418 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit (initial): v1</span><br></pre></td></tr></table></figure>
<p>此时再使用 <code>git reset</code> 回到v2版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复回滚前的版本</span></span><br><span class="line">git reset --hard f5ca885</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">HEAD is now at f5ca885 v2</span><br></pre></td></tr></table></figure>
<p>关于 <code>git reset</code> 命令的详细使用，可以参照菜鸟教程：<a href="https://www.runoob.com/git/git-reset.html">git reset 命令 | 菜鸟教程 (runoob.com)</a></p>
<h4 id="命令小总结">命令小总结</h4>
<p>关于命令的总结，可以参考这篇文章：<a href="https://www.wolai.com/dewjjj/tCYEeiA6Gb5Yyrdm4PN15g">Git命令总结</a></p>
<ol>
<li class="lvl-3">
<p>设置git默认选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;[your email address]&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;[your nickname]&quot;</span> </span><br><span class="line">git config -l</span><br><span class="line"><span class="built_in">history</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>git简单管理文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git status</span><br><span class="line">git add [filename.filetype] <span class="comment"># 添加到缓存区</span></span><br><span class="line">git add .</span><br><span class="line">git commit</span><br><span class="line">git commit -m <span class="string">&quot;[version name]&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>文件与版本相关操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> <span class="comment"># 查看提交日志</span></span><br><span class="line">git reflog <span class="comment"># 查看所有历史提交日志</span></span><br><span class="line">git checkout -- [filename] <span class="comment"># 将文件从修改状态改回未修改状态</span></span><br><span class="line">git reset HEAD [filename] <span class="comment"># 将文件从暂存区返回到工作区</span></span><br><span class="line">git reset --hard [版本<span class="built_in">id</span>] <span class="comment"># 回滚</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="分支开发">分支开发</h3>
<p>主干线：master</p>
<h4 id="场景">场景</h4>
<p>当开发新功能v3过程中时，主分支master原代码v2中有bug需要修复。此时合理方式是再master上开dev分支开发v3，在修复v2时创建新的分支bug，进行修复生成v4，bug并合并到master得到v5，修复完毕后回到dev分支v3继续开发新功能。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 创建新分支 dev</span></span><br><span class="line">git branch dev</span><br><span class="line"><span class="comment"># 切换分支 dev</span></span><br><span class="line">git checkout dev</span><br><span class="line"><span class="comment"># 创建并切换</span></span><br><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure>
<p>添加v3内容后；</p>
<p>创建bug分支，修复bug生成v4版本</p>
<p>将bug分支合并到master</p>
<p>bug分支已无作用，删除bug分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回到master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment"># 合并bug分支</span></span><br><span class="line">git merge bug</span><br><span class="line"><span class="comment"># 删除bug分支</span></span><br><span class="line">git branch -d bug</span><br></pre></td></tr></table></figure>
<p>回到dev分支，开发完v3新功能剩下的部分，变成v5版本</p>
<p>此时如果直接回到master分支直接合并则会产生冲突，因为此时dev分支上的bug还处于未修复状态</p>
<p>冲突会将内容都展示在文件里，需要手动解决冲突。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 合并dev</span></span><br><span class="line">get merge dev</span><br><span class="line"><span class="comment"># 产生冲突的结果</span></span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> 123.txt</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 手动修复冲突前：</span><br><span class="line"></span><br><span class="line">v1</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">v2  v4--修复了bug(与v3不冲突)</span><br><span class="line">=======</span><br><span class="line">v2</span><br><span class="line"></span><br><span class="line">v3 dev modify finished</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev</span><br><span class="line"></span><br><span class="line">## 手动修复冲突后：</span><br><span class="line"></span><br><span class="line">v1</span><br><span class="line">v2  v4--修复了bug(与v3不冲突)</span><br><span class="line"></span><br><span class="line">v3 dev modify finished</span><br></pre></td></tr></table></figure>
<p>修复后master分支的状态为 <code>master|MERGING</code></p>
<p>此时直接 add 和 commit 即可。</p>
<h4 id="命令小总结-2">命令小总结</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看[创建]分支</span></span><br><span class="line">git branch [新分支名]</span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout 分支名</span><br><span class="line"><span class="comment"># 分支合并 （可能产生冲突）</span></span><br><span class="line">git merge 要合并的分支 <span class="comment">#注意要切换分支再合并，当前在哪个分支，哪个分支就是吸收者</span></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d 分支名称</span><br></pre></td></tr></table></figure>
<h4 id="简单git工作流">简单git工作流</h4>
<p>分支至少有2个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-master-主分支(正式/稳定/线上 版本)</span><br><span class="line">	--dev (开发版本 代码开发在此分支)</span><br></pre></td></tr></table></figure>
<h3 id="GitHub代码托管">GitHub代码托管</h3>
<h4 id="代码托管到github">代码托管到github</h4>
<blockquote>
<p>gitlab工具可以自搭建git代码托管平台</p>
</blockquote>
<p>首先注册github账号，在Repository创建一个自己的仓库 <code>GitLearn</code> 来进行测试。</p>
<p>本地添加该仓库并推送</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/vimianma/GitLearn.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p>初次可能会需要输入github的账号密码，在一些情况下如关闭了SSL的时候还会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/vimianma/GitLearn.git/&#x27;: OpenSSL SSL_read: Connection was reset, errno 10054</span><br></pre></td></tr></table></figure>
<p>本人由于配置了Gitee和GitHub两个代码库，但当初注册时两端用户名等都不一样，两边都要配置ssh，这里记录一下解决过程：<p id="sshLogin">SSH免密登录实现方式</p></p>
<ol>
<li class="lvl-3">
<p>生成gitee和github的公钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成gitee公钥</span></span><br><span class="line">ssh-keygen -t ed25519 -f ~/.ssh/id_rsa_gitee -C “123456@qq.com”</span><br><span class="line"><span class="comment"># 生成github公钥</span></span><br><span class="line">ssh-keygen -t ed25519 -f ~/.ssh/id_rsa_github -C “654321@qq.com”</span><br></pre></td></tr></table></figure>
<p>采用无密码方式，要求输入密码时直接回车即可</p>
</li>
<li class="lvl-3">
<p>在 <code>C:/用户/用户名/.ssh</code> 下找到 <code>id_rsa_gitee.pub</code> 和 <code>id_rsa_github.pub</code> ,将里面的值复制到对应平台的SSH公钥设置处。名称可以随意起。</p>
</li>
<li class="lvl-3">
<p>本地配置公钥对</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在本地创建config</span></span><br><span class="line"><span class="built_in">touch</span> ~/.ssh/config</span><br></pre></td></tr></table></figure>
<p>在config中输入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Default gitHub user Self</span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User [Username]</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line"></span><br><span class="line"># gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">    Port 22</span><br><span class="line">    HostName gitee.com</span><br><span class="line">    User [Username]</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_gitee</span><br></pre></td></tr></table></figure>
<p>测试是否成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>显示 <code>Hi xxx! You've successfully authenticated,...</code> 即代表成功</p>
</li>
</ol>
<p>好了回到正题，这是我们将master分支推送到了远程仓库，但没有其他分支，需要将其他分支也推送进去。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin dev</span><br></pre></td></tr></table></figure>
<h4 id="代码clone到本地两-多-地开发">代码clone到本地两(多)地开发</h4>
<p>在另外一个目录 home 中，我们将远程仓库clone下来。这里我们将最初的库简称为cloud。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vimianma/GitLearn.git</span><br><span class="line"><span class="comment"># clone下来的内部已实现 git remote add origin 远程仓库地址</span></span><br></pre></td></tr></table></figure>
<p>可以发现clone下来的代码用 <code>git branch</code> 命令只能看到master分支，但我们仍然可以直接 <code> git checkout dev</code> 直接切换到dev分支。</p>
<p>此时我们应该在dev分支上做开发。但是需要使dev分支和master分支保持最新的一致。而我们之前的例子中dev分支缺少master分支中的部分内容，所以此时可以将master分支合并到dev分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch dev</span><br><span class="line">git merge master</span><br></pre></td></tr></table></figure>
<p>在home中进行新的开发后提交到dev分支，并push到远程的dev分支上。</p>
<p>再打开cloud时，dev中没有home开发的新代码，需要使用pull更新一下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cloud 库</span></span><br><span class="line">git branch dev</span><br><span class="line">git pull origin dev</span><br></pre></td></tr></table></figure>
<p>这样以后，在cloud开发的新代码，在home中也可以通过同样的方式进行同步。</p>
<p>开发完毕要上线后cloud：</p>
<p>​	回到 master 分支，合并dev，push。将dev也push一下。</p>
<p>这时home也需要pull一下master。</p>
<h4 id="冲突情景">冲突情景</h4>
<p>当cloud的修改未提交到github，home又做了新的更改并提交到了github。回到cloud进行开发时，需要拉取github的更新，并需要合并cloud的更改，这可能会产生冲突。</p>
<p>在cloud执行 <code>git pull origin dev</code> 产生冲突后，按之前提到的方式手动解决冲突。</p>
<p>继续进行开发后推送即可。</p>
<div class="note warning simple"><p><code>git pull origin dev</code> 相当于 <code>git fetch origin dev</code> 与 <code>git merge origin/dev</code> 两个命令的集合</p>
</div>
<h4 id="使提交记录简洁——git-rebase-变基">使提交记录简洁——git rebase (变基)</h4>
<p><strong>场景1：使多个提交记录整合为一个提交记录</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式1 使用版本号 表示指定版本号直到目前的提交合并为一个</span></span><br><span class="line">git rebase -i [版本号]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2 指定数量 从当前开始找最近的n条记录合并</span></span><br><span class="line">git rebase -i HEAD~n</span><br></pre></td></tr></table></figure>
<p>执行后会出现vim</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pick id1 comment1</span><br><span class="line">pick id2 comment2</span><br><span class="line">pick id3 comment3</span><br></pre></td></tr></table></figure>
<p>此时按 <code>i</code> ，然后将其改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pick id1 comment1</span><br><span class="line">s id2 comment2</span><br><span class="line">s id3 comment3</span><br></pre></td></tr></table></figure>
<p>s意为合并到上一个版本，因此下面两个将合并到id1。</p>
<p>保存之后会出现另一个vim，意为整合后的提交comment</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># This is a combination of 3 commits.</span><br><span class="line"># This is the 1st commit message:</span><br><span class="line"></span><br><span class="line">v2</span><br><span class="line"></span><br><span class="line"># This is the commit message #2:</span><br><span class="line"></span><br><span class="line">v3</span><br><span class="line"></span><br><span class="line"># This is the commit message #3:</span><br><span class="line"></span><br><span class="line">v4</span><br></pre></td></tr></table></figure>
<p>这部分可自行编辑。</p>
<p>保存后，提交记录将会整合在一起。</p>
<div class="note warning simple"><p>合并记录时，最好合并已push到github的记录。这样会产生很多不必要的麻烦，而且会使提交记录混乱。</p>
</div>
<p><strong>场景2：使分支的提交记录合并插入到主干分支的提交记录成为其一部分</strong></p>
<p>当dev更改提交后，切换到master进行更改提交，此时两个分支不一致。</p>
<p>可以使用 <code>git merge</code> 将dev合并到master，但运行 <code>git log --graph</code> 可以通过图示发现dev的那次提交仍在dev的分支上而不是master的分支。</p>
<p>另：<code>git log --graph --pretty=format:&quot;%h %s&quot;</code> 能够美化优雅地展示提交日志。</p>
<p>使用git rebase使分支的提交记录合并插入到主干分支的提交记录成为其一部分：</p>
<p>切回dev分支，执行rebase命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase master</span><br></pre></td></tr></table></figure>
<p>再切回master分支，merge dev</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br></pre></td></tr></table></figure>
<p>此时再查看 <code>git log --graph</code> 可以看到master的提交记录不再有分支，dev的提交记录作为一部分插入了master分支。</p>
<p><strong>场景3：pull冲突问题解决</strong></p>
<p>之前当github上代码与本地有冲突时，执行git pull 会产生冲突，分叉。</p>
<p>此时，先执行 <code>git fetch origin dev</code> 将代码拉到本地，然后执行 <code>git rebase origin/dev</code></p>
<p>这样就不会产生分叉。</p>
<div class="note warning simple"><p>执行 rebase 产生冲突时，会进行提示，需要先解决冲突</p>
<p>完毕后可根据提示进行操作<code>git add</code></p>
<p>然后执行 <code>git rebase --continue</code> 继续</p>
</div>
<h4 id="beyond-compare-快速解决冲突">beyond compare 快速解决冲突</h4>
<ol>
<li class="lvl-3">
<p>安装软件</p>
<p>下载beyond compare软件，这个软件是收费的，可以下载绿色版或者其他类似功能的软件。</p>
</li>
<li class="lvl-3">
<p>再git中添加配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --local 只对本次项目有效 --global 全局有效</span></span><br><span class="line">git config --<span class="built_in">local</span> merge.tool bc</span><br><span class="line">git config --<span class="built_in">local</span> mergetool.path <span class="string">&#x27;[软件安装路径]&#x27;</span></span><br><span class="line">git config --global mergetool.bc.cmd <span class="string">&quot;\&quot;[软件安装路径]\&quot; \&quot;\$LOCAL\&quot; \&quot;\$REMOTE\&quot; \&quot;\$BASE\&quot; \&quot;\$MERGED\&quot;&quot;</span></span><br><span class="line"><span class="comment"># 不保留原文件</span></span><br><span class="line">git config --<span class="built_in">local</span> mergetool.keepBackup <span class="literal">false</span> </span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>应用beyond compare解决冲突</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git mergetool</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>在弹出的界面上解决冲突。</p>
</li>
</ol>
<h4 id="命令总结">命令总结</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>添加远程连接（别名）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin 地址</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>推送代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin dev</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>下载代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 地址</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>拉取代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin dev</span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line">git fetch origin dev</span><br><span class="line">git merge origin/dev</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>保持代码提交整洁（变基）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase 分支</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>记录图形显示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --pretty=format:<span class="string">&quot;%h %s&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="git多人协作">git多人协作</h2>
<p>以上操作基本上都是单人在多地使用git做版本控制，但多人协作并非仅仅如此。</p>
<h3 id="多人协作开发工作流（git-flow）">多人协作开发工作流（git flow）</h3>
<ol>
<li class="lvl-3">
<p>dev分支从master分支分出一个开发分支，假设A、B加入协作开发，则各自需要开一个分支，从dev分支拆出A、B分支。</p>
</li>
<li class="lvl-3">
<p>假如A分支开发完毕，需要合并到dev分支，需要进行代码Review，控制是否进行合并。</p>
</li>
<li class="lvl-3">
<p>当多个dev都开发完毕后，再建一个release分支进行测试，完善文档，修改bug等。</p>
</li>
<li class="lvl-3">
<p>测试完毕后才能上线。release分支做的更改要合并到dev分支，使其同步。</p>
</li>
<li class="lvl-3">
<p>此时A、B分支已经无用，可以删除。</p>
</li>
</ol>
<blockquote>
<p>非正规流程可能会忽略release和代码review</p>
</blockquote>
<h3 id="多人协同开发功能">多人协同开发功能</h3>
<h4 id="模拟多人协作场景">模拟多人协作场景</h4>
<p>首先创建项目目录 <code>nultiPerson\dbhot</code> ,执行下列命令搭建环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化git</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 创建app文件</span></span><br><span class="line"><span class="built_in">touch</span> app.py</span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;初始化&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后创建项目：</p>
<p>方式一是在github创建项目仓库，然后再settings的collaborators邀请他人加入。</p>
<p>方式二是先创建一个组织，然后在组织里创建项目仓库。（创建组织仓库有利于多项目统一管理）</p>
<p>创建完毕后，添加远程仓库并进行推送。</p>
<h4 id="版本标签命名">版本标签命名</h4>
<p>由于版本名称太长，需要使用tag自定义版本名称。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -a 轻量标签</span></span><br><span class="line">git tag -a v1 -m <span class="string">&quot;第一版&quot;</span></span><br><span class="line"><span class="comment"># 将标签推送到github</span></span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>
<blockquote>
<p>该命令更多详细可见 <a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE">Git - 打标签 (git-scm.com)</a></p>
</blockquote>
<p>版本命名提交到github后，可以在tags下看到，并且release也会生成对应的版本发布，可以进行下载。</p>
<h4 id="邀请成员">邀请成员</h4>
<p>先创建一个dev分支 <code>git checkout -b dev</code> 、<code>git push origin dev</code></p>
<p>将成员注册的账号邀请进github的组织。</p>
<p>在组织的settings – member privileges对成员的基本权限进行控制（对所有项目起效）</p>
<p>在项目的settings – Collaborators and teams 可以针对当前项目邀请成员并对成员的权限进行管理</p>
<h4 id="成员模拟">成员模拟</h4>
<p>在本地创建 <code>brother</code> 目录，运行 <code>git clone xxx</code> 将组织里项目的代码拉带本地。</p>
<p>切换到dev分支(要从dev分支拆出分支)，创建自己的新分支（加入以功能命名为ddz）</p>
<p>brother开发ddz功能并push到github的ddz分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里记一个突发情况：</span><br><span class="line">由于github一直被墙，使用梯子也会时断时连，因此参考网上的方法配置了代理：</span><br><span class="line">git config --global http.proxy=&quot;127.0.0.1:xxxx&quot;</span><br><span class="line">git config --global https.proxy=&quot;127.0.0.1:xxxx&quot;</span><br><span class="line">之后发现仍然没什么效果，遂取消代理</span><br><span class="line">git config --global unset http.proxy</span><br><span class="line">git config --global unset https.proxy</span><br><span class="line">但是之后再执行git push 一直报错端口 xxxx connect refused</span><br><span class="line">经过蛮久的debug发现原来是之前配置代理，不知道是复制粘贴错误还是其他什么原因，配置变成了 http.https://github.com.proxy，因此怎么取消都没取消掉这一条，而且它竟然还起作用了！</span><br><span class="line">使用 git config --list | grep proxy 查到的</span><br><span class="line">取消那个错误前缀后，恢复正常。</span><br></pre></td></tr></table></figure>
<h4 id="代码review">代码review</h4>
<p>使用github的 <code>pull request</code> 实现。</p>
<p>首先这需要在github配置项目。来到项目<code>settings</code>-<code>Branches</code>-<code>Add branch protection rule</code> 在这里输入分支名称，勾选 <code>Require a pull request before merging</code> ，可以设定需要多少人review (这里选择1)，一般dev分支和master分支都需要这样进行。</p>
<p>然后由brother登录账号，来到仓库的 <code>Pull Request</code> 提交一个 pull request ，请求将自己之前开发的ddz功能分支合并到dev分支。</p>
<p><a href="https://z4a.net/image/VmYUlk"><img src="https://z4a.net/images/2023/05/06/pullrequest.md.png" alt="github提交Pull Request 示例图"></a></p>
<p>此时库管理员可以看到一个pull request，点开后切换到<code>files changed</code>可以展开对其进行review。</p>
<p>review完成后，回来 <code>conversation</code>  点击 <code>merge pull request</code> 然后 confirm ，即可完成合并。</p>
<p>已经closed 的pull request 会提示 <code>Pull request successfully merged and closed</code> 并且右侧会有一个按钮 <code>delete branch</code> 即分支已经合并，可以删除。</p>
<p>合并后，管理员本地可以通过 <code>git pull origin dev</code> 同步拉取更新本地代码。</p>
<h4 id="测试预发布">测试预发布</h4>
<p>由管理员创建 <code>release</code> 分支，并提交到github，此时测试人员可以拉取并进行测试（这里一般不会轻易改代码）。</p>
<p>这里测试或小修改完成后，可再次提交一个 <code>release</code> --&gt; <code>master</code> 的pull request 。在提交 pull request 时可以指定 <code>Reviewer</code> 进行review。合并后，库中master即为发布版本。</p>
<p>此时，在本地可以进行dev合并release、删除release分支、pull master分支，然后给这个master打个tag，表示这是所发行的另一版本v2。</p>
<div class="note warning simple"><p>多人协作pull request合并时也可能会产生冲突，此时像前面那样把冲突解决，然后继续合并即可。</p>
</div>
<h3 id="给开源项目贡献代码">给开源项目贡献代码</h3>
<ol>
<li class="lvl-3">
<p>先fork源代码</p>
<p>即，将他人的源代码拷贝到自己的远程仓库。</p>
</li>
<li class="lvl-3">
<p>在自己仓库修改源代码</p>
<p>本地修改后提交到自己的远程仓库。</p>
</li>
<li class="lvl-3">
<p>给源代码作者提交 修复bug的申请（在自己的仓库 new pull request）</p>
<p>这里选择从自己的master合并到对方的master</p>
</li>
</ol>
<h2 id="git其他拓展">git其他拓展</h2>
<h3 id="配置">配置</h3>
<p>通过命令行进行配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.项目配置文件 项目/.git/config</span></span><br><span class="line">git config --<span class="built_in">local</span> user.name <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">git config --<span class="built_in">local</span> user.email <span class="string">&#x27;xxxx@xx.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.全局配置文件 </span></span><br><span class="line"><span class="comment"># linux: ~/.gitconfig   windows: C:/用户/[用户名]/.gitconfig</span></span><br><span class="line">git config --global user.name <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">git config --global user.email <span class="string">&#x27;xxxx@xx.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.系统配置文件 一般不会用到</span></span><br><span class="line"><span class="comment"># linux: /etc/.gitconfig  需要root权限</span></span><br><span class="line">git config --system user.name <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">git config --system user.email <span class="string">&#x27;xxxx@xx.com&#x27;</span></span><br></pre></td></tr></table></figure>
<p>应用场景</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户名密码</span></span><br><span class="line">git config --[area] user.name <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">git config --[area] user.email <span class="string">&#x27;xxxx@xx.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置冲突解决软件</span></span><br><span class="line">git config --[area] merge.tool bc</span><br><span class="line">git config --[area] mergetool.path <span class="string">&#x27;[软件安装路径]&#x27;</span></span><br><span class="line">git config --[area] mergetool.bc.cmd <span class="string">&quot;\&quot;[软件安装路径]\&quot; \&quot;\$LOCAL\&quot; \&quot;\$REMOTE\&quot; \&quot;\$BASE\&quot; \&quot;\$MERGED\&quot;&quot;</span></span><br><span class="line">git config --[area] mergetool.keepBackup <span class="literal">false</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加远程地址及别名 这里相当于 --local 配置在了当前项目</span></span><br><span class="line">git remote add origin 地址</span><br></pre></td></tr></table></figure>
<h3 id="免密登录">免密登录</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>URL中体现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原来的地址：https://github.com/LenlOrg/dbhot.git</span><br><span class="line">修改的地址：https://用户名：密码@github.com/LenlOrg/dbhot.git</span><br><span class="line"></span><br><span class="line">git remote add origin 修改的地址 </span><br><span class="line">之后就不用再输入用户名密码</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>SSH实现</p>
<p>该实现方式比较便捷，实现方式在前文中已经提到了：<a href="#sshLogin">SSH方式的免密登录</a></p>
<p>不过使用ssh的地址的方式略有不同：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.生成公钥和私钥（默认在~/.ssh目录下），id_rsa.pub公钥，id_rsa私钥</span><br><span class="line">	ssh-keygen</span><br><span class="line">2.拷贝公钥内容，并设置到github中去。</span><br><span class="line">3.在git本地中配置ssh地址</span><br><span class="line">	git remote add origin git@github.com:LenlOrg/dbhot.git</span><br><span class="line">4.以后使用</span><br><span class="line">	git push origin master</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>git自动管理凭证</p>
<p>首次输入后git会自动进行管理。</p>
</li>
</ul>
<h3 id="gitignore忽略文件">gitignore忽略文件</h3>
<p>能够告诉git在管理时忽略哪个文件。</p>
<p>如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#忽略a.h</span><br><span class="line">a.h</span><br><span class="line"></span><br><span class="line">#忽略以.h结尾的文件</span><br><span class="line">*.h</span><br><span class="line"></span><br><span class="line">#忽略files文件夹下的文件</span><br><span class="line">files/</span><br><span class="line"></span><br><span class="line">#a.h除外，搭配*.h即为除了a.h外以.h结尾的文件都忽略</span><br><span class="line">!a.h</span><br><span class="line"></span><br><span class="line">#排除 .docx\.docy\.docz后缀的</span><br><span class="line">*.doc[x|y|z]</span><br></pre></td></tr></table></figure>
<p>github有**<a href="https://github.com/vimianma/gitignore">gitignore</a>** 仓库专门存放了各类语言的ignore，可供参考。</p>
<h3 id="任务管理相关">任务管理相关</h3>
<h4 id="issues">issues</h4>
<p>对项目相关疑问或讨论，提issues，可以汇总bug，新成员接收项目时有疑问也可在issues进行复盘。</p>
<p>文档以及任务管理</p>
<h4 id="wiki">wiki</h4>
<p>如果没有开启，可到Settings - Features中开启。</p>
<p>可以写对项目的详细介绍，注意事项等等，便于他人了解认识项目。</p>
<p>git的基本学习到此为止，更多的东西还是要实际使用总结经验。</p>
]]></content>
      <categories>
        <category>学习经验</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot与Vue的大文件分片上传与流式下载</title>
    <url>/notes/chunkFile/</url>
    <content><![CDATA[<div class="note info simple"><p>最近需要实现一个往服务器上传文件（上G级别），并能够下载的类似云存储的功能。</p>
<p>这涉及到文件的分片上传与下载，在此记录一下实现过程。</p>
</div>
<h2 id="实现技术">实现技术</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>前端</p>
<p>前端是使用Vue2+Element UI 做的界面实现；</p>
</li>
<li class="lvl-2">
<p>后端</p>
<p>后端是使用SpringBoot 2.7 做的API服务，集成SpringSecurity做了权限控制</p>
</li>
</ul>
<h2 id="文件上传">文件上传</h2>
<h3 id="分析">分析</h3>
<p>在这个系统之前的功能里也有需要进行图片上传的功能，但是图片体积普遍较小，会限制在10MB以内。彼时，我为了方便采用的是将其数据Base64编码成字符串传到后端，后端接收后还原为byte数组，存储即可。由于数据量小，这一方式并未出现任何问题。</p>
<p>但是现在的文件体量来到了GB级别，那必然不可能再编成字符串了。大文件就必然要考虑切片上传，因此整理了一下思路：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>首先，前端获取文件，将其切片，并计算其哈希值准备上传；</p>
</li>
<li class="lvl-2">
<p>前端上传每一片携带当前文件的哈希值，拱后端识别和存储；</p>
</li>
<li class="lvl-2">
<p>后端将切片编序存储在哈希值对应的文件夹里；</p>
</li>
<li class="lvl-2">
<p>前端最后发送一个合并请求，携带业务数据和文件哈希；</p>
</li>
<li class="lvl-2">
<p>后端接收合并请求后返回响应，并开启线程进行异步合并。</p>
</li>
<li class="lvl-2">
<p>其中，上传切片前请求后端判断一次该哈希是否已上传，如果已上传只存储业务信息，将文件路径指向重复的文件即可完成秒传。</p>
</li>
</ul>
<p>这个思路看起来还行，没什么问题，那我们就甩开膀子开干~</p>
<h3 id="前端实现">前端实现</h3>
<p>我准备把这个上传界面做成一个dialog组件，由主界面点开后打开dialog，上传完毕后关闭并刷新主界面的文件列表。实现如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;添加资料&quot;</span> <span class="attr">append-to-body</span> <span class="attr">:before-close</span>=<span class="string">&quot;close&quot;</span> <span class="attr">center</span> <span class="attr">:close-on-click-modal</span>=<span class="string">&quot;false&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:show-close</span>=<span class="string">&quot;!uploading&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;visible&quot;</span> <span class="attr">width</span>=<span class="string">&quot;850px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;resForm&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ResForm&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;180px&quot;</span> <span class="attr">label-position</span>=<span class="string">&quot;right&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:90%&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;资料名称：&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;resForm.name&quot;</span>  <span class="attr">placeholder</span>=<span class="string">&quot;请输入资料名称&quot;</span> <span class="attr">:maxlength</span>=<span class="string">&quot;50&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;uploading&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;资料说明：&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;notes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;resForm.notes&quot;</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入资料说明&quot;</span> <span class="attr">:maxlength</span>=<span class="string">&quot;100&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;uploading&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;上传资料文件：&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-upload</span>  <span class="attr">ref</span>=<span class="string">&quot;upload&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:file-list</span>=<span class="string">&quot;fileList&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:on-remove</span>=<span class="string">&quot;handleRemove&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:on-change</span>=<span class="string">&quot;picChange&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:multiple</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:auto-upload</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">action</span>=<span class="string">&quot;#&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:before-upload</span>=<span class="string">&quot;beforeUpload&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>  &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-document-add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="symbol">&amp;nbsp;</span></span><br><span class="line">                    选择文件</span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;tip&quot;</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__tip&quot;</span>&gt;</span>请上传文件，文件不超过1GB<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:disabled</span>=<span class="string">&quot;fileList.length === 0 || !finishSlice&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:loading</span>=<span class="string">&quot;uploading&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">&quot;margin-top: 16px&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">click</span>=<span class="string">&quot;handleUpload&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-upload&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="symbol">&amp;nbsp;</span></span><br><span class="line">                &#123;&#123; uploading ? &quot;上传中~&quot; : &quot;开始上传&quot; &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-divider</span>&gt;</span><span class="tag">&lt;/<span class="name">el-divider</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progContainer&quot;</span>  <span class="attr">v-if</span>=<span class="string">&quot;showSliceProgress&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">plain</span>&gt;</span>切片进度：<span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span> <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-progress</span> <span class="attr">:percentage</span>=<span class="string">&quot;Math.round(sliceProgress/sliceCount*100)&quot;</span> <span class="attr">:stroke-width</span>=<span class="string">&quot;20&quot;</span> <span class="attr">class</span>=<span class="string">&quot;prog&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">:status</span>=<span class="string">&quot;sliceProgress===sliceCount ? &#x27;success&#x27;:&#x27;warning&#x27;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;showProgress&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">plain</span>&gt;</span>上传进度：<span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span> <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-progress</span> <span class="attr">:percentage</span>=<span class="string">&quot;Math.round(finishCount/sliceCount*100)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;prog&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">:status</span>=<span class="string">&quot;finishCount===sliceCount ? &#x27;success&#x27;:&#x27;warning&#x27;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">SparkMD5</span> <span class="keyword">from</span> <span class="string">&#x27;spark-md5&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;AddResource&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//控制dialog是否可见</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">visible</span>:&#123;<span class="attr">type</span>:<span class="title class_">Boolean</span>,<span class="attr">default</span>:<span class="literal">false</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//刷新主界面的列表</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">flushList</span>:<span class="title class_">Function</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">loading</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">resForm</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">notes</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">rules</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:[&#123;<span class="attr">required</span>:<span class="literal">true</span>,<span class="attr">message</span>:<span class="string">&quot;资料名称不能为空&quot;</span>,<span class="attr">trigger</span>:<span class="string">&#x27;blur&#x27;</span>&#125;],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">notes</span>:[&#123;<span class="attr">required</span>:<span class="literal">true</span>,<span class="attr">message</span>:<span class="string">&quot;资料描述不能为空&quot;</span>,<span class="attr">trigger</span>:<span class="string">&#x27;blur&#x27;</span>&#125;],</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// #region 文件上传变量</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fileList</span>:[],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">uploading</span>:<span class="literal">false</span>,<span class="comment">//是否正在上传</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">finishSlice</span>:<span class="literal">false</span>,<span class="comment">//分片完成情况</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">finishCount</span>:<span class="number">0</span>,<span class="comment">//分片完成数量</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">showProgress</span>:<span class="literal">false</span>,<span class="comment">//展示上传进度条</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sliceCount</span>:<span class="number">0</span>,<span class="comment">//切片数量</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sliceProgress</span>:<span class="number">0</span>,<span class="comment">//切片进度条</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">errorCount</span>:<span class="number">0</span>,<span class="comment">//上传失败数量</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">showSliceProgress</span>:<span class="literal">false</span>,<span class="comment">//展示切片进度条</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fileChunkList</span>:[],<span class="comment">//切片列表</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sendCount</span>:<span class="number">0</span>,<span class="comment">//发送的切片数量,</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fileType</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">filename</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">hash</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// #endregion </span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reset</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ResForm</span>.<span class="title function_">resetFields</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">fileList</span>=[]</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">uploading</span>=<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">finishSlice</span>=<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">finishCount</span>=<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">showProgress</span>=<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">errorCount</span>=<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">showSliceProgress</span>=<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">fileChunkList</span>=[]</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">sendCount</span>=<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">fileType</span>=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">filename</span>=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">hash</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">close</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//关闭前重置变量</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">reset</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//调用关闭</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;changeVisible&#x27;</span>,<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">picChange</span>(<span class="params">file,fileList</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (file.<span class="property">size</span>&gt;<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10240</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> index = fileList.<span class="title function_">indexOf</span>(file);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(index&gt;=<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">                fileList.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">warning</span>(<span class="string">&#x27;文件必须小于10GB！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(fileList.<span class="property">length</span>&gt;<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">                fileList.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">fileList</span> = fileList;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//上传前文件切片</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeUpload</span>(<span class="params">file</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">info</span>(<span class="string">&quot;开始文件切片&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 显示切片进度条</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">showSliceProgress</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 文件添加到文件列表 这里只展示单文件上传</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">fileList</span> = [file];</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 一些参数的初始化</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">fileChunkList</span> = [];</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">finishSlice</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">finishCount</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">sliceProgress</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">showProgress</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">sliceCount</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">errorCount</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 初始化md5工具对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> spark = <span class="keyword">new</span> <span class="title class_">SparkMD5</span>.<span class="title class_">ArrayBuffer</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 用于读取文件计算md5</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 这里是依据.来对文件和类型进行分割</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> fileInfo = file.<span class="property">name</span>.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">filename</span> = fileInfo[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 最后一个.之前的内容都应该认定为文件名称</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (fileInfo.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">filetype</span> = fileInfo[fileInfo.<span class="property">length</span> - <span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; fileInfo.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">filename</span> = <span class="variable language_">this</span>.<span class="property">filename</span> + <span class="string">&quot;.&quot;</span> + fileInfo[i];</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 这里开始做切片</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 设置切片大小 可以根据实际情况设置</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> chunkSize = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 计算出切片数量</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">sliceCount</span> = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(file.<span class="property">size</span> / chunkSize);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> curChunk = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 切片操作的实际方法【定义】</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> <span class="title function_">sliceNext</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 使用slice方法进行文件切片</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> chunkFile = file.<span class="title function_">slice</span>(curChunk, curChunk + chunkSize);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 读取当前切片文件流【这里会触发onload方法】</span></span></span><br><span class="line"><span class="language-javascript">                fileReader.<span class="title function_">readAsArrayBuffer</span>(chunkFile);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 加入切片列表</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">fileChunkList</span>.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 切片文件信息</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">chunk</span>: chunkFile,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 文件名</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">filename</span>: <span class="variable language_">this</span>.<span class="property">filename</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 分片索引 这里直接借助sliceProgress来实现</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">seq</span>: <span class="variable language_">this</span>.<span class="property">sliceProgress</span> + <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 文件类型</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="variable language_">this</span>.<span class="property">filetype</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 状态信息 用于标识是否上传成功</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">status</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 切片完成变量自增</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">sliceProgress</span>++;</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 进入方法需要进行首次切片操作</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">sliceNext</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 读取文件流时会触发onload方法</span></span></span><br><span class="line"><span class="language-javascript">                fileReader.<span class="property">onload</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 将文件流加入计算md5</span></span></span><br><span class="line"><span class="language-javascript">                    spark.<span class="title function_">append</span>(e.<span class="property">target</span>.<span class="property">result</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 修改切片位移</span></span></span><br><span class="line"><span class="language-javascript">                    curChunk += chunkSize;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 说明还没到达最后一个切片 继续切</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sliceProgress</span> &lt; <span class="variable language_">this</span>.<span class="property">sliceCount</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">sliceNext</span>();</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 说明切片完成了</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">finishSlice</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 读取文件hash值</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">hash</span> = spark.<span class="title function_">end</span>();</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;文件分片完成&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 将哈希值作为其中一个属性 写入到分片列表中</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">fileChunkList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">content</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            content.<span class="property">hash</span> = <span class="variable language_">this</span>.<span class="property">hash</span>;</span></span><br><span class="line"><span class="language-javascript">                        &#125;)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//开始执行上传切片逻辑</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">startUpload</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">next</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 递归出口 分片上传完毕</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">finishCount</span> + <span class="variable language_">this</span>.<span class="property">errorCount</span> &gt;= <span class="variable language_">this</span>.<span class="property">sliceCount</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 记录当前遍历位置</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> cur = <span class="variable language_">this</span>.<span class="property">sendCount</span>++;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 说明越界了 直接退出</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (cur &gt;= <span class="variable language_">this</span>.<span class="property">sliceCount</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取分片信息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> content = <span class="variable language_">this</span>.<span class="property">fileChunkList</span>[cur];</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 已经上传过了 直接跳过【可用于断点续传】</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (content.<span class="property">status</span> === <span class="literal">true</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">finishCount</span> + <span class="variable language_">this</span>.<span class="property">errorCount</span> &lt; <span class="variable language_">this</span>.<span class="property">sliceCount</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">next</span>();</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 开始填充上传数据 这里需要使用FormData来存储信息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">            formData.<span class="title function_">append</span>(<span class="string">&quot;file&quot;</span>, content.<span class="property">chunk</span>);</span></span><br><span class="line"><span class="language-javascript">            formData.<span class="title function_">append</span>(<span class="string">&quot;hash&quot;</span>, content.<span class="property">hash</span>);</span></span><br><span class="line"><span class="language-javascript">            formData.<span class="title function_">append</span>(<span class="string">&quot;filename&quot;</span>, content.<span class="property">filename</span>);</span></span><br><span class="line"><span class="language-javascript">            formData.<span class="title function_">append</span>(<span class="string">&quot;seq&quot;</span>, content.<span class="property">seq</span>);</span></span><br><span class="line"><span class="language-javascript">            formData.<span class="title function_">append</span>(<span class="string">&quot;type&quot;</span>, content.<span class="property">type</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 开始上传</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&quot;res/upload&quot;</span>, formData).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 接收回调信息</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> data = res.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (data.<span class="property">success</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 成功计数 并设置分片上传状态</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">finishCount</span> += <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">                content.<span class="property">status</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 失败计数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">errorCount</span> += <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 说明完成最后一个分片上传但上传期间出现错误</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">errorCount</span> !== <span class="number">0</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">errorCount</span> + <span class="variable language_">this</span>.<span class="property">finishCount</span> === <span class="variable language_">this</span>.<span class="property">sliceCount</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;上传发生错误，请重传&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">showProgress</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">uploading</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 说明还有分片未上传 需要继续递归</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">finishCount</span> + <span class="variable language_">this</span>.<span class="property">errorCount</span> &lt; <span class="variable language_">this</span>.<span class="property">sliceCount</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">next</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 说明所有分片上传成功了 发起合并操作</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">finishCount</span> === <span class="variable language_">this</span>.<span class="property">sliceCount</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">merge</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 对于图中发生的错误需要捕获并记录</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">errorCount</span> += <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">errorCount</span> !== <span class="number">0</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">errorCount</span> + <span class="variable language_">this</span>.<span class="property">finishCount</span> === <span class="variable language_">this</span>.<span class="property">sliceCount</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;上传发生错误，请重传&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">showProgress</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">uploading</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 当前分片上传失败不应影响下面的分片</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">finishCount</span> + <span class="variable language_">this</span>.<span class="property">errorCount</span> &lt; <span class="variable language_">this</span>.<span class="property">sliceCount</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">next</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 只允许同时10个任务在等待</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">sendCount</span> &lt; <span class="number">10</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">sendCount</span> &lt; <span class="variable language_">this</span>.<span class="property">sliceCount</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">next</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//文件合并</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="title function_">merge</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;上传完成，等待服务器合并文件中~&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发起合并请求 传入文件hash值、文件类型、文件名 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125;= <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&quot;res/merge&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="variable language_">this</span>.<span class="property">resForm</span>.<span class="property">name</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">notes</span>:<span class="variable language_">this</span>.<span class="property">resForm</span>.<span class="property">notes</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">hash</span>: <span class="variable language_">this</span>.<span class="property">hash</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="variable language_">this</span>.<span class="property">filetype</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">filename</span>: <span class="variable language_">this</span>.<span class="property">filename</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (res.<span class="property">success</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;资料已完成上传！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//初始化参数，关闭上传界面</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">close</span>()</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">flushList</span>()</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">error</span>(<span class="string">&#x27;文件合并失败！上传失败。&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">error</span>(res.<span class="property">msg</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">uploading</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//取消文件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleRemove</span>(<span class="params">file</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> index = <span class="variable language_">this</span>.<span class="property">fileList</span>.<span class="title function_">indexOf</span>(file);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> newFileList = <span class="variable language_">this</span>.<span class="property">fileList</span>.<span class="title function_">slice</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">hash</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            newFileList.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">fileList</span> = newFileList;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 取消之后需要进行相关变量的重新初始化</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">fileChunkList</span> = [];</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">finishSlice</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">finishCount</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">sliceProgress</span>= <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">showProgress</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">showSliceProgress</span>=<span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">sliceCount</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">errorCount</span>= <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//执行上传</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleUpload</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">finishSlice</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">warning</span>(<span class="string">&quot;文件切片中，请稍等~&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//检查参数以及进行询问</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ResForm</span>.<span class="title function_">validate</span>(<span class="keyword">async</span> valid=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(valid)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> confirmresult=<span class="keyword">await</span> <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;将要添加资源文件，请确定是否继续？&#x27;</span>,<span class="string">&#x27;提示&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">confirmButtonText</span>:<span class="string">&#x27;确定&#x27;</span>,<span class="attr">cancelButtonText</span>:<span class="string">&#x27;取消&#x27;</span>,<span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(confirmresult!==<span class="string">&#x27;confirm&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">info</span>(<span class="string">&#x27;操作已取消&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 进度条变更</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">showSliceProgress</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 先检查是否已经上传过</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span>&#123;<span class="attr">data</span>:res&#125;=<span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&quot;res/check&quot;</span>,&#123;<span class="attr">params</span>:&#123;<span class="attr">hash</span>:<span class="variable language_">this</span>.<span class="property">hash</span>&#125;&#125;) </span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(!res.<span class="property">success</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;检查文件失败&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">error</span>(res.<span class="property">msg</span>)</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (res.<span class="property">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">warning</span>(<span class="string">&#x27;文件已存在，开始进行秒传&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// TODO 秒传逻辑</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="title function_">fastUpload</span>()</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 开始上传逻辑 相关变量状态更迭</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">uploading</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 这里主要是服务于断点续传 避免重复上传已成功分块</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">sliceCount</span> -= <span class="variable language_">this</span>.<span class="property">finishCount</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">errorCount</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">finishCount</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">sendCount</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">showProgress</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 调用上面写好的上传逻辑</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="title function_">startUpload</span>();</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//秒传</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="title function_">fastUpload</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">uploading</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125;=<span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;res/fast&#x27;</span>,&#123;<span class="attr">params</span>:&#123;<span class="attr">hash</span>:<span class="variable language_">this</span>.<span class="property">hash</span>,<span class="attr">name</span>:<span class="variable language_">this</span>.<span class="property">resForm</span>.<span class="property">name</span>,<span class="attr">notes</span>:<span class="variable language_">this</span>.<span class="property">resForm</span>.<span class="property">notes</span>&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(res.<span class="property">success</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;秒传已完成~操作成功！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">close</span>()</span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;操作失败&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">error</span>(res.<span class="property">msg</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">uploading</span>=<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.prog</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">450px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.progContainer</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    justify-self: start;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样组件就准备好了，然后在主界面进行调用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--调用组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">add-resource</span> <span class="attr">ref</span>=<span class="string">&quot;AddResource&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">:visible</span>=<span class="string">&quot;addResourceVisible&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">:flushList</span>=<span class="string">&quot;getResourceList&quot;</span></span></span><br><span class="line"><span class="tag">@<span class="attr">changeVisible</span>=<span class="string">&quot;changeAddResourceVisible&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">add-resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">addResourceVisible</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//切换是否可见</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeAddResourceVisible</span>(<span class="params">val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">addResourceVisible</span>=val</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取资源列表</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="title function_">getResourceList</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//...业务逻辑</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="后端实现">后端实现</h3>
<p>请求主要在组件里，需要实现的接口如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>判断哈希是否重复接口</p>
</li>
<li class="lvl-2">
<p>接收切片接口</p>
</li>
<li class="lvl-2">
<p>合并切片接口</p>
</li>
<li class="lvl-2">
<p>秒传接口</p>
</li>
</ul>
<p>首先是判断哈希是否重复：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//controller</span></span><br><span class="line"><span class="comment">//检查哈希重复</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/check&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultMsg&lt;Boolean&gt; <span class="title function_">check</span><span class="params">(String hash)</span>&#123;</span><br><span class="line">    AssertUtil.hasText(hash,<span class="string">&quot;缺少参数&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ResultMsg.success(resourcesService.check(hash));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//service实现</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">check</span><span class="params">(String hash)</span> &#123;</span><br><span class="line">    QueryWrapper&lt;Resources&gt; wrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//我这里是检查未删除的，因为已删除的文件不存在，也就无法秒传</span></span><br><span class="line">    wrapper.eq(<span class="string">&quot;hash&quot;</span>,hash).ne(<span class="string">&quot;state&quot;</span>,Resources.STATE_DELETE);</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">super</span>.count(wrapper);</span><br><span class="line">    <span class="keyword">return</span> count&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后是接收切片：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//controller</span></span><br><span class="line"><span class="comment">//上传分片</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultMsg&lt;Boolean&gt; <span class="title function_">uploadSlice</span><span class="params">(<span class="meta">@RequestParam(value = &quot;file&quot;)</span> MultipartFile file,</span></span><br><span class="line"><span class="params">                                      <span class="meta">@RequestParam(value = &quot;hash&quot;)</span> String hash,</span></span><br><span class="line"><span class="params">                                      <span class="meta">@RequestParam(value = &quot;filename&quot;)</span> String filename,</span></span><br><span class="line"><span class="params">                                      <span class="meta">@RequestParam(value = &quot;seq&quot;)</span> Integer seq,</span></span><br><span class="line"><span class="params">                                      <span class="meta">@RequestParam(value = &quot;type&quot;)</span> String type)</span>&#123;</span><br><span class="line">    resourcesService.uploadSlice(file,hash,filename,seq,type);</span><br><span class="line">    <span class="keyword">return</span> ResultMsg.success(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//service实现</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadSlice</span><span class="params">(MultipartFile file, String hash, String filename, Integer seq, String type)</span> &#123;</span><br><span class="line">    RandomAccessFile raf=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// resourcesPath 是配置的存储文件的总目录</span></span><br><span class="line">        String hashDirPath=resourcesPath+<span class="string">&quot;/&quot;</span>+hash;</span><br><span class="line">        File dir=<span class="keyword">new</span> <span class="title class_">File</span>(hashDirPath);</span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建空文件，名称带seq来标识分块信息</span></span><br><span class="line">        String filePath=hashDirPath+<span class="string">&quot;/&quot;</span>+hash+<span class="string">&quot;_&quot;</span>+seq;</span><br><span class="line">        raf=<span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(filePath,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="comment">//写入文件流</span></span><br><span class="line">        raf.write(file.getBytes());</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        log.error(<span class="string">&quot;接收文件切片失败&quot;</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="number">500</span>,<span class="string">&quot;接收文件切片失败&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!Objects.isNull(raf))</span><br><span class="line">                raf.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>切片传完后的合并接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//controller 这里进行了权限限制和日志记录</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/merge&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;res_manage&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@AutoLog(type = ActionLogType.ADD,field = ActionLogField.RESOURCES,description = &quot;上传资料[基础上传]&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultMsg&lt;Boolean&gt; <span class="title function_">merge</span><span class="params">(<span class="meta">@RequestBody</span> Resources resources, HttpServletResponse response)</span>&#123;</span><br><span class="line">    AssertUtil.isNull(resources,<span class="string">&quot;缺少参数&quot;</span>);</span><br><span class="line">    resourcesService.uploadMerge(resources,response);</span><br><span class="line">    <span class="keyword">return</span> ResultMsg.success(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//service实现</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadMerge</span><span class="params">(Resources resources, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">hash</span> <span class="operator">=</span> resources.getHash();</span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> resources.getFilename();</span><br><span class="line">    <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> resources.getType();</span><br><span class="line">    AssertUtil.hasText(filename,<span class="string">&quot;缺少参数&quot;</span>);</span><br><span class="line">    AssertUtil.hasText(type,<span class="string">&quot;缺少参数&quot;</span>);</span><br><span class="line">    String hashDirPath=resourcesPath+<span class="string">&quot;/&quot;</span>+hash;</span><br><span class="line">    String savePath=StringUtils.hasText(type)?(hashDirPath+<span class="string">&quot;.&quot;</span>+type):hashDirPath;</span><br><span class="line">    File dir=<span class="keyword">new</span> <span class="title class_">File</span>(hashDirPath);</span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="number">500</span>,<span class="string">&quot;合并文件失败，未找到对应的目录！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//先存储资料信息，以免等待超时</span></span><br><span class="line">    resources.setUploader(UserUtils.getUserId());</span><br><span class="line">    resources.setUploadTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    resources.setState(Resources.STATE_NORMAL);</span><br><span class="line">    resources.setType(type);</span><br><span class="line">    <span class="built_in">super</span>.save(resources);</span><br><span class="line">    <span class="comment">//合并逻辑放在线程中</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; doMerge(savePath,hashDirPath,hash,dir)).start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行合并</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doMerge</span><span class="params">(String savePath,String hashDirPath,String hash,File dir)</span>&#123;</span><br><span class="line">    <span class="comment">//通过FileChannel来实现复制信息流</span></span><br><span class="line">    FileChannel out=<span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//获取目标channel</span></span><br><span class="line">    <span class="keyword">try</span>(FileChannel in=<span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(savePath,<span class="string">&quot;rw&quot;</span>).getChannel())&#123;</span><br><span class="line">        <span class="comment">//分片索引递增</span></span><br><span class="line">        <span class="type">int</span> index=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//流开始位置</span></span><br><span class="line">        <span class="type">long</span> start=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">            <span class="comment">//分片文件名</span></span><br><span class="line">            String sliceName=hashDirPath+<span class="string">&quot;/&quot;</span>+hash+<span class="string">&quot;_&quot;</span>+index;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(sliceName);</span><br><span class="line">            <span class="comment">//到达最后分片 退出循环</span></span><br><span class="line">            <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//分片输入流</span></span><br><span class="line">            out=<span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(sliceName,<span class="string">&quot;r&quot;</span>).getChannel();</span><br><span class="line">            <span class="comment">//写入</span></span><br><span class="line">            in.transferFrom(out,start,start+out.size());</span><br><span class="line">            <span class="comment">//位置增加</span></span><br><span class="line">            start+=out.size();</span><br><span class="line">            out.close();</span><br><span class="line">            out=<span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//分片索引添加</span></span><br><span class="line">            index++;</span><br><span class="line">            file.delete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//分片合并完毕</span></span><br><span class="line">        in.close();</span><br><span class="line">        <span class="comment">//删除文件夹</span></span><br><span class="line">        dir.delete();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        log.error(<span class="string">&quot;文件合并失败！&quot;</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="number">500</span>,<span class="string">&quot;文件合并失败！&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (out != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>秒传：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//controller </span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/fast&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;res_manage&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@AutoLog(type = ActionLogType.ADD,field = ActionLogField.RESOURCES,description = &quot;上传资料[秒传]&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultMsg&lt;Boolean&gt; <span class="title function_">fastUpload</span><span class="params">(String hash,String name,String notes)</span>&#123;</span><br><span class="line">    AssertUtil.hasText(hash);</span><br><span class="line">    AssertUtil.hasText(name);</span><br><span class="line">    AssertUtil.hasText(notes);</span><br><span class="line">    resourcesService.fastUpload(hash,name,notes);</span><br><span class="line">    <span class="keyword">return</span> ResultMsg.success(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//service实现</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fastUpload</span><span class="params">(String hash, String name, String notes)</span> &#123;</span><br><span class="line">    <span class="comment">//判断是否已存在</span></span><br><span class="line">    <span class="keyword">if</span>(!check(hash))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="number">500</span>,<span class="string">&quot;秒传失败！库中不存在对应的文件。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    QueryWrapper&lt;Resources&gt; wrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;hash&quot;</span>,hash).ne(<span class="string">&quot;state&quot;</span>,Resources.STATE_DELETE);</span><br><span class="line">    <span class="type">Resources</span> <span class="variable">one</span> <span class="operator">=</span> <span class="built_in">super</span>.getOne(wrapper);</span><br><span class="line">    one.setId(<span class="literal">null</span>);</span><br><span class="line">    one.setName(name);</span><br><span class="line">    one.setNotes(notes);</span><br><span class="line">    one.setUploader(UserUtils.getUserId());</span><br><span class="line">    one.setUploadTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="built_in">super</span>.save(one);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此，文件的切片上传已经完成。文中的一些工具类如AssertUtil断言，AOP日志等省略了，有兴趣可以参考本站的其他博客。</p>
<h2 id="文件下载">文件下载</h2>
<p>文件下载就比上传要轻松一些了。虽然仍然不能直接转Base64字符一股脑扔给前端，但是后端可以通过流式传输，将文件流copy到response里。</p>
<h3 id="前端实现-2">前端实现</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里简略写一些示范代码，仅供参考--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;id&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;name&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;hash&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;hash&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;type&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;type&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span>&gt;</span></span><br><span class="line">    			<span class="tag">&lt;<span class="name">el-template</span>&gt;</span></span><br><span class="line">    				<span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>  @<span class="attr">click</span>=<span class="string">&quot;download(scope.row)&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">   				 <span class="tag">&lt;/<span class="name">el-template</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">list</span>:[]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="title function_">getList</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="title function_">getList</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//...业务代码</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125;=<span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/xx/xx&#x27;</span>,&#123;<span class="attr">params</span>:&#123;xx,xx&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(res.<span class="property">success</span>)</span></span><br><span class="line"><span class="language-javascript">            	<span class="variable language_">this</span>.<span class="property">list</span>=res.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">else</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">error</span>(res.<span class="property">msg</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="title function_">download</span>(<span class="params">row</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> confirmresult =<span class="keyword">await</span> <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;将要下载文件[&#x27;</span>+name+<span class="string">&#x27;]，请确定是否继续？&#x27;</span>,<span class="string">&#x27;提示&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">confirmButtonText</span>:<span class="string">&#x27;确定&#x27;</span>,<span class="attr">cancelButtonText</span>:<span class="string">&#x27;取消&#x27;</span>,<span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>err)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(confirmresult!==<span class="string">&#x27;confirm&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">info</span>(<span class="string">&#x27;已取消下载&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">downloadFile</span>(row.<span class="property">id</span>,row.<span class="property">hash</span>,row.<span class="property">name</span>,row.<span class="property">type</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> downloadFile (id,hash,name,type) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">warning</span>(<span class="string">&#x27;文件[&#x27;</span>+name+<span class="string">&#x27;]下载中，请稍候~&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125;=<span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;res/download&#x27;</span>,&#123;<span class="attr">params</span>:&#123;id,hash&#125;,<span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(!res)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;下载失败&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//文件名，type为后缀，有的文件可能没有后缀名</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> filename=(type==<span class="literal">null</span>||type==<span class="string">&quot;&quot;</span>)?<span class="attr">name</span>:(name+<span class="string">&quot;.&quot;</span>+type)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//构造a标签 通过a标签来下载</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(<span class="keyword">new</span> <span class="title class_">Blob</span>([res]))</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                a.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                a.<span class="property">href</span> = url</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//此处的download是a标签的内容，固定写法，不是后台api接口</span></span></span><br><span class="line"><span class="language-javascript">                a.<span class="title function_">setAttribute</span>(<span class="string">&#x27;download&#x27;</span>,filename)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//点击下载</span></span></span><br><span class="line"><span class="language-javascript">                a.<span class="title function_">click</span>()</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 下载完成移除元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(a);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 释放掉blob对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;下载完成~&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="后端实现-2">后端实现</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下载文件</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;res_manage&#x27;,&#x27;res_download&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@AutoLog(type = ActionLogType.OTHER,field = ActionLogField.RESOURCES,description = &quot;下载资料&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span>Integer id,<span class="meta">@RequestParam(&quot;hash&quot;)</span>String hash)</span> &#123;</span><br><span class="line">    AssertUtil.isNull(id);</span><br><span class="line">    AssertUtil.hasText(hash);</span><br><span class="line">    <span class="type">ServletRequestAttributes</span> <span class="variable">servletRequestAttributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">    HttpServletResponse response=servletRequestAttributes.getResponse();</span><br><span class="line">    <span class="comment">//获取要下载的资源对象，这里是查数据库，可自行根据需要做自己的实现</span></span><br><span class="line">    <span class="type">Resources</span> <span class="variable">resources</span> <span class="operator">=</span> resourcesService.getSaveResource(id,hash);</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">fileRes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>( resources.getSavePath());</span><br><span class="line">        response.reset();</span><br><span class="line">        response.addHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);<span class="comment">//设置响应头</span></span><br><span class="line">        response.addHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;GET, POST, PUT, DELETE&quot;</span>);</span><br><span class="line">        response.addHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/x-download;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//文件名</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(resources.getFilename().getBytes(StandardCharsets.UTF_8), <span class="string">&quot;ISO-8859-1&quot;</span>));</span><br><span class="line">        os = response.getOutputStream();</span><br><span class="line">        fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileRes);</span><br><span class="line">        bufferedInputStream = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="comment">// 复制</span></span><br><span class="line">        IOUtils.copy(bufferedInputStream, os);<span class="comment">//通过IOUtils的copy函数直接将输入文件流的内容复制到输出文件流内</span></span><br><span class="line">        os.flush();</span><br><span class="line">        response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        response.setStatus(HttpServletResponse.SC_EXPECTATION_FAILED);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(bufferedInputStream != <span class="literal">null</span>)</span><br><span class="line">                bufferedInputStream.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;bufferedInputStream关闭异常&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(fileInputStream != <span class="literal">null</span>)</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;fileInputStream关闭异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(os != <span class="literal">null</span>)</span><br><span class="line">                os.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;os关闭异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样文件的流式下载也完成啦。</p>
]]></content>
      <categories>
        <category>编程随记</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>SpringBoot</tag>
        <tag>分片上传</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker备忘笔记</title>
    <url>/notes/dockerNotes/</url>
    <content><![CDATA[<div class="note info simple"><p>记录一下在Linux(CentOS7)上使用Docker容器的注意事项以及部署相关应用环境的记录。以便于下次使用时作为参考和备忘。</p>
</div>
<h2 id="Docker安装">Docker安装</h2>
<h3 id="卸载已安装的docker">卸载已安装的docker</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker\</span><br><span class="line">	docker-client\</span><br><span class="line">	docker-client-latest\</span><br><span class="line">	docker-common\</span><br><span class="line">	docker-latest\</span><br><span class="line">	docker-latest-logrotate\</span><br><span class="line">	docker-logrotate\</span><br><span class="line">	docker-engine</span><br></pre></td></tr></table></figure>
<h3 id="Linux工具安装">Linux工具安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<h3 id="docker安装">docker安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>
<h3 id="启动docker">启动docker</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>
<h3 id="测试docker">测试docker</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker -v</span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>
<h3 id="docker镜像加速">docker镜像加速</h3>
<p>阿里云登录后搜索 <code>容器镜像服务</code> - <code>镜像工具</code> - <code>镜像加速器</code> ，按下面 <code>centos</code> 的配置文档操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://ss4awp7v.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h3 id="运行gitlab容器体验">运行gitlab容器体验</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080 --hostname gitlab.example.com twang2218/gitlab-ce-zh:11.1</span><br></pre></td></tr></table></figure>
<p>完成后访问对应ip即可。</p>
<h3 id="docker帮助文档">docker帮助文档</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<p>若查看具体命令的详细选项，就加上这个命令，如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<h2 id="容器和镜像">容器和镜像</h2>
<h3 id="镜像">镜像</h3>
<h4 id="搜索镜像">搜索镜像</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search xxx</span><br></pre></td></tr></table></figure>
<p>更好的是访问 <code>docker-hub</code> 在网页查询。</p>
<h4 id="下载镜像">下载镜像</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull [镜像仓库地址/]镜像名[:标签]</span><br></pre></td></tr></table></figure>
<p>镜像仓库地址和标签可选。</p>
<p>若无镜像地址，则会从默认镜像仓库中下载镜像。</p>
<p>若无标签，默认下载的是latest版本。</p>
<p>如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载mysql镜像latest版本</span></span><br><span class="line">docker pull mysql:latest</span><br><span class="line"><span class="comment"># 下载nginx镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"><span class="comment"># 下载mysql镜像5.7标签的镜像</span></span><br><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>
<h4 id="列出镜像信息">列出镜像信息</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images [选项]</span><br></pre></td></tr></table></figure>
<p>探索：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images --<span class="built_in">help</span> <span class="comment"># 查看选项</span></span><br><span class="line"><span class="comment"># 列出镜像的镜像id</span></span><br><span class="line">docker images -q</span><br><span class="line"><span class="comment"># 所有的镜像名为“mysql” 的镜像id</span></span><br><span class="line">docker images --f=reference=<span class="string">&#x27;mysql&#x27;</span> -q</span><br></pre></td></tr></table></figure>
<h4 id="删除镜像">删除镜像</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像<span class="built_in">id</span></span><br></pre></td></tr></table></figure>
<h3 id="Docker操作常规流程">Docker操作常规流程</h3>
<h4 id="列出容器信息">列出容器信息</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps [选项]</span><br></pre></td></tr></table></figure>
<p>列出所有容器，无论是否运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
<p>列出所有退出状态的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -f=status=exited</span><br></pre></td></tr></table></figure>
<p>列出所有退出状态容器的id</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -f=status=exited -q </span><br></pre></td></tr></table></figure>
<p>容器继续运行的条件：</p>
<p>docker容器运行必须有一个前台进程，如果没有则会被认为容器空闲，自行退出。</p>
<h4 id="创建并运行容器">创建并运行容器</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure>
<p>其中:</p>
<p>OPTIONS：选项，需要重点关注-d,-p,-v,-e,–restart 。</p>
<p>IMAGE：镜像信息，推荐使用镜像名:TAG的写法</p>
<p>COMMAND：创建容器后要执行的命令</p>
<p>ARG…：COMMAND命令的参数</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run nginx:latest</span><br><span class="line">docker run nginx:latest <span class="built_in">ls</span></span><br><span class="line">docker run nginx:latest <span class="built_in">ls</span> -a</span><br><span class="line">docker run -d nginx:latest <span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure>
<h5 id="运行方式">运行方式</h5>
<ol>
<li class="lvl-3">
<p>后台运行</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d nginx:latest</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>交互式运行</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it nginx:latest bash</span><br><span class="line"><span class="comment"># -i 以交互模式运行容器，通常与-t同时使用</span></span><br><span class="line"><span class="comment"># -t 启动容器后，为容器分配一个命令行，通常与-i同时使用</span></span><br><span class="line"><span class="comment"># exit 退出</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>默认运行方式</p>
</li>
</ol>
<h4 id="删除容器">删除容器</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> [选项] [容器<span class="built_in">id</span>或容器名...]</span><br><span class="line"><span class="comment"># 如</span></span><br><span class="line">docker <span class="built_in">rm</span> 045e3d43893d</span><br><span class="line"><span class="comment"># 多个容器用空格隔开</span></span><br></pre></td></tr></table></figure>
<p>运行中的容器不能直接删除，但是可以强制删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f 045e3d43893d</span><br></pre></td></tr></table></figure>
<p>删除所有容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前置知识：</span><br><span class="line">$()命令替换可以将()中的命令输出结果作为字符串使用，如</span><br><span class="line">ls $(pwd)  =  ls /root</span><br></pre></td></tr></table></figure>
<p>所以用命令拿到所有镜像id后替换命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -a -q)</span><br></pre></td></tr></table></figure>
<p>删除所有非运行状态的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> $(docker ps -f=status=exited -q)</span><br></pre></td></tr></table></figure>
<h4 id="进入容器执行命令">进入容器执行命令</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> [选项] 容器ID或容器名 命令 [参数...]</span><br></pre></td></tr></table></figure>
<p>以交互式方式进入容器内部进行命令执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器ID bash</span><br></pre></td></tr></table></figure>
<p>然后测试nginx是否启动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://127.0.0.1</span><br></pre></td></tr></table></figure>
<p>退出容器运行 <code>exit</code> 即可。</p>
<h4 id="查看容器日志">查看容器日志</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs [选项] 容器ID或容器名</span><br></pre></td></tr></table></figure>
<p>但是日志若需要一些特殊的查看方式，则需要加一些选项。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 持续显示日志</span></span><br><span class="line">docker logs -f 容器ID或容器名</span><br><span class="line"><span class="comment"># 查看最新的n条</span></span><br><span class="line">docker logs -n n 容器ID或容器名</span><br></pre></td></tr></table></figure>
<h4 id="容器文件拷贝">容器文件拷贝</h4>
<p>使用docker cp命令实现容器和宿主机之间文件和目录的相互拷贝。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将容器中文件拷贝到宿主机</span></span><br><span class="line">docker <span class="built_in">cp</span> [OPTIONS] CONTAINER:SRC_PATH DEST_PATH</span><br><span class="line"><span class="comment"># 把宿主机文件拷贝到容器中</span></span><br><span class="line">docker <span class="built_in">cp</span> [OPTIONS] SRC_PATH CONTAINER:DEST_PATH</span><br></pre></td></tr></table></figure>
<h4 id="停止与运行容器">停止与运行容器</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">docker stop 容器ID或容器名...</span><br><span class="line"><span class="comment"># 启动已停止容器</span></span><br><span class="line">docker start 容器ID或容器名</span><br></pre></td></tr></table></figure>
<h3 id="run命令详解">run命令详解</h3>
<h4 id="常用选项">常用选项</h4>
<h5 id="p-端口映射">-p 端口映射</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 宿主机端口:容器端口 镜像名 <span class="comment"># 发布一个端口</span></span><br><span class="line">docker run -p 宿主机端口1:容器端口1 -p 宿主机端口2:容器端口2 镜像名 <span class="comment"># 发布多个端口</span></span><br></pre></td></tr></table></figure>
<p>怎么知道映射哪些端口？ docker hub介绍或者docker file (如EXPOSE 80)</p>
<h5 id="v-数据卷">-v 数据卷</h5>
<p>实现容器和宿主机之间数据的同步（容器中文件的从持久化或宿主机与容器之间文件的数据共享）。</p>
<p>概念：将宿主机目录或文件挂在到容器中，实现主机和容器之间的数据共享和持久化。</p>
<p>用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -v 宿主机目录:容器目录[:读写权限] 镜像名</span><br><span class="line"><span class="comment"># 读写权限为 ro 或 rw，默认是 rw </span></span><br></pre></td></tr></table></figure>
<p>如何知道哪些位置需要挂在数据卷：docker hub介绍或者docker file(VOLUME xxx)</p>
<p>如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 -v /home/cache:/usr/share/nginx/html nginx:latest</span><br></pre></td></tr></table></figure>
<h5 id="e设置环境变量">-e设置环境变量</h5>
<p>用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -e 变量名=变量值 镜像名</span><br></pre></td></tr></table></figure>
<p>需要设置的变量依然是看DockerHub的介绍或docker file(如MYSQL_ROOT_PASSWORD)</p>
<p>练习：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">后台运行一个mysql5.7的容器</span><br><span class="line">要求容器中的mysql可以被外部连接</span><br><span class="line">mysql容器中的数据要持久化存储，不能因为容器删除而丢失</span><br><span class="line">mysql中的用户密码设置为lenladmin</span><br></pre></td></tr></table></figure>
<p>命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -v /home/mysql_cache:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=lenladmin mysql:5.7</span><br></pre></td></tr></table></figure>
<h5 id="–name容器命名">–name容器命名</h5>
<p>方便帮助我们更快识别出容器的作用，而不用使用无意义的容器id。</p>
<p>用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name 需要定义的容器名 镜像名</span><br></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name mynginx  -p 80:80 -v /home/cache:/usr/share/nginx/html nginx:latest</span><br></pre></td></tr></table></figure>
<h5 id="–restart重启策略">–restart重启策略</h5>
<p>宿主机重启时自动重启容器</p>
<p>重启策略如下：</p>
<ol>
<li class="lvl-3">
<p>no：容器退出时不会自动重启；</p>
</li>
<li class="lvl-3">
<p>always：总是会在退出后重启；</p>
</li>
<li class="lvl-3">
<p>on-failure[:max retries]：容器仅在非正常退出时重启，可以指定最大重试次数；</p>
</li>
<li class="lvl-3">
<p>unless-stopped：容器会在退出后自动重启，除非手动停止了容器。</p>
</li>
</ol>
<p>默认策略为no</p>
<p>如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name mynginx --restart unless-stopped  -p 80:80 -v /home/cache:/usr/share/nginx/html nginx:latest</span><br></pre></td></tr></table></figure>
<h3 id="其他镜像和容器命令">其他镜像和容器命令</h3>
<h4 id="镜像-2">镜像</h4>
<h5 id="查看镜像详细信息">查看镜像详细信息</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker image inspect 镜像ID</span><br></pre></td></tr></table></figure>
<h4 id="容器">容器</h4>
<h5 id="查看容器内进程情况">查看容器内进程情况</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker top CONTAINER[ps OPTIONS]</span><br></pre></td></tr></table></figure>
<h5 id="查看容器详细信息">查看容器详细信息</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect 容器ID或容器名</span><br></pre></td></tr></table></figure>
<h3 id="数据卷高级">数据卷高级</h3>
<h4 id="设置数据卷">设置数据卷</h4>
<h5 id="绝对路径">绝对路径</h5>
<p>同上部分记录的设置方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -v 宿主机目录:容器目录[:读写权限] 镜像名</span><br></pre></td></tr></table></figure>
<h5 id="别名">别名</h5>
<p>可以直接使用数据卷别名作为宿主机的目录使用，如果别名不存在，Docker会自动创建对应的数据卷。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -v 数据卷别名:容器目录[:读写权限] 镜像名</span><br></pre></td></tr></table></figure>
<p>Docker自动创建的数据卷在 <code>/var/lib/docker/volumes/nginxHtml/_data</code></p>
<h4 id="列出所有数据卷">列出所有数据卷</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>
<h4 id="查看数据卷的详细信息">查看数据卷的详细信息</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume inspect 数据卷别名</span><br></pre></td></tr></table></figure>
<h4 id="创建数据卷">创建数据卷</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume create 数据卷名</span><br></pre></td></tr></table></figure>
<p>会自动创建数据卷，位置可用 <code>inspect</code> 进行查询。</p>
<h4 id="删除数据卷">删除数据卷</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">rm</span> 数据卷名</span><br></pre></td></tr></table></figure>
<p>已使用的数据卷无法进行删除，需要停止容器运行再删除。</p>
<h2 id="项目部署案例-基础版本">项目部署案例-基础版本</h2>
<h3 id="环境准备">环境准备</h3>
<h4 id="mysql">mysql</h4>
<p>要求：能用的5.7版本的mysql容器</p>
<p>分析：</p>
<ol>
<li class="lvl-3">
<p>使用的镜像是mysql5.7</p>
</li>
<li class="lvl-3">
<p>后台运行 -d</p>
</li>
<li class="lvl-3">
<p>数据需要持久化存储 -v</p>
</li>
<li class="lvl-3">
<p>开放3306端口 -p</p>
</li>
<li class="lvl-3">
<p>设置root密码 -e (–env)</p>
</li>
<li class="lvl-3">
<p>停止后自动重启 --restart</p>
</li>
<li class="lvl-3">
<p>容器命名为 bqMysql</p>
</li>
</ol>
<p>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-v mysqlData:/var/lib/mysql \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">--restart always \</span><br><span class="line">--name bqMysql \</span><br><span class="line">mysql:8.0.29 \</span><br><span class="line">--lower_case_table_names=1</span><br><span class="line"><span class="comment"># 设置不分区大小写</span></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<p>mysql8.0以上更改了密码加密规则，需要进行更改：</p>
<p>首先使用以下命令进入MySQL的docker容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it bqMysql bash</span><br></pre></td></tr></table></figure>
<p>然后登录MySQL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -proot</span><br></pre></td></tr></table></figure>
<p>然后运行以下SQL即可</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;root&#x27;</span> password expire never;</span><br><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;root&#x27;</span>; <span class="meta"># by后跟的是密码</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>注意配置说明是否在意表名大小写限制。</p>
<h4 id="redis">redis</h4>
<p>要求：能用的7版本的redis容器</p>
<p>分析：</p>
<ol>
<li class="lvl-3">
<p>redis7</p>
</li>
<li class="lvl-3">
<p>后台运行 -d</p>
</li>
<li class="lvl-3">
<p>开启redis的时候开启aof持久化</p>
</li>
<li class="lvl-3">
<p>数据需要持久化存储 -v</p>
</li>
<li class="lvl-3">
<p>开放端口6379 -p</p>
</li>
<li class="lvl-3">
<p>重启策略 --restart</p>
</li>
<li class="lvl-3">
<p>容器命名为bqRedis</p>
</li>
</ol>
<p>前置知识：开启aof持久化 redis-sever --appendonly yes</p>
<p>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-v redisData:/data \</span><br><span class="line">-p 6379:6379 \</span><br><span class="line">--restart always \</span><br><span class="line">--name bqRedis \</span><br><span class="line">redis:7.0 redis-server --appendonly <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
<h3 id="应用部署">应用部署</h3>
<h4 id="后端应用">后端应用</h4>
<p>要求：使用openJDK 1.8.0_111去运行SpringBoot服务，保证服务正常使用。</p>
<p>分析：</p>
<ol>
<li class="lvl-3">
<p>镜像：java: openjdk-8u111</p>
</li>
<li class="lvl-3">
<p>开放端口 -p 9988</p>
</li>
<li class="lvl-3">
<p>后台运行 -d</p>
</li>
<li class="lvl-3">
<p>数据卷同步jar包到容器 -v /usr/wzbq:/usr/wzbq</p>
</li>
<li class="lvl-3">
<p>重启策略 --restart always \</p>
</li>
<li class="lvl-3">
<p>重命名 jdk8111</p>
</li>
<li class="lvl-3">
<p>网络联通 --network</p>
</li>
</ol>
<p>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-d \</span><br><span class="line">-p 9988:9988 \</span><br><span class="line">-v /usr/wzbq:/usr/wzbq \</span><br><span class="line">--restart always \</span><br><span class="line">--name wzbq \</span><br><span class="line">java:openjdk-8u111 java -jar /usr/wzbq/wzbq.jar \</span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line"><span class="string">&quot;--spring.datasource.url=xxxx&quot;</span> \</span><br><span class="line"><span class="string">&quot;--spring.datasource.username=xxx&quot;</span> \</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>重启成功后能够启动服务，但是无法连接mysql与redis，因为配置中连接用的 <code>localhost</code> ，而java的容器中没有mysql，所以会连接失败，需要容器间网络连接。</p>
<p><strong>另外需要注意的是，此时jar包并不会加载外部的配置文件，而是只加载内部的配置文件。</strong></p>
<h4 id="Docker网络">Docker网络</h4>
<p>默认情况下容器间可进行网络通信，但是非手动配置，用起来不方便。</p>
<p>此时可以创建自定义网络来解决这些问题。把需要互相连通的容器加入网络，容器间就能通过容器名代替其ip地址。</p>
<p>创建网络：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create 网络名</span><br></pre></td></tr></table></figure>
<p>列出网络：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>
<p>加入网络：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建容器时加入</span></span><br><span class="line">docker run --network 网络名 镜像名</span><br><span class="line"><span class="comment"># 容器创建后加入</span></span><br><span class="line">docker network connect 网络名 容器名或<span class="built_in">id</span></span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">docker network connect bqNet wzbq</span><br></pre></td></tr></table></figure>
<p>查看网络详情：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network inspect 网络名或<span class="built_in">id</span></span><br></pre></td></tr></table></figure>
<p>删除网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network <span class="built_in">rm</span> 网络名或<span class="built_in">id</span></span><br></pre></td></tr></table></figure>
<h4 id="前端应用">前端应用</h4>
<p>要求：</p>
<p>使用nginx:1.21.5；</p>
<p>开放端口80；-p</p>
<p>数据卷同步静态资源； -v</p>
<p>重启策略 --restart always</p>
<p>后台运行 -d</p>
<p>容器命名为myNginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-d --restart always \</span><br><span class="line">-v /usr/wzbqFront:/usr/share/nginx/html \</span><br><span class="line">--name myNginx \</span><br><span class="line">nginx:1.21.5</span><br></pre></td></tr></table></figure>
<h2 id="DockerFile">DockerFile</h2>
<h3 id="基本语法">基本语法</h3>
<p>不区分大小写，但是习惯大写；</p>
<p>使用FROM指令开头</p>
<p>#开头代表注释</p>
<h3 id="快速入门">快速入门</h3>
<h4 id="构建一个最简单的helloworld">构建一个最简单的helloworld</h4>
<ol>
<li class="lvl-3">
<p>创建文件 HelloWorld</p>
</li>
<li class="lvl-3">
<p>编写指令：</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">CMD [&quot;echo&quot;,&quot;hello, world!&quot;]</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>编译镜像</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t hello:1.0 -f HelloWorld .</span><br></pre></td></tr></table></figure>
<p>其中： -t指定镜像名和标签，-f指定dockerFile文件，.标识在当前目录下查找对应的DockerFile来构建镜像。</p>
<ol start="4">
<li class="lvl-3">
<p>运行容器测试</p>
</li>
</ol>
<p>构建完成后，运行容器即可输出hello world：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run hello:1.0</span><br></pre></td></tr></table></figure>
<h3 id="dockerfile-指令学习">dockerfile 指令学习</h3>
<h4 id="FROM">FROM</h4>
<p>作用：用来定义基础镜像</p>
<p>用法：FROM 镜像名：标签名  如 FROM centos:7</p>
<p>作用时机：构建镜像的时候</p>
<h4 id="CMD">CMD</h4>
<p>作用：用来定义容器运行时的默认命令。可以使用docker run的时候覆盖掉CMD中定义的命令。</p>
<p>作用时机：运行容器的时候。</p>
<p>用法：CMD [“命令1”,“参数1”,“参数2”] 如 CMD [“echo”,“hello, world!”] 或 CMD echo $HOME</p>
<p>探索： 在一个DockerFile中写多个CMD，运行效果只会运行最后一个。</p>
<h4 id="ENV">ENV</h4>
<p>需求：基于HelloWorld案例 改造，要求打印内容可以通过环境变量去指定（-e）</p>
<p>用法：ENV 变量名=“变量值”，如ENV DIR=“/root”</p>
<p>作用时机：构建镜像时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">ENV CONTENT=&quot;hello,world!&quot;</span><br><span class="line">CMD echo $CONTENT</span><br><span class="line"># 或 CMD [&quot;sh&quot;,&quot;-c&quot;,&quot;echo $CONTENT&quot;]</span><br></pre></td></tr></table></figure>
<p>构建后运行容器时：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -e CONTENT=testModifyEnv --name hello hello:2.0</span><br></pre></td></tr></table></figure>
<p>容器运行后便会输出 “testModifyEnv”</p>
<h4 id="WORKDIR">WORKDIR</h4>
<p>作用：用于设置当前工作的目录，如果该目录不存在会自动创建（包括父目录）。</p>
<p>用法：WORKDIR 目录 如 WORKDIR /app/sg</p>
<p>作用时机：构建镜像时</p>
<h5 id="需求">需求</h5>
<p>定义一个CONTENT变量，默认值为hellodocker，在镜像的/app目录下创建一个sg目录，在其冲创建一个content.txt文件，文件的内容为CONTENT变量的值。容器启动时打印context.txt的内容。</p>
<h5 id="分析">分析</h5>
<p>在linux中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CONTENT=hellodocker</span><br><span class="line"><span class="built_in">mkdir</span> /app</span><br><span class="line"><span class="built_in">cd</span> /app</span><br><span class="line"><span class="built_in">mkdir</span> sg</span><br><span class="line"><span class="built_in">cd</span> sg</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$CONTENT</span> &gt; content.text</span><br><span class="line"><span class="built_in">cat</span> content.txt</span><br></pre></td></tr></table></figure>
<p>转换为dockerfile:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">ENV CONTENT=&quot;hellodocker&quot;</span><br><span class="line">WORKDIR /app/sg</span><br><span class="line">CMD [&quot;cat&quot;,&quot;content.txt&quot;]</span><br></pre></td></tr></table></figure>
<p>WORKDIR后可以直接引用变量来创建文件夹</p>
<h4 id="RUN">RUN</h4>
<p>作用：用来定义构建过程中要执行的命令</p>
<p>用法：RUN 命令；例如 RUN echo sg</p>
<p>作用时机：构建镜像时</p>
<p>完成上述需求：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">ENV CONTENT=&quot;hello,docker!&quot;</span><br><span class="line">WORKDIR /app/sg</span><br><span class="line"># 将环境变量值写入到content.txt文件中</span><br><span class="line">RUN echo $CONTENT &gt; content.txt</span><br><span class="line">CMD [&quot;cat&quot;,&quot;content.txt&quot;]</span><br></pre></td></tr></table></figure>
<p>此时用-e修改环境变量时失效，仍是默认值，因为 RUN 在构建镜像时起作用，而-e是启动容器时。</p>
<h4 id="ADD">ADD</h4>
<p>需求：</p>
<p>在构建目录下存放一个sg-blog-vue.tar.gz包，构建镜像时把这个包添加到镜像的/app目录下解压，然后把其中dist目录的内容存放到nginx的html目录下，声明开放80端口。nginx用1.21.5版本。</p>
<p>作用：把构建上下文的文件或网络文件添加到镜像中，如果文件是压缩包，会自动解压。</p>
<p>用法：ADD 源路径 目标路径； 如 ADD dist.tar.gz .</p>
<p>作用时机：构建镜像的时候</p>
<p>完成：</p>
<p>将dist.tar.gz放到docker file的同级目录下后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM nginx:1.21.5</span><br><span class="line">WORKDIR /app</span><br><span class="line"># 压缩包放到根目录下,自动解压，无需再解压</span><br><span class="line">ADD dist.tar.gz .</span><br><span class="line"># 如果时从网络上下载文件，直接写地址即可，但不会自动解压</span><br><span class="line"># ADD url .</span><br><span class="line"># 解压缩 -&gt;  从网络下载的才需要手动解压</span><br><span class="line"># RUN tar -xzvf dist.tar.gz</span><br><span class="line"># 将dist目录下内容放到nginx的html目录下</span><br><span class="line">RUN cp -r dist/* /usr/share/nginx/html</span><br><span class="line">#声明开放端口</span><br><span class="line">EXPOSE 80</span><br><span class="line"># 启动nginx</span><br><span class="line">CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure>
<p>然后正常构建镜像，运行即可。但是没有开放端口，需要进入容器，curl 127.0.0.1:80 进行测试。</p>
<h4 id="EXPOSE">EXPOSE</h4>
<p>没有声明开放端口的话，用 -p 依然可以开放，但是需要EXPOSE进行声明，以便于他人查看。</p>
<p>作用：暴露需要发布的端口，让镜像使用者指导应该发布哪些端口。</p>
<p>用法：EXPOSE 端口号1 端口号2； 如 EXPOSE 80 8080</p>
<p>作用时机：构建镜像的时候</p>
<h4 id="COPY">COPY</h4>
<p>作用：从构建上下文中复制内容到镜像中，类似于ADD，但只能本地文件，且无法自动解压。</p>
<p>用法：COPY 源路径 目标路径 ； 如 COPY dist.tar.gz .</p>
<p>作用时机：构建镜像时</p>
<h4 id="ENTRYPOINT">ENTRYPOINT</h4>
<p>需求：再上个案例基础上，要求容器的 nginx的命令不能在容器运行时被覆盖</p>
<p>作用：定义容器运行时的默认命令，且docker run 的时候无法覆盖ENTRYPOINT里的内容。</p>
<p>作用时机：运行容器的时候</p>
<p>用法：ENTRYPOINT [“命令1”,“参数1”,“参数2”] ; 如 ENTRYPOINT [“echo”, “hello,world!”]</p>
<p>实际应用经验：</p>
<p>于CMD结合，把不希望被覆盖的命令用ENTRYPOINT定义，其他用CMD定义。</p>
<p>如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;]</span><br><span class="line">CMD [&quot;app.jar&quot;]</span><br></pre></td></tr></table></figure>
<p>这样 app.jar可覆盖，但是java -jar就无法覆盖</p>
<h2 id="项目部署案例-自定义镜像版本">项目部署案例-自定义镜像版本</h2>
<h3 id="需求-2">需求</h3>
<h4 id="后端">后端</h4>
<p>希望后端的镜像当中就包含了后端的jar包，镜像启动后自动启动该jar包。</p>
<h4 id="前端">前端</h4>
<p>希望前端镜像中就包含了前端的包</p>
<h3 id="实现">实现</h3>
<h4 id="后端-2">后端</h4>
<h5 id="DockerFile-2">DockerFile</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#基础镜像</span><br><span class="line">FROM java:openjdk-8u111</span><br><span class="line"># 添加config配置目录，容器运行时可由数据卷映射真实的配置文件</span><br><span class="line">WORKDIR /app/config</span><br><span class="line">#指定工作目录 注意不能用RUN cd /app 必须用WORKDIR</span><br><span class="line">WORKDIR /app</span><br><span class="line">#添加jar包到镜像中</span><br><span class="line">ADD wzbq.jar .</span><br><span class="line">#声明开放端口</span><br><span class="line">EXPOSE 9988</span><br><span class="line">#指定容器运行命令,后面还可以加相关的启动参数</span><br><span class="line">CMD [&quot;java&quot;,&quot;-jar&quot;,&quot;wzbq.jar&quot;]</span><br></pre></td></tr></table></figure>
<h5 id="运行容器">运行容器</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9988:9988 \</span><br><span class="line">--network bqNet \</span><br><span class="line">--name wzbq \</span><br><span class="line">-v /usr/wzbq/config:/app/config \</span><br><span class="line">--restart always \</span><br><span class="line">wzbq:1.0</span><br></pre></td></tr></table></figure>
<h4 id="前端-2">前端</h4>
<p>前面已经做过。</p>
<h2 id="Docker-Compose">Docker Compose</h2>
<h3 id="下载Docker-Compose">下载Docker Compose</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>
<h3 id="Docker-Compose第一个环境">Docker Compose第一个环境</h3>
<h4 id="两个概念">两个概念</h4>
<p>项目(Project)：有多个服务共同组成的完整业务单元，定义docker-compose.yml文件中；</p>
<p>服务(Service)：一个服务对应一个应用容器，在一个项目中可以存在多个服务</p>
<h4 id="第一个docjer-compose程序">第一个docjer-compose程序</h4>
<p>1.创建一个docker-compose.yml文件</p>
<p>2.在yml中定义多个服务，如：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">tomcat:</span> <span class="comment">#服务名 唯一</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tomcat:8.0-jre8</span> <span class="comment">#创建当前服务使用的镜像</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure>
<p>3.运行docker-compose</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>
<h4 id="docker-compose-的命令模板">docker compose 的命令模板</h4>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">tomcat:</span> <span class="comment">#服务名称</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">myTomcat</span> <span class="comment">#相当于run的 --name</span></span><br><span class="line">  	<span class="attr">image:</span> <span class="string">tomcat:8.0-jre</span> <span class="comment">#使用哪个镜像 run image</span></span><br><span class="line">  	<span class="attr">ports:</span> <span class="comment">#host与容器的端口映射关系 -p</span></span><br><span class="line">  	  <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">  	  <span class="bullet">-</span> <span class="string">&quot;8081:8081&quot;</span></span><br><span class="line">  	<span class="attr">volumes:</span> <span class="comment">#宿主机与容器中目录数据共享 -v</span></span><br><span class="line">  	  <span class="bullet">-</span> <span class="string">/root/apps:/usr/local/tomcat/webapps</span> <span class="comment">#使用自定义路径映射</span></span><br><span class="line">  	  <span class="bullet">-</span> <span class="string">tomcatwebapps:/usr/local/tomcat/webapps</span> <span class="comment">#自动创建数据卷，需要在下面声明</span></span><br><span class="line">  	<span class="attr">networks:</span> <span class="comment">## --network</span></span><br><span class="line">  	  <span class="bullet">-</span> <span class="string">helloNet</span> <span class="comment">#指定当前服务使用哪个网络</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0.23</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysqldata:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysqlconf:/etc/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">helloNet</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redisdata:/data</span></span><br><span class="line">    <span class="attr">network:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">helloNet</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&quot;redis-server --appendonly yes&quot;</span> <span class="comment"># run 镜像后用来覆盖容器内默认命令</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span> <span class="comment">#声明上面服务使用的自动创建的数据卷名</span></span><br><span class="line">  <span class="attr">tomcatwebapps:</span> <span class="comment">#声明的卷名，compose自动创建该卷名但是会在前面自动加项目名</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span> <span class="comment">#使用自定义卷名（需要自行创建好）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">network:</span> <span class="comment">#定义服务用到的网络桥</span></span><br><span class="line">  <span class="attr">helloNet:</span> <span class="comment">#定义上面用到的网络桥,compose自动创建但是会在前面自动加项目名</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span> <span class="comment">#使用自定义网桥（需要自行创建好）</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron学习入门笔记</title>
    <url>/notes/electronLearn/</url>
    <content><![CDATA[<div class="note warning simple"><p>置顶：</p>
<p>本文档为根据学习教程 <a href="https://www.bilibili.com/video/BV1xd4y1J7dB">Electron入门</a> 的前几P的基本api记录。教程中基于Electron与React做了一个markdown编辑器的小项目。本人根据自己掌握的知识，用Electron与Vue进行了复现。以下链接可供交流学习参考：</p>
<p><a href="https://gitee.com/lienle/electron_markdown_editor_demo">electron_vue_markdown_editor源码仓库</a></p>
<p><a href="https://gitee.com/lienle/electron_markdown_editor_demo/releases/tag/v1">electron_vue_markdown_editor 初版安装包下载 </a></p>
</div> 
<h2 id="Electron基本">Electron基本</h2>
<p>Electron由Chromium、Node.js、Native apis 三部分组成。</p>
<h3 id="技术架构">技术架构</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>Chromium：支持最新特性的浏览器</p>
</li>
<li class="lvl-2">
<p>Node.js：javascript运行时，可实现文件读写等</p>
</li>
<li class="lvl-2">
<p>Native APIs：提供统一的原生界面能力</p>
</li>
</ul>
<h3 id="Electron工作流程">Electron工作流程</h3>
<p><a href="https://z4a.net/image/VwTT8n"><img src="https://z4a.net/images/2023/05/06/Electron.md.png" alt="Electron工作流程示意图"></a></p>
<h4 id="主进程">主进程</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>可以看作package.json中main属性对应的文件</p>
</li>
<li class="lvl-2">
<p>一个应用只会有一个主进程</p>
</li>
<li class="lvl-2">
<p>只有主进程可以进行GUI的api操作</p>
</li>
<li class="lvl-2">
<p>主进程可以调用操作系统底层api对本地文件进行操作</p>
</li>
</ul>
<h4 id="渲染进程">渲染进程</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>Windows中展示的界面通过渲染进程表现</p>
</li>
<li class="lvl-2">
<p>一个应用可以有多个渲染进程</p>
</li>
<li class="lvl-2">
<p>渲染进程如果需要调用原生api需要用ipc与主进程进行通信</p>
</li>
</ul>
<h3 id="Electron环境搭建">Electron环境搭建</h3>
<p>可以参考：<a href="https://www.electronjs.org/zh">electron官网</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># clone示例项目代码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/electron/electron-quick-start</span><br><span class="line"><span class="comment"># 进入，安装依赖并启动</span></span><br><span class="line">npm install &amp;&amp; npm start</span><br></pre></td></tr></table></figure>
<p>这里install失败的话可以安装cnpm，用淘宝镜像install，但是cnpm貌似不受 <code>package-lock.json</code> 影响。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>入口文件main.js中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建了窗口</span></span><br><span class="line"><span class="comment">//2.加载了界面index.html，使用web技术实现的，这个界面时运行在渲染进程中的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span> () &#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;preload.js&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// and load the index.html of the app.</span></span><br><span class="line">  mainWindow.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// Open the DevTools.</span></span><br><span class="line">  <span class="comment">// mainWindow.webContents.openDevTools()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们自己可以根据官方文档创建一个空的干净的electron项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my-electron-app &amp;&amp; <span class="built_in">cd</span> my-electron-app</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure>
<p>填写相关信息后，package.json应该像这样：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-electron-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hello World!&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jane Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>然后安装electron</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev electron</span><br></pre></td></tr></table></figure>
<p>在package.json的scripts加入命令：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron .&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>执行 <code>npm start</code> 即可。</p>
<p>基本入门可以跟着官方文档敲。</p>
<h2 id="Electron学习">Electron学习</h2>
<h3 id="Electron生命周期事件">Electron生命周期事件</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>ready :app初始化完成</p>
</li>
<li class="lvl-2">
<p>dom-ready:一个窗口中的文本加载完成</p>
</li>
<li class="lvl-2">
<p>did-fibish-load:窗口导航完成时触发</p>
</li>
<li class="lvl-2">
<p>window-all-closed:所有窗口都被关闭时触发(如果监听了该事件且没有在这里面执行quit，则后面三个事件将会失效)</p>
</li>
<li class="lvl-2">
<p>before-quit:在关闭窗口之前触发</p>
</li>
<li class="lvl-2">
<p>will-quit:在窗口关闭并且应用退出时触发</p>
</li>
<li class="lvl-2">
<p>quit:当所有窗口被关闭时触发</p>
</li>
<li class="lvl-2">
<p>closed:当窗口关闭时触发，此时应删除窗口引用</p>
</li>
</ul>
<p>使用举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有窗口都关闭</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;444 ---&gt; all windows are closed&#x27;</span>)</span><br><span class="line">    <span class="comment">//只有quit了后面的三个事件才会生效</span></span><br><span class="line">    app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//app退出前</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;before-quit&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;555 ---&gt; before-quit&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//app退出时</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;will-quit&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;666 ---&gt; will-quit&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//app退出</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;quit&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;777 ---&gt; quit&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>窗口的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mainWin=<span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>:<span class="number">600</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="number">400</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//在当前窗口中加载指定界面让它显示具体的内容</span></span><br><span class="line">mainWin.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">mainWin.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8888 this window closed~~~~~~&#x27;</span>)</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="comment">//mainWin=null</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//dom加载完成事件</span></span><br><span class="line">mainWin.<span class="property">webContents</span>.<span class="title function_">on</span>(<span class="string">&#x27;dom-ready&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;222----&gt;dom-ready&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//导航完成事件</span></span><br><span class="line">mainWin.<span class="property">webContents</span>.<span class="title function_">on</span>(<span class="string">&#x27;did-finish-load&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3333----&gt;did-finish-load&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="关于窗口">关于窗口</h3>
<p>为了方便即时调试，可以修改一下package.json:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//监听main.js的变化</span></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span><span class="string">&quot;nodemon --watch main.js --exec npm run build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span><span class="string">&quot;electron .&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<h4 id="窗口尺寸">窗口尺寸</h4>
<p>再定义窗口时配置各项窗口尺寸配置项，详情可见官方文档</p>
<h4 id="窗口标题及环境">窗口标题及环境</h4>
<p>仍然可以在配置项里设置title，但是需要将html的title去掉。</p>
<p>图标为配置项 icon</p>
<p>菜单项为frame,用于自定义菜单，设为false会隐藏，但是就不能拖动了</p>
<p>置隐藏菜单为autoHideMenuBar,</p>
<p>透明度为transparent</p>
<p>ctrl+shift+i 可以调出调试面板</p>
<p>在渲染进程中如何创建新窗口呢？</p>
<p>首先需要在main.js的创建的主窗口配置项中设置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mainWin=<span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="comment">//在该窗口下也能使用node进程</span></span><br><span class="line">    <span class="attr">webPreferences</span>:&#123;</span><br><span class="line">        <span class="attr">nodeIntegration</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">contextIsolation</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="attr">enableRemoteModule</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>然后在渲染进程的js中引入remote</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;remote&#125;=<span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//点击按钮打开新窗口</span></span><br><span class="line"><span class="keyword">const</span> oBtn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line">oBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//在渲染进程中如何创建窗口</span></span><br><span class="line">    <span class="keyword">let</span> indexWin=<span class="keyword">new</span> remote.<span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="attr">height</span>:<span class="number">200</span></span><br><span class="line">    &#125;)</span><br><span class="line">    indexWin.<span class="title function_">loadFile</span>(<span class="string">&#x27;list.html&#x27;</span>)</span><br><span class="line">    indexWin.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        indexWin = <span class="literal">null</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>但是这一方式在最新版(v24)已经不适用了。</p>
<p>此时需要引入新的模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save @electron/remote</span><br></pre></td></tr></table></figure>
<p>然后在主进程中引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rm= <span class="built_in">require</span>(<span class="string">&#x27;@electron/remote/main&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>在主窗口的配置中 <code>enableRemoteModule</code> 可以舍去，定义完成主窗口，loadFile前：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rm.<span class="title function_">initialize</span>()</span><br><span class="line">rm.<span class="title function_">enable</span>(mainWin.<span class="property">webContents</span>)</span><br></pre></td></tr></table></figure>
<p>然后在渲染进程的js中即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">BrowserWindow</span>&#125;=<span class="built_in">require</span>(<span class="string">&#x27;@electron/remote&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>直接使用BrowserWindow即可。</p>
<h4 id="自定义窗口">自定义窗口</h4>
<p>在main.js中设置 <code>frame:false</code> 此时可以自定义窗口，然后进行一些自定义按钮操作：</p>
<p>如，index.html中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;titleBar&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>自定义窗口<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;windowTool&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-window-close-o&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;maxsize&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-window-maximize&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;minisize&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-minus&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            我是自定义窗口</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>自定义了如下css:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    *&#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.box</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        <span class="attribute">background-color</span>: seashell;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.bar</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1</span> <span class="number">5px</span> <span class="number">0px</span> <span class="number">#333</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.titleBar</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.titleBar</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.titleBar</span> <span class="selector-class">.logo</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./logo.ico</span>);</span><br><span class="line">        <span class="attribute">background-size</span>: cover;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.titleBar</span> <span class="selector-class">.title</span>&#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">font</span>: normal <span class="number">14px</span>/<span class="number">40px</span> <span class="string">&#x27;微软雅黑&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.windowTool</span>&#123;</span><br><span class="line">        <span class="attribute">float</span>: right;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.windowTool</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="attribute">float</span>: right;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">font</span>: normal <span class="number">12px</span>/<span class="number">40px</span> <span class="string">&#x27;微软雅黑&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>自定义index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">BrowserWindow</span>,getCurrentWindow&#125;=<span class="built_in">require</span>(<span class="string">&#x27;@electron/remote&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取当前窗口对象</span></span><br><span class="line">    <span class="keyword">let</span> mainWin=<span class="title function_">getCurrentWindow</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取元素提添加点击操作的监听</span></span><br><span class="line">    <span class="keyword">let</span> aBtn=<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;windowTool&#x27;</span>)[<span class="number">0</span>].<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    <span class="comment">//关闭按钮</span></span><br><span class="line">    aBtn[<span class="number">0</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//关闭窗口</span></span><br><span class="line">        mainWin.<span class="title function_">close</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//最大化</span></span><br><span class="line">    aBtn[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> isMax=mainWin.<span class="title function_">isMaximized</span>()</span><br><span class="line">        <span class="keyword">if</span>(!isMax)&#123;</span><br><span class="line">            <span class="comment">//窗口最大化</span></span><br><span class="line">            mainWin.<span class="title function_">maximize</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//回到初始状态</span></span><br><span class="line">            mainWin.<span class="title function_">restore</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//最小化</span></span><br><span class="line">    aBtn[<span class="number">2</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> isMin=mainWin.<span class="title function_">isMinimized</span>()</span><br><span class="line">        <span class="keyword">if</span>(!isMin)&#123;</span><br><span class="line">            <span class="comment">//窗口最小化</span></span><br><span class="line">            mainWin.<span class="title function_">minimize</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//回到初始状态</span></span><br><span class="line">            mainWin.<span class="title function_">restore</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>即可实现自定义窗口的展示、最大最小化以及关闭。</p>
<h4 id="阻止窗口关闭">阻止窗口关闭</h4>
<p>窗口关闭时应该有提示确认信息</p>
<p>在index.html中加入一个悬浮框提示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义浮窗设置阻止窗口关闭样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;isClose&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>是否关闭当前应用？<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>系统可能不会保存您的所有更改<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;close_btn&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>是<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>否<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.isClose</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在index.js中阻止窗口关闭事件并接替：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取当前窗口对象</span></span><br><span class="line"><span class="keyword">let</span> mainWin=<span class="title function_">getCurrentWindow</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听窗口关闭操作</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onbeforeunload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> oBox=<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;isClose&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    oBox.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&#x27;block&#x27;</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">//确定按钮</span></span><br><span class="line">    <span class="keyword">let</span> yeBtn=oBox.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;span&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">//取消按钮</span></span><br><span class="line">    <span class="keyword">let</span> noBtn=oBox.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;span&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    yeBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        mainWin.<span class="title function_">destroy</span>() <span class="comment">//要调用destory，而不能close，否则死循环。</span></span><br><span class="line">    &#125;)</span><br><span class="line">    noBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        oBox.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&#x27;none&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="父子及模态窗口">父子及模态窗口</h4>
<p>一般情况下添加新的窗口，其与初始窗口并没有什么关系。此时再新增窗口的配置项中添加如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> indexWin=<span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">parent</span>:mainWin, <span class="comment">//使主窗口为父窗口</span></span><br><span class="line">    <span class="attr">modal</span>:<span class="literal">true</span>, <span class="comment">//设置为模态窗口</span></span><br><span class="line">    <span class="attr">width</span>:<span class="number">200</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="number">200</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这样之后新开的窗口会成为模态窗口，打开时，原窗口将无法被操作，只有模态窗口关闭后才能操作原窗口。</p>
<h4 id="关于文档">关于文档</h4>
<p>用的比较多的会是官网的api参考：<a href="https://www.electronjs.org/zh/docs/latest/api/app">Electron API 参考</a></p>
<p>这里分了5个大类，需要时可在对应模块查找。</p>
<h3 id="关于菜单">关于菜单</h3>
<h4 id="自定义菜单">自定义菜单</h4>
<blockquote>
<p>文档在 Main Process模块的Menu以及MenuItem</p>
</blockquote>
<p>首先需要根据官网要求的格式定义一个菜单项配置：</p>
<p>这里我写在一个单独文件中，然后在需要用的地方引入，注意使用exports的语法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mainMenu=[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">label</span>:<span class="string">&#x27;文件&#x27;</span>,</span><br><span class="line">        <span class="attr">submenu</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">label</span>:<span class="string">&#x27;打开文件&#x27;</span>,</span><br><span class="line">                <span class="title function_">click</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击菜单项要做的动作-打开文件&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">type</span>:<span class="string">&#x27;separator&#x27;</span> <span class="comment">//分割线</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;<span class="attr">label</span>:<span class="string">&#x27;关闭文件夹&#x27;</span>&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">label</span>:<span class="string">&#x27;关于&#x27;</span>,</span><br><span class="line">                <span class="attr">role</span>:<span class="string">&#x27;about&#x27;</span>,<span class="comment">//预设的功能，详见文档</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;<span class="attr">label</span>:<span class="string">&#x27;编辑&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">mainMenu</span>=mainMenu</span><br></pre></td></tr></table></figure>
<p>引入的时候也需要使用require</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; mainMenu &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./menu/menu&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>然后在主窗口loadFile之前添加如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义或引入自己需要的菜单项js</span></span><br><span class="line"><span class="comment">//利用模板生成菜单项</span></span><br><span class="line"><span class="keyword">let</span> menu=<span class="title class_">Menu</span>.<span class="title function_">buildFromTemplate</span>(mainMenu)</span><br><span class="line"></span><br><span class="line"><span class="comment">//将上述自定义菜单添加到应用里</span></span><br><span class="line"><span class="title class_">Menu</span>.<span class="title function_">setApplicationMenu</span>(menu)</span><br><span class="line"><span class="comment">//打印当前操作系统，一些菜单项支持不同的操作系统，可以进行判断</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">platform</span>)</span><br></pre></td></tr></table></figure>
<p>这样即可初步实现自定义菜单及其功能。更多详细功能参见官方文档。</p>
<h4 id="菜单角色及类型">菜单角色及类型</h4>
<p>electron预设了一些菜单角色和类型，代码和注释如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mainMenu=[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">label</span>:<span class="string">&#x27;角色&#x27;</span>, <span class="comment">//基本角色使用</span></span><br><span class="line">        <span class="attr">submenu</span>:[</span><br><span class="line">            &#123;<span class="attr">label</span>:<span class="string">&#x27;复制&#x27;</span>,<span class="attr">role</span>:<span class="string">&#x27;copy&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">label</span>:<span class="string">&#x27;剪切&#x27;</span>,<span class="attr">role</span>:<span class="string">&#x27;cut&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">label</span>:<span class="string">&#x27;粘贴&#x27;</span>,<span class="attr">role</span>:<span class="string">&#x27;paste&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">label</span>:<span class="string">&#x27;最小化&#x27;</span>,<span class="attr">role</span>:<span class="string">&#x27;minimize&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">label</span>:<span class="string">&#x27;类型&#x27;</span>, <span class="comment">//菜单四种类型</span></span><br><span class="line">        <span class="attr">submenu</span>:[</span><br><span class="line">            &#123;<span class="attr">label</span>:<span class="string">&#x27;选项1&#x27;</span>,<span class="attr">type</span>:<span class="string">&#x27;checkbox&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">label</span>:<span class="string">&#x27;选项2&#x27;</span>,<span class="attr">type</span>:<span class="string">&#x27;checkbox&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">label</span>:<span class="string">&#x27;选项3&#x27;</span>,<span class="attr">type</span>:<span class="string">&#x27;checkbox&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">type</span>:<span class="string">&#x27;separator&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">label</span>:<span class="string">&#x27;item1&#x27;</span>,<span class="attr">type</span>:<span class="string">&#x27;radio&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">label</span>:<span class="string">&#x27;item2&#x27;</span>,<span class="attr">type</span>:<span class="string">&#x27;radio&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">type</span>:<span class="string">&#x27;separator&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">label</span>:<span class="string">&#x27;windows&#x27;</span>,<span class="attr">type</span>:<span class="string">&#x27;submenu&#x27;</span>,<span class="attr">role</span>:<span class="string">&#x27;windowMenu&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">label</span>:<span class="string">&#x27;其他&#x27;</span>,</span><br><span class="line">        <span class="attr">submenu</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">label</span>:<span class="string">&#x27;打开&#x27;</span>, </span><br><span class="line">                <span class="attr">icon</span>:<span class="string">&#x27;./logo.ico&#x27;</span>, <span class="comment">//自定义菜单图标</span></span><br><span class="line">                <span class="attr">accelerator</span>:<span class="string">&#x27;ctrl + o&#x27;</span>, <span class="comment">//自定义菜单快捷键</span></span><br><span class="line">                <span class="title function_">click</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行了自定义其他菜单&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>这里输出了中文字符，但vscode控制台没有设置，输出了乱码，可以进行设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chcp 65001</span><br></pre></td></tr></table></figure>
<h4 id="动态创建菜单">动态创建菜单</h4>
<p>通过Menu和MenuItem可以实现动态创建自定义菜单的功能</p>
<p>首先在主页面添加按钮和文本框：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;addMenu&quot;</span>&gt;</span>创建自定义菜单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;menuCon&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入自定义菜单项内容&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;addItem&quot;</span>&gt;</span>添加菜单项<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在js文件中创建对应的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="title class_">BrowserWindow</span>,</span><br><span class="line">    getCurrentWindow,</span><br><span class="line">    <span class="title class_">Menu</span>,</span><br><span class="line">    <span class="title class_">MenuItem</span></span><br><span class="line">&#125;=<span class="built_in">require</span>(<span class="string">&#x27;@electron/remote&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取自定义菜单相关元素</span></span><br><span class="line">    <span class="keyword">let</span> addMenu=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;addMenu&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> menuCon=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;menuCon&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> addItem=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;addItem&#x27;</span>)</span><br><span class="line">    <span class="comment">//自定义全局菜单变量</span></span><br><span class="line">    <span class="keyword">let</span> menuItem=<span class="keyword">new</span> <span class="title class_">Menu</span>()</span><br><span class="line">    <span class="comment">//生成自定义菜单</span></span><br><span class="line">    addMenu.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//创建菜单</span></span><br><span class="line">        <span class="keyword">let</span> menuFile=<span class="keyword">new</span> <span class="title class_">MenuItem</span>(&#123;<span class="attr">label</span>:<span class="string">&#x27;文件&#x27;</span>,<span class="attr">type</span>:<span class="string">&#x27;normal&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">let</span> menuEdit=<span class="keyword">new</span> <span class="title class_">MenuItem</span>(&#123;<span class="attr">label</span>:<span class="string">&#x27;编辑&#x27;</span>,<span class="attr">type</span>:<span class="string">&#x27;normal&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">let</span> customMenu=<span class="keyword">new</span> <span class="title class_">MenuItem</span>(&#123;<span class="attr">label</span>:<span class="string">&#x27;自定义菜单项&#x27;</span>,<span class="attr">submenu</span>:menuItem&#125;)</span><br><span class="line">        <span class="comment">//将创建好的自定义菜单添加到menu</span></span><br><span class="line">        <span class="keyword">let</span> menu=<span class="keyword">new</span> <span class="title class_">Menu</span>()</span><br><span class="line">        menu.<span class="title function_">append</span>(menuFile)</span><br><span class="line">        menu.<span class="title function_">append</span>(menuEdit)</span><br><span class="line">        menu.<span class="title function_">append</span>(customMenu)</span><br><span class="line">        <span class="comment">//将menu放置于app中显示</span></span><br><span class="line">        <span class="title class_">Menu</span>.<span class="title function_">setApplicationMenu</span>(menu)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//动态添加菜单项</span></span><br><span class="line">    addItem.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前input输入框当中的内容</span></span><br><span class="line">        <span class="keyword">let</span> con = menuCon.<span class="property">value</span>.<span class="title function_">trim</span>()</span><br><span class="line">        <span class="keyword">if</span>(con)&#123;</span><br><span class="line">            menuItem.<span class="title function_">append</span>(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(&#123;<span class="attr">label</span>:con,<span class="attr">type</span>:<span class="string">&#x27;normal&#x27;</span>&#125;))</span><br><span class="line">            menuCon.<span class="property">value</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ~~~ 其他逻辑 </span></span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="右键菜单">右键菜单</h4>
<p>首先定义出子菜单模板</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> rightKeyMenu=[</span><br><span class="line">    &#123;<span class="attr">label</span>:<span class="string">&#x27;Run Code&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">label</span>:<span class="string">&#x27;转到定义&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">type</span>:<span class="string">&#x27;separator&#x27;</span>&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">label</span>:<span class="string">&#x27;其他功能&#x27;</span>,</span><br><span class="line">        <span class="title function_">click</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;其他功能选项被点击了&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">rightKeyMenu</span>=rightKeyMenu</span><br></pre></td></tr></table></figure>
<p>在渲染进程中引入并设置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//右键菜单</span></span><br><span class="line"><span class="keyword">const</span> &#123;rightKeyMenu&#125;=<span class="built_in">require</span>(<span class="string">&#x27;./menu/menu&#x27;</span>)</span><br><span class="line"><span class="comment">//依据右键菜单配置生成menu</span></span><br><span class="line"><span class="keyword">let</span> menu=<span class="title class_">Menu</span>.<span class="title function_">buildFromTemplate</span>(rightKeyMenu)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取当前窗口对象</span></span><br><span class="line">    <span class="keyword">let</span> mainWin=<span class="title function_">getCurrentWindow</span>()</span><br><span class="line">    <span class="comment">//给鼠标右击添加监听</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>,<span class="function">(<span class="params">ev</span>)=&gt;</span>&#123;</span><br><span class="line">        ev.<span class="title function_">preventDefault</span>()</span><br><span class="line">        <span class="comment">//弹出菜单</span></span><br><span class="line">        menu.<span class="title function_">popup</span>(&#123;<span class="attr">window</span>:mainWin&#125;,<span class="literal">false</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="关于更多">关于更多</h3>
<h4 id="主进程与渲染进程通信">主进程与渲染进程通信</h4>
<p>即类似发布订阅模式的通信，分为同步和异步两种：</p>
<p>渲染进程-页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;commAsync&quot;</span>&gt;</span>渲到主异步操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;commSync&quot;</span>&gt;</span>渲到主同步操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>渲染进程-js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ipcRenderer&#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//获取元素</span></span><br><span class="line">    <span class="keyword">let</span> asyncBtn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;commAsync&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> syncBtn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;commSync&#x27;</span>)</span><br><span class="line">    <span class="comment">//01 采用异步api在渲染进程中给主进程发送消息</span></span><br><span class="line">    asyncBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;msg1&#x27;</span>,<span class="string">&#x27;当前是来自渲染进程的异步消息&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//02 采用同步的方式完成数据通信</span></span><br><span class="line">    syncBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> val= ipcRenderer.<span class="title function_">sendSync</span>(<span class="string">&#x27;msg2&#x27;</span>,<span class="string">&#x27;当前是来自渲染进程的同步消息&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(val)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//接收消息</span></span><br><span class="line">    ipcRenderer.<span class="title function_">on</span>(<span class="string">&#x27;msg1Re&#x27;</span>,<span class="function">(<span class="params">ev,data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//接收主进程的主动消息</span></span><br><span class="line">    ipcRenderer.<span class="title function_">on</span>(<span class="string">&#x27;mtp&#x27;</span>,<span class="function">(<span class="params">ev,data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主进程：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app,<span class="title class_">BrowserWindow</span>,ipcMain&#125;=<span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="comment">//主进程接收消息操作</span></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;msg1&#x27;</span>,<span class="function">(<span class="params">ev,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="comment">//收到消息后回复，这里ev.sender相当于ipcMain</span></span><br><span class="line">    ev.<span class="property">sender</span>.<span class="title function_">send</span>(<span class="string">&#x27;msg1Re&#x27;</span>,<span class="string">&#x27;这是来自主进程的异步回复消息&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;msg2&#x27;</span>,<span class="function">(<span class="params">ev,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="comment">//收到消息后同步回复，这里ev.sender相当于ipcMain</span></span><br><span class="line">    ev.<span class="property">returnValue</span>=<span class="string">&#x27;这是来自主进程的同步回复消息&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>可以分别在终端(控制台)和应用的控制台(渲染进程)看到打印的消息。</p>
<h4 id="渲染进程间通信">渲染进程间通信</h4>
<p>渲染进程之间无法直接进行通信，需要借助一个媒介。</p>
<p><strong>借用localStorage作为媒介：</strong></p>
<p>创建subWin1.html作为子窗口，经由index.js发送通信让主进程创建：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js发送消息让主进程打开子窗口，并将信息存入localStorage</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取元素</span></span><br><span class="line">    <span class="keyword">let</span> oBtn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;subBtn&#x27;</span>)</span><br><span class="line">    oBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;openWin2&#x27;</span>,<span class="string">&#x27;来自index的数据&#x27;</span>)</span><br><span class="line">        <span class="comment">//打开窗口后保存数据至localStorage</span></span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;我是localStorage里的值&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js接收index.js渲染进程发送的数据，然后完成后续的逻辑</span></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;openWin2&#x27;</span>,<span class="function">(<span class="params">ev,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//接收到渲染进程的点击信息后完成窗口list的打开</span></span><br><span class="line">    <span class="keyword">let</span> subWin1=<span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>:<span class="number">400</span>,</span><br><span class="line">        <span class="attr">height</span>:<span class="number">300</span>,</span><br><span class="line">        <span class="attr">parent</span>:<span class="title class_">BrowserWindow</span>.<span class="title function_">fromId</span>(mainWinId),</span><br><span class="line">        <span class="attr">webPreferences</span>:&#123;</span><br><span class="line">            <span class="attr">nodeIntegration</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">contextIsolation</span>:<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    subWin1.<span class="title function_">loadFile</span>(<span class="string">&#x27;subWin1.html&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    subWin1.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        subWin1=<span class="literal">null</span></span><br><span class="line">    &#125;)</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//将接收到的index.js的通信转发给subWin1</span></span><br><span class="line">    subWin1.<span class="property">webContents</span>.<span class="title function_">on</span>(<span class="string">&#x27;did-finish-load&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        subWin1.<span class="property">webContents</span>.<span class="title function_">send</span>(<span class="string">&#x27;its&#x27;</span>,data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这时subWin1.js可通过localStorage接收</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ipcRenderer&#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> txt=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;txt&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> val=<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    txt.<span class="property">value</span>=val</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在sub中发送数据给主进程main.js</span></span><br><span class="line">    <span class="keyword">let</span> btn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;stm&#x27;</span>,<span class="string">&#x27;来自sub进程&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>借用主进程作为媒介</strong></p>
<p>在上面的代码中已经有相关的记录：</p>
<p>第一块 index.js发送到主进程main.js中的创建窗口信息中携带了其他信息： <code>ipcRenderer.send('openWin2','来自index的数据')</code> 这时，main.js接收到后，在创建完成窗口的事件 <code>did-finish-load</code> 后将信息转发给了subWin，subWin可以通过 <code>ipcRenderer</code> 进行接收。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ipcRenderer.<span class="title function_">on</span>(<span class="string">&#x27;its&#x27;</span>,<span class="function">(<span class="params">ev,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> txt=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;txt2&#x27;</span>)</span><br><span class="line">    txt.<span class="property">value</span>=data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Dialog模块">Dialog模块</h4>
<p>详情见官方文档 <a href="https://www.electronjs.org/zh/docs/latest/api/dialog">dialog | Electron (electronjs.org)</a></p>
<p>dialog共有 <code>open</code> <code>save</code> <code>error</code> <code>message</code> <code>certificateTrust</code> 几种，用法大差不差，最好的方式还是读文档。下面是一些示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对话框</span></span><br><span class="line"><span class="keyword">let</span> dBtn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;openDialog&#x27;</span>)</span><br><span class="line">dBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> result= <span class="keyword">await</span> dialog.<span class="title function_">showOpenDialog</span>(&#123;</span><br><span class="line">        <span class="attr">defaultPath</span>:__dirname,<span class="comment">//默认路径指向当前目录</span></span><br><span class="line">        <span class="attr">buttonLabel</span>:<span class="string">&#x27;请选择~&#x27;</span>,<span class="comment">//确认按钮</span></span><br><span class="line">        <span class="attr">title</span>:<span class="string">&#x27;【测试】请选择哦~&#x27;</span>,</span><br><span class="line">        <span class="attr">properties</span>:[<span class="string">&#x27;openFile&#x27;</span>,<span class="string">&#x27;multiSelections&#x27;</span>],<span class="comment">//打开文件</span></span><br><span class="line">        <span class="comment">//properties:[&#x27;openDirectory&#x27;,&#x27;multiSelections&#x27;],//打开文件夹</span></span><br><span class="line">        <span class="attr">filters</span>:[</span><br><span class="line">            &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;代码文件&#x27;</span>,<span class="attr">extensions</span>:[<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;json&#x27;</span>,<span class="string">&#x27;html&#x27;</span>]&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;图片文件&#x27;</span>,<span class="attr">extensions</span>:[<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>]&#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">    <span class="keyword">if</span>(result.<span class="property">canceled</span>)&#123;</span><br><span class="line">        <span class="comment">//显示错误对话框</span></span><br><span class="line">        dialog.<span class="title function_">showErrorBox</span>(<span class="string">&#x27;没有选择任何文件&#x27;</span>,<span class="string">&#x27;您没有选择任何文件额~&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>值得一提的是，electron的confirm选择对话框是放在MessageBox中的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//监听窗口关闭操作</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onbeforeunload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> choice= dialog.<span class="title function_">showMessageBoxSync</span>(<span class="title function_">getCurrentWindow</span>(),&#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;未保存信息将会清除，确定要退出吗？&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">        <span class="attr">buttons</span>:[<span class="string">&#x27;确定退出&#x27;</span>,<span class="string">&#x27;取消~&#x27;</span>],</span><br><span class="line">        <span class="attr">defaultId</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&#x27;退出程序确认&#x27;</span>,</span><br><span class="line">        <span class="attr">detail</span>:<span class="string">&#x27;确认退出，数据将清空&#x27;</span>,</span><br><span class="line">        <span class="attr">cancelId</span>:<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>(choice==<span class="number">0</span>)&#123;</span><br><span class="line">        mainWin.<span class="title function_">destroy</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Shell模块">Shell模块</h4>
<p>shell能够在浏览器打开指定网页、在文件资源管理器打开某个路径。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;shell&#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//打开url</span></span><br><span class="line">    <span class="keyword">let</span> openFolder=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;openFolder&#x27;</span>)</span><br><span class="line">    openFolder.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">(<span class="params">ev</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> urlPath=<span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">        <span class="comment">//会唤醒浏览器并打开指定url</span></span><br><span class="line">        shell.<span class="title function_">openExternal</span>(urlPath) </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;shell&#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//打开url</span></span><br><span class="line">    <span class="keyword">let</span> openFolder=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;openFolder&#x27;</span>)</span><br><span class="line">    openFolder.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">(<span class="params">ev</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//打开 文件资源管理器</span></span><br><span class="line">        shell.<span class="title function_">showItemInFolder</span>(path.<span class="title function_">resolve</span>(__filename)) <span class="comment">//打开当前文件</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过iframe能够达到在窗口显示某个网页的效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">id</span>=<span class="string">&quot;webview&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    *&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">iframe</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义菜单</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">BrowserWindow</span>,shell&#125; =<span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> shellMenu=[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">label</span>:<span class="string">&quot;菜单&quot;</span>,</span><br><span class="line">        <span class="attr">submenu</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">label</span>:<span class="string">&#x27;关于&#x27;</span>,</span><br><span class="line">                <span class="title function_">click</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    shell.<span class="title function_">openExternal</span>(<span class="string">&#x27;https://kaiwu.lagou.com/&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">label</span>:<span class="string">&#x27;打开&#x27;</span>,</span><br><span class="line">                <span class="title function_">click</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="comment">//通过主进程发送消息</span></span><br><span class="line">                    <span class="title class_">BrowserWindow</span>.<span class="title function_">getFocusedWindow</span>().<span class="property">webContents</span>.<span class="title function_">send</span>(<span class="string">&#x27;openUrl&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">shellMenu</span>=shellMenu</span><br><span class="line"></span><br><span class="line"><span class="comment">//在main.js中生成菜单</span></span><br><span class="line"><span class="comment">//实现略,上面menu提过了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在shell.js接收主进程发送的消息，更换iframe的url</span></span><br><span class="line">ipcRenderer.<span class="title function_">on</span>(<span class="string">&#x27;openUrl&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> iframe=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;webview&#x27;</span>)</span><br><span class="line">    iframe.<span class="property">src</span>=<span class="string">&#x27;https://www.lagou.com&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="消息通知">消息通知</h4>
<p>即右下角弹窗通知，使用window原生：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;notice&quot;</span>&gt;</span>打开消息通知<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//打开消息通知</span></span><br><span class="line">    <span class="keyword">let</span> notice=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;notice&#x27;</span>)</span><br><span class="line">    notice.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> option=&#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&#x27;测试通知&#x27;</span>,</span><br><span class="line">            <span class="attr">body</span>:<span class="string">&#x27;hi~你现在被通知了~&#x27;</span>,</span><br><span class="line">            <span class="attr">icon</span>:<span class="string">&#x27;./logo.ico&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> myNotice=<span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">Notification</span>(option.<span class="property">title</span>,option)</span><br><span class="line">        myNotice.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击后的动作&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="全局快捷键">全局快捷键</h4>
<p>注册全局快捷键：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册全局快捷键 ready可以监听多次</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ret= globalShortcut.<span class="title function_">register</span>(<span class="string">&#x27;ctrl + q&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;快捷键注册成功&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>(!ret)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;注册失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否已注册</span></span><br><span class="line">    <span class="keyword">if</span>(globalShortcut.<span class="title function_">isRegistered</span>(<span class="string">&#x27;ctrl + q&#x27;</span>))&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ctrl + q 已注册&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在程序退出前注销快捷键：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//退出前注销快捷键</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;will-quit&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    globalShortcut.<span class="title function_">unregister</span>(<span class="string">&#x27;ctrl+q&#x27;</span>)</span><br><span class="line">    globalShortcut.<span class="title function_">unregisterAll</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="剪贴板操作">剪贴板操作</h4>
<p>将内容复制到剪切板clipboard，并在其他地方读取出来。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;copyBox&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;复制内容&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;copyBtn&quot;</span>&gt;</span>复制<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;pasteBox&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;粘贴内容&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;pasteBtn&quot;</span>&gt;</span>粘贴<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;pic&quot;</span>&gt;</span>将图片拷贝至剪切板再粘贴至界面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//剪贴板</span></span><br><span class="line">    <span class="keyword">let</span> copyBox= <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;copyBox&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> copyBtn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;copyBtn&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> pasteBox=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pasteBox&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> pasteBtn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pasteBtn&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> pic=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pic&#x27;</span>)</span><br><span class="line">    <span class="comment">//复制按钮</span></span><br><span class="line">    copyBtn.<span class="property">onclick</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        clipboard.<span class="title function_">writeText</span>(copyBox.<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//粘贴</span></span><br><span class="line">    pasteBtn.<span class="property">onclick</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        pasteBox.<span class="property">value</span>= clipboard.<span class="title function_">readText</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pic.<span class="property">onclick</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//将图片放置于剪切板中要求图片类型属于nativeImage实例</span></span><br><span class="line">        <span class="keyword">let</span> oImage=nativeImage.<span class="title function_">createFromPath</span>(<span class="string">&#x27;./logo.png&#x27;</span>)</span><br><span class="line">        <span class="comment">//复制</span></span><br><span class="line">        clipboard.<span class="title function_">writeImage</span>(oImage)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将剪切板中的图片作为dom粘贴到界面上</span></span><br><span class="line">        <span class="keyword">let</span> pasteImage=clipboard.<span class="title function_">readImage</span>()</span><br><span class="line">        <span class="keyword">let</span> oImgDom=<span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">        oImgDom.<span class="property">src</span>=pasteImage.<span class="title function_">toDataURL</span>()</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(oImgDom)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note warning simple"><p>这里只是简单记录一下在尝试electron时的一些操作和特性，实际使用还是依赖官方文档为准。</p>
</div>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Electron</tag>
        <tag>Node.Js</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron+Vue项目搭建</title>
    <url>/notes/electronVue/</url>
    <content><![CDATA[<div class="note info simple"><p>最近需要开发一个桌面程序，但是由于早年使用Winform，那个UI设计让我及其头疼，所以还是想使用html+js+css这一套来搭建界面。刚好，有这个想法的远不止我一个，electron就是为此而生。</p>
<p>学了一阵子electron后，觉得搭一个electron+vue的项目试一试，在这里记录一下经验。</p>
</div>
<div class="note warning simple"><p>补充：</p>
<p>根据学习教程 <a href="https://www.bilibili.com/video/BV1xd4y1J7dB">Electron入门</a> 做了一些尝试，教程中基于Electron与React做了一个markdown编辑器的小项目。本人根据自己掌握的知识，用Electron与Vue进行了复现。以下链接可供交流学习参考：</p>
<p><a href="https://gitee.com/lienle/electron_markdown_editor_demo">electron_vue_markdown_editor源码仓库</a></p>
<p><a href="https://gitee.com/lienle/electron_markdown_editor_demo/releases/tag/v1">electron_vue_markdown_editor 初版安装包下载 </a></p>
</div> 
<h3 id="安装依赖">安装依赖</h3>
<p>首先设置淘宝镜像，加速安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>如果没有vue脚手架需要安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>
<p>我们首先来创建一个vue项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>选项中选择Default即可。</p>
<p>安装完成后，进入目录，然后安装electron构建插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">vue add electron-builder</span><br></pre></td></tr></table></figure>
<p>之后会让选择版本，选择最新的即可，等待其安装完成。</p>
<p>启动项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run electron:serve</span><br></pre></td></tr></table></figure>
<p>即可看到启动后的electron桌面程序。</p>
<p>这里可能会出现一个问题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Failed to fetch extension, trying 4 more <span class="built_in">times</span></span><br></pre></td></tr></table></figure>
<p>这是项目启动后安装vue插件导致的，可以在background.js注释掉以下代码即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 安装插件会导致 Failed to Fetch extension错误</span></span><br><span class="line">  <span class="comment">// if (isDevelopment &amp;&amp; !process.env.IS_TEST) &#123;</span></span><br><span class="line">  <span class="comment">//   // Install Vue Devtools</span></span><br><span class="line">  <span class="comment">//   try &#123;</span></span><br><span class="line">  <span class="comment">//     await installExtension(VUEJS_DEVTOOLS)</span></span><br><span class="line">  <span class="comment">//   &#125; catch (e) &#123;</span></span><br><span class="line">  <span class="comment">//     console.error(&#x27;Vue Devtools failed to install:&#x27;, e.toString())</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">//注意不要把这句注释掉了</span></span><br><span class="line">  <span class="title function_">createWindow</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="项目结构改造">项目结构改造</h3>
<p>安装完 <code>electron-builder</code> 后可以看到<code>src</code>目录下多了<code>background.js</code> 文件，<code>package.json</code> 中多了一些启动脚本命令。</p>
<p>我们知道，electron是分为主进程和渲染进程的，显然，vue的页面部分是属于渲染进程的，而安装插件后多出来的<code>background.js</code>属于主进程，因此我们可以将文件结构做一些改造。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在 <code>src</code>目录下新建两个文件夹：<code>src/main</code> 和 <code>src/renderer</code></p>
</li>
<li class="lvl-2">
<p>将 <code>background.js</code> 移动到 <code>src/main</code> 下，并重命名为 <code>index.js</code></p>
</li>
<li class="lvl-2">
<p>将 <code>src</code> 目录下原来的其他文件移动到 <code>src/renderer</code> 下</p>
</li>
</ul>
<p>这样以后， <code>src</code> 目录的结构就会如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├─src                          <span class="comment"># 源码目录</span></span><br><span class="line">│  ├─main                      <span class="comment"># 主进程目录</span></span><br><span class="line">│  │  └─index.js               <span class="comment"># 主进程入口</span></span><br><span class="line">│  └─renderer                  <span class="comment"># 渲染进程文件夹</span></span><br><span class="line">│      ├─assets</span><br><span class="line">│      ├─components</span><br><span class="line">│      ├─App.vue</span><br><span class="line">│      └─main.js               <span class="comment"># 渲染进程入口</span></span><br></pre></td></tr></table></figure>
<p>但是这样一来入口文件的位置就被我们改变了，所以需要添加一个 <code>vue.config.js</code> 修改入口文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">pluginOptions</span>: &#123;</span><br><span class="line">    <span class="attr">electronBuilder</span>: &#123;</span><br><span class="line">      <span class="attr">mainProcessFile</span>: <span class="string">&#x27;src/main/index.js&#x27;</span>, <span class="comment">// 主进程入口文件</span></span><br><span class="line">      <span class="attr">rendererProcessFile</span>: <span class="string">&#x27;src/renderer/main.js&#x27;</span>, <span class="comment">// 渲染进程入口文件</span></span><br><span class="line">      <span class="attr">mainProcessWatch</span>: [<span class="string">&#x27;src/main&#x27;</span>], <span class="comment">// 检测主进程文件在更改时将重新编译主进程并重新启动</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后重新运行 <code>npm run electron:serve</code> 即可。</p>
<p>这样一个项目的壳子就创建好了，我们可以在renderer下按照之前开发vue的方式继续进行开发桌面应用了。</p>
<h3 id="项目的打包">项目的打包</h3>
<p>上面的步骤完成后，即可像做web开发一样开始进行客户端的开发了。但是build后，我们希望用户能够自主选择安装位置，因此需要使用nsis这个win桌面程序打包工具。</p>
<p>首先需要再电脑上安装nsis软件，可自行下载安装；</p>
<p>然后再项目根目录(与vue.config.js同级)新建一个脚本installer.nsh如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!macro preInit</span><br><span class="line">  SetRegView 64</span><br><span class="line">  WriteRegExpandStr HKLM &quot;$&#123;INSTALL_REGISTRY_KEY&#125;&quot; InstallLocation &quot;D:\Program Files\$&#123;PRODUCT_NAME&#125;&quot;</span><br><span class="line">  WriteRegExpandStr HKCU &quot;$&#123;INSTALL_REGISTRY_KEY&#125;&quot; InstallLocation &quot;D:\Program Files\$&#123;PRODUCT_NAME&#125;&quot;</span><br><span class="line">  SetRegView 32</span><br><span class="line">  WriteRegExpandStr HKLM &quot;$&#123;INSTALL_REGISTRY_KEY&#125;&quot; InstallLocation &quot;D:\Program Files (x86)\$&#123;PRODUCT_NAME&#125;&quot;</span><br><span class="line">  WriteRegExpandStr HKCU &quot;$&#123;INSTALL_REGISTRY_KEY&#125;&quot; InstallLocation &quot;D:\Program Files (x86)\$&#123;PRODUCT_NAME&#125;&quot;</span><br><span class="line">!macroend</span><br></pre></td></tr></table></figure>
<p>再完善vue.config.js中的打包相关内容，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">pluginOptions</span>: &#123;</span><br><span class="line">        <span class="attr">electronBuilder</span>: &#123;</span><br><span class="line">            <span class="attr">mainProcessFile</span>: <span class="string">&#x27;src/main/index.js&#x27;</span>, <span class="comment">// 主进程入口文件</span></span><br><span class="line">            <span class="attr">rendererProcessFile</span>: <span class="string">&#x27;src/renderer/main.js&#x27;</span>, <span class="comment">// 渲染进程入口文件</span></span><br><span class="line">            <span class="attr">mainProcessWatch</span>: [<span class="string">&#x27;src/main&#x27;</span>], <span class="comment">// 检测主进程文件在更改时将重新编译主进程并重新启动</span></span><br><span class="line">            <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 打包配置</span></span><br><span class="line">            <span class="attr">builderOptions</span>: &#123;</span><br><span class="line">                <span class="comment">// 发布者名称</span></span><br><span class="line">                <span class="attr">productName</span>: <span class="string">&#x27;lenl&#x27;</span>,</span><br><span class="line">                <span class="comment">// 包名</span></span><br><span class="line">                <span class="attr">appId</span>: <span class="string">&#x27;cn.lenl.text&#x27;</span>,</span><br><span class="line">                <span class="attr">copyright</span>: <span class="string">&#x27;lenl copyright&#x27;</span>,</span><br><span class="line">                <span class="comment">// 更新的服务器</span></span><br><span class="line">                <span class="comment">// publish: [</span></span><br><span class="line">                <span class="comment">//     &#123;</span></span><br><span class="line">                <span class="comment">//         provider: &#x27;generic&#x27;,</span></span><br><span class="line">                <span class="comment">//         url: &#x27;http://127.0.0.1/app/&#x27;</span></span><br><span class="line">                <span class="comment">//     &#125;</span></span><br><span class="line">                <span class="comment">// ],</span></span><br><span class="line">                <span class="attr">asar</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="comment">// 不需要打包至asar中的文件如数据库文件,icons文件</span></span><br><span class="line">                <span class="comment">// extraResources: [</span></span><br><span class="line">                <span class="comment">//     &#123;</span></span><br><span class="line">                <span class="comment">//         from: &#x27;./data/db.db&#x27;,</span></span><br><span class="line">                <span class="comment">//         to: &#x27;../data/db.db&#x27;,</span></span><br><span class="line">                <span class="comment">//         filter: [&#x27;**/*&#x27;]</span></span><br><span class="line">                <span class="comment">//     &#125;, &#x27;./icons&#x27;],</span></span><br><span class="line">                <span class="attr">win</span>: &#123;</span><br><span class="line">                    <span class="comment">// 图标文件大小为 256*256</span></span><br><span class="line">                    <span class="attr">icon</span>: <span class="string">&#x27;./public/logo.ico&#x27;</span>,</span><br><span class="line">                    <span class="attr">target</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">target</span>: <span class="string">&#x27;nsis&#x27;</span>,</span><br><span class="line">                            <span class="attr">arch</span>: [</span><br><span class="line">                                <span class="comment">// &#x27;x64&#x27;,</span></span><br><span class="line">                                <span class="string">&#x27;ia32&#x27;</span></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    <span class="comment">// 打包权限 asInvoker | highestAvailable</span></span><br><span class="line">                    <span class="attr">requestedExecutionLevel</span>: <span class="string">&#x27;highestAvailable&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// 安装包名称，可自行配置</span></span><br><span class="line">                <span class="attr">artifactName</span>: <span class="string">&#x27;$&#123;productName&#125;_Setup_$&#123;version&#125;_$&#123;platform&#125;.$&#123;ext&#125;&#x27;</span>,</span><br><span class="line">                <span class="attr">nsis</span>: &#123;</span><br><span class="line">                    <span class="comment">// 一键安装，如果设为true，nsis设置就无意义请直接删除 nsis 配置</span></span><br><span class="line">                    <span class="attr">oneClick</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="comment">// true全用户安装【目录为：C:\Program Files (x86)】，false安装到当前用户</span></span><br><span class="line">                    <span class="attr">perMachine</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="comment">// 允许请求提升。 如果为false，则用户必须使用提升的权限重新启动安装程序。</span></span><br><span class="line">                    <span class="attr">allowElevation</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="comment">// 允许修改安装目录</span></span><br><span class="line">                    <span class="attr">allowToChangeInstallationDirectory</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="comment">// 创建桌面图标</span></span><br><span class="line">                    <span class="attr">createDesktopShortcut</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="comment">// 创建开始菜单图标</span></span><br><span class="line">                    <span class="attr">createStartMenuShortcut</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="comment">// 快捷方式的名称,默认为应用程序名称</span></span><br><span class="line">                    <span class="comment">// shortcutName: &#x27;HX&#x27;,</span></span><br><span class="line">                    <span class="comment">// 安装图标</span></span><br><span class="line">                    <span class="attr">installerIcon</span>: <span class="string">&#x27;./public/logo.ico&#x27;</span>,</span><br><span class="line">                    <span class="comment">// 卸载图标</span></span><br><span class="line">                    <span class="attr">uninstallerIcon</span>: <span class="string">&#x27;./public/logo.ico&#x27;</span>,</span><br><span class="line">                    <span class="comment">// 安装时头部图标</span></span><br><span class="line">                    <span class="attr">installerHeaderIcon</span>: <span class="string">&#x27;./public/logo.ico&#x27;</span>,</span><br><span class="line">                    <span class="comment">// 配置 nsn 如修改默认安装目录</span></span><br><span class="line">                    <span class="attr">include</span>: <span class="string">&#x27;./installer.nsh&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后运行 <code>npm run electron:build</code> 生成的exe文件就是可以选择安装路径的了。</p>
<p>这个过程中可能会报一些错，需要下载一些东西，详情参考这篇文章：<a href="https://blog.csdn.net/Gabriel_wei/article/details/92794291">nsis打包electron可能遇到的问题</a></p>
<p>需要注意的是，项目路径中不能含有中文，否则打包会失败。</p>
]]></content>
      <categories>
        <category>编程随记</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Electron</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB入门学习笔记</title>
    <url>/notes/mongoDB/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>什么是MongoDB?</p>
<p>一个以JSON为数据模型的的文档非关系型数据库。</p>
</li>
<li class="lvl-2">
<p>社么事非关系型数据库？</p>
<p>NoSQL，一种区分关系型数据库的数据存储方案，具有易扩展、大数据量、高性能、灵活数据模型、高可用等特点。</p>
</li>
<li class="lvl-2">
<p>为什么叫文档数据库？</p>
<p>文档来自于 <code>JSON Document</code> ，并不是我们理解的PDF、WORD文档。</p>
</li>
<li class="lvl-2">
<p>创造者？</p>
<p>美国上市公司MongoDB Inc。</p>
</li>
<li class="lvl-2">
<p>有哪些用途？</p>
<p>应用数据库，类似于Oracle、MySql，专注于海量数据处理，数据平台。</p>
</li>
<li class="lvl-2">
<p>有哪些特点？</p>
<p>建模灵活；json数据模型；横向扩展简单；大数据量存储；高并发。</p>
</li>
<li class="lvl-2">
<p>开源情况？</p>
<p>社区版：基于SSPL协议，开源； 企业版：基于商业协议，需要付费使用</p>
</li>
</ul>
<p><strong>MongoDB与关系型数据库的对比</strong>：</p>
<table>
<thead>
<tr>
<th>-</th>
<th>MongoDB</th>
<th>RDBMS</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据模型</td>
<td>文档类型（json）</td>
<td>关系模型（二维表）</td>
</tr>
<tr>
<td>数据库类型</td>
<td>OLTP</td>
<td>OLTP</td>
</tr>
<tr>
<td>CRUD操作</td>
<td>MQL</td>
<td>SQL</td>
</tr>
<tr>
<td>高可用</td>
<td>复制集</td>
<td>集群模式</td>
</tr>
<tr>
<td>横向扩展能力</td>
<td>通过原生分片完善支持</td>
<td>数据分区或者应用侵入式</td>
</tr>
<tr>
<td>索引支持</td>
<td>B-树、全文索引、地理位置索引、多建索引、TTL索引</td>
<td>B树</td>
</tr>
<tr>
<td>开发难度</td>
<td>容易</td>
<td>困难</td>
</tr>
<tr>
<td>数据容量</td>
<td>没有理论上限</td>
<td>千万、亿</td>
</tr>
<tr>
<td>扩展方式</td>
<td>垂直扩展+水平扩展</td>
<td>垂直扩展+水平扩展</td>
</tr>
</tbody>
</table>
<p><strong>MongoDB优势：</strong></p>
<ol>
<li class="lvl-3">
<p>建模简单而直观</p>
</li>
<li class="lvl-3">
<p>建模灵活可扩展</p>
</li>
<li class="lvl-3">
<p>API自然，快速开发</p>
</li>
<li class="lvl-3">
<p>原生的高可用与易扩展</p>
</li>
</ol>
<p><strong>MongoDB的使用场景</strong></p>
<ol>
<li class="lvl-3">
<p>应用不需要事务及复杂join支持</p>
</li>
<li class="lvl-3">
<p>新应用，需求i便，数据模型无法确定，想快读迭代开发</p>
</li>
<li class="lvl-3">
<p>应用需要2000-3000以上的读写QPS（更高也可以）</p>
</li>
<li class="lvl-3">
<p>应用需要TB甚至PB级别的数据存储</p>
</li>
<li class="lvl-3">
<p>应用发展迅速，需要能快速水平扩展</p>
</li>
<li class="lvl-3">
<p>应用要求存储的数据不丢失</p>
</li>
<li class="lvl-3">
<p>应用需要99.9999%高可用</p>
</li>
<li class="lvl-3">
<p>应用需要大量的地理位置查询、文本查询</p>
</li>
</ol>
<p><strong>不适用的场景</strong></p>
<ol>
<li class="lvl-3">
<p>对事务要求较高的系统，例如银行、财务、金融类等系统，MongoDB对事务的支持较弱；</p>
</li>
<li class="lvl-3">
<p>传统的对SQL要求较高的系统：特定问题的数据分析，多数据实体关联；</p>
</li>
<li class="lvl-3">
<p>涉及到复杂的、高度优化的查询方式；</p>
</li>
<li class="lvl-3">
<p>较为简单的系统，数据结构相对固定，使用sql查询统计更加便利的时候。</p>
</li>
</ol>
<p>**总结：**海量的、非敏感的，又要求一定查询性能的数据。（日志、评论等）</p>
]]></content>
      <categories>
        <category>学习经验</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>华为机试刷题相关笔记</title>
    <url>/notes/hwodNotes/</url>
    <content><![CDATA[<h3 id="获取输入的方式">获取输入的方式</h3>
<p>系统默认用的Scanner，但是看大佬们用的都是BufferedReader，因此改用此法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">rd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Integer.parse(rd.readLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当需要对输入的字符逐个判断时也可以直接用InputStream，如判断一个字符串末尾单词的长度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> System.in ;</span><br><span class="line"><span class="type">int</span> length=<span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">&#x27;\n&#x27;</span> != (c=(<span class="type">char</span>)inputStream.read()))&#123;</span><br><span class="line">    length ++ ;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(length);</span><br></pre></td></tr></table></figure>
<p>逐个读取单词的字符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> System.in;</span><br><span class="line"><span class="comment">// 可读取的总长度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">available</span> <span class="operator">=</span> in.available()-<span class="number">1</span>;</span><br><span class="line"><span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[available];</span><br><span class="line"><span class="keyword">while</span> (available-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    chars[available] = (<span class="type">char</span>) in.read();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了提高性能，还可以使用StreamTokenizer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StreamTokenizer</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamTokenizer</span>(<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in)));</span><br><span class="line">st.nextToken();</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> (<span class="type">int</span>)st.nval;</span><br><span class="line">st.nextToken();</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (<span class="type">int</span>)st.nval;</span><br></pre></td></tr></table></figure>
<h3 id="计算某字符出现次数">计算某字符出现次数</h3>
<p>大佬思路：接收字符串后转为小写，然后转为char数组；接收待判断字符时仍接收后转为小写并转为char数组，取用时获取第一个char字符即可。如此，判断时只需判断是否相等即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">char</span>[] chars1 = br.readLine().toLowerCase().toCharArray();</span><br><span class="line">        <span class="type">char</span>[] chars2 = br.readLine().toLowerCase().toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars1.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((chars1[i] == chars2[<span class="number">0</span>])) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="随机数去重加排序">随机数去重加排序</h3>
<p>给定1000个以内的1-500的随机数，要求去重并排序输出。</p>
<p>大佬思路：限定了随机数的数量和大小，可以指定一个大于数字最大值+1的boolean数组，将数字作为下标，将true插入数组对应位置，然后遍历数组将true的下标输入即可。</p>
<p>若需要考虑负数，做一些加减即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">rd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"><span class="comment">// 先输入数字的个数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Integer.parseInt(rd.readLine());</span><br><span class="line"><span class="comment">// 数字的大小在1-500</span></span><br><span class="line"><span class="type">boolean</span>[] bucket = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">501</span>];</span><br><span class="line"><span class="comment">// 将数字放入对应的bool数组下标位置达到去重效果</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> Integer.parseInt(rd.readLine());</span><br><span class="line">    bucket[val] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="comment">// 循环数组进行输出，达到排序效果</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">501</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(bucket[i])&#123;</span><br><span class="line">        sb.append(i);</span><br><span class="line">        sb.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sb.toString());</span><br></pre></td></tr></table></figure>
<h3 id="16进制字符串转10进制数字">16进制字符串转10进制数字</h3>
<p>需要注意的是如果这个16进制字符串前缀带了”0x“则需要去掉后再使用 <code>Integer.parseInt(字符串, 16)</code> 进行进制转换。</p>
<p>如果是十进制数转二进制字符串，可以通过 <code>Integer.toString(str, 2)</code> 进行转换。</p>
<h3 id="求一个整数的质数因子">求一个整数的质数因子</h3>
<p>思路：</p>
<p>整数为N，假设i从2开始递增到根号N，找到的第一个 <code>N%i==0</code> 的i为a1，首先a1一定是质数，因为a1是合数时2和a1之间一定存在其他N可以整除的质数，但是i是从2开始找到的第一个可以整除的数，因此i只能是质数，也就是说i是N最小的质因子。</p>
<p>然后进行N=N/i，继续从i开始除，直到无法整除则i+=1继续，最后将N本身算上。</p>
<p>举例：</p>
<p>N=34时，根号N约为5，从2开始整除得17，记录2，N=17；2无法整除17，往上直到5都无法整除，最后算上17自身，因此34的质数因子就是2，17。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">rd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(rd.readLine());</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="comment">// 只需要遍历2-num的平方根即可</span></span><br><span class="line"><span class="type">int</span> i=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=Math.sqrt(num))&#123;</span><br><span class="line">    <span class="keyword">if</span>(num%i==<span class="number">0</span>)&#123;</span><br><span class="line">        sb.append(i).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        num = num/i;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sb.append(num);</span><br><span class="line">sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">System.out.println(sb.toString());</span><br></pre></td></tr></table></figure>
<h3 id="动态规划问题">动态规划问题</h3>
<p>思想：将大的问题拆分成小的问题逐个去解决；大的问题需要依靠小的问题的结果来解决。</p>
<h4 id="以背包问题为例">以背包问题为例</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有N件物品和一个容量为V的背包，第i件物品的价值是C[i]，重量是W[i]，求解将哪些物品装入背包可使价值总和最大。</span><br></pre></td></tr></table></figure>
<p>假如有5件物品，容量为10，5件物品的重量和价值如图所示：</p>
<table>
<thead>
<tr>
<th>编号</th>
<th>价值</th>
<th>重量</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>8</td>
<td>6</td>
</tr>
<tr>
<td>2</td>
<td>10</td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td>4</td>
<td>2</td>
</tr>
<tr>
<td>4</td>
<td>5</td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td>5</td>
<td>3</td>
</tr>
</tbody>
</table>
<p>设物品价值f与件数、容量的函数关系为f(5,10)，那么可以往下分解为是否拿第五件物品，拿就是f(4,7)+5，不拿是f(4,10)；如果拿了5后，是否拿4再分为拿f(3,3)+10，不拿f(3,7)+5，拿了5，4，后拿3则为f(2,1)+14，，不拿为f(2,3)+10，这样推算，将所有结果推算出来，可以用一张表表示：</p>
<table>
<thead>
<tr>
<th>物品/容量</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1(8,6)</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>8</td>
<td>8</td>
<td>8</td>
<td>8</td>
<td>8</td>
</tr>
<tr>
<td>2(10,4)</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>10</td>
<td>10</td>
<td>10</td>
<td>10</td>
<td>10</td>
<td>10</td>
<td>18</td>
</tr>
<tr>
<td>3(4,2)</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>4</td>
<td>10</td>
<td>10</td>
<td>14</td>
<td>14</td>
<td>14</td>
<td>14</td>
<td>18</td>
</tr>
<tr>
<td>4(5,4)</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>4</td>
<td>4</td>
<td>4</td>
<td>14</td>
<td>14</td>
<td>15</td>
<td>15</td>
<td>18</td>
</tr>
<tr>
<td>5(5,3)</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>5</td>
<td>5</td>
<td>9</td>
<td>14</td>
<td>14</td>
<td>15</td>
<td>15</td>
<td>18</td>
</tr>
</tbody>
</table>
<p>以下是代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="comment">// 输入数量n</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 输入物品数量n</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="comment">// 输入背包的容量v</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="comment">// 存放物品价值的一维数组,n+1是因为要有0件物品的基准值做推算，0-n长度为n+1</span></span><br><span class="line">        <span class="type">int</span>[] values = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 存放物品重量的一维数组</span></span><br><span class="line">        <span class="type">int</span>[] weights = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 初始化一个存放结果的二维数组</span></span><br><span class="line">        <span class="type">int</span>[][] results = <span class="type">int</span>[n+<span class="number">1</span>][v+<span class="number">1</span>];</span><br><span class="line">       	<span class="comment">// 接收每个物品的重量和价值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            values[i] = sc.nextInt();</span><br><span class="line">            weights[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历物品</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="comment">// 遍历容量</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;u&lt;v+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="comment">// 如果当前物品重量大于背包容量</span></span><br><span class="line">                <span class="keyword">if</span>(j&lt;weights[i])&#123;</span><br><span class="line">                    <span class="comment">// 无法装入，舍弃该物品，价值同上一个物品的同容量处</span></span><br><span class="line">                    results[i][j] = results[i-<span class="number">1</span>][j];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 如果当前物品重量小于背包容量，要考虑比较装入或不装入的大小</span></span><br><span class="line">                    <span class="comment">// 装入的话，价值加上values[i]，但容量要减去weights[i]，即找到上一个物品数对应减去容量后的价值。</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">packed</span> <span class="operator">=</span> results[i-<span class="number">1</span>][j-weights[i]]+values[i];</span><br><span class="line">                    <span class="comment">// 不装入就是上一个物品数对应当前容量的价值</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">notPacked</span> <span class="operator">=</span> results[i-<span class="number">1</span>][j];</span><br><span class="line">                    results[i][j] = Math.max(unpacked,packed);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(result[n][v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他">其他</h3>
<p><code>HashMap</code> 与 <code>HashSet</code> 两种数据类型都是无序的，可以使用 <code>LinkedHashMap</code> 和 <code>LinkedHashSet</code> 保证输入的顺序，使用 <code>TreeMap</code> 和 <code>TreeSet</code> 保证元素自然的顺序。</p>
]]></content>
      <categories>
        <category>学习经验</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql压缩包方式本地安装</title>
    <url>/notes/mysqlInstall/</url>
    <content><![CDATA[<div class="note info simple"><p>在新的服务器中安装mysql发现每次都要搜教程，不如这里记录一下，供下次参考。</p>
</div>
<h2 id="1-准备安装压缩包">1 准备安装压缩包</h2>
<p>首先需要准备好压缩包，本人本地有一个 <code>8.0.20</code> 版本的常用压缩包，已上传至奶牛快传，可供下载：<a href="https://cowtransfer.com/s/bc3f761925b245">点击跳转</a> ，口令 evzis0 。</p>
<p>将压缩包放在服务器非中文路径下解压后，资源已经算准备完成。</p>
<h2 id="2-配置my-ini文件">2 配置my.ini文件</h2>
<p>在解压路径下新建一个<code>my.ini</code> 配置文件，复制一下代码进去，其中mysql目录要改成本地所对应的</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment">#设置3306端口</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=D:\mysql\mysql-<span class="number">8.0</span>.<span class="number">20</span>-winx64</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=D:\mysql\mysql-<span class="number">8.0</span>.<span class="number">20</span>-winx64\data</span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br></pre></td></tr></table></figure>
<h2 id="3-配置环境变量">3 配置环境变量</h2>
<p>新建系统变量 <code>MYSQL_HOME</code> , 值为mysql解压目录，即上文<code>ini</code>中的 <code>basedir</code> :  <code>D:\mysql\mysql-8.0.20-winx64</code>，然后在系统环境变量中找到<code>Path</code> ，新建如下变量 <code>%MYSQL_HOME%\bin</code></p>
<h2 id="4-启动Mysql">4 启动Mysql</h2>
<p>以管理员身份打开cmd命令窗口，执行如下命令初始化：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --console</span><br></pre></td></tr></table></figure>
<p>在打印的信息中记住初始密码。</p>
<p>接着执行安装命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld install</span><br></pre></td></tr></table></figure>
<p>启动mysql:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>这里记录一下遇到的一个问题，启动服务显示 “服务没有响应控制功能”，经过折腾，发现在Mysql服务点击属性-登录，用此用户登录，输入服务器管理员Administrator并输入对应密码即可。</p>
</div>
<p>登录并修改密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment"># 输入初始密码登录</span></span><br></pre></td></tr></table></figure>
<p>启动后修改密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>至此，mysql安装完成。</p>
<p>然后可以安装Dbeaver进行使用。</p>
]]></content>
      <categories>
        <category>学习经验</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot一些优雅的小技巧记录</title>
    <url>/notes/tips/</url>
    <content><![CDATA[<div class="note info simple"><p>本文为在开发一些项目时学习和实践用到的一些小技巧，在这里做一下记录，便于之后回顾。</p>
</div>
<h2 id="全局异常处理">全局异常处理</h2>
<div class="note info simple"><p>在以往的开发中，每个接口是自己进行异常处理，一方面需要大量的try-catch块来进行错误捕获，影响代码美观以及优雅度，增加许多负担，另一方面这种方式难以区分处理业务异常还是系统异常。</p>
<p>因此在catch块中向前端返回异常信息 <code>e.getMessage()</code> 的时候可能会得到一堆错误信息。全局异常处理能够解决这一问题。</p>
</div>
<p>一般会在项目下建一个 <code>exception</code> 包来存放自定义异常类，这个类可以名为BusinessException或LogicException。当然，项目复杂或有需要也可以自定义一系列异常类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义异常类 继承 运行时异常</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> https://github.com/liyupi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(<span class="type">int</span> code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(errorCode.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(ErrorCode errorCode, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处的ErrorCode为错误码定义，接口响应对象也有用到。下一个tip将记录响应对象的小技巧（来自b站鱼皮的sql-father项目）。</p>
<p>然后再定义一个全局异常处理器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> https://github.com/liyupi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> BaseResponse&lt;?&gt; businessExceptionHandler(BusinessException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;businessException: &quot;</span> + e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> ResultUtils.error(e.getCode(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="keyword">public</span> BaseResponse&lt;?&gt; runtimeExceptionHandler(RuntimeException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;runtimeException&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> ResultUtils.error(ErrorCode.SYSTEM_ERROR, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就能对自定义的不同异常做不同的处理了。而且controller中的接口方法不必再进行try-catch，直接抛出对应异常即可，此处会自动进行处理，既方便又优雅。</p>
<h2 id="接口响应类处理">接口响应类处理</h2>
<div class="note info simple"><p>响应类在RESTful风格的api接口开发中会大量用到，起初（接触SpringBoot）笔者定义一个字段为code、msg、data的返回类，并在每次返回时new一个对象，填写字段值进行返回。但是这种方法要额外写很多步骤，既不方便也不优雅。在此记录一下从b站鱼皮的sql-father项目中学到的相应类处理方式。</p>
</div>
<p>首先定义一个通用返回类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用返回类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> https://github.com/liyupi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseResponse</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//基本构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseResponse</span><span class="params">(<span class="type">int</span> code, T data, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无返回值构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseResponse</span><span class="params">(<span class="type">int</span> code, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(code, data, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ErrorCode对象构造,错误返回null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseResponse</span><span class="params">(ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(errorCode.getCode(), <span class="literal">null</span>, errorCode.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，ErrorCode为自定义的错误码枚举对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 错误码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> https://github.com/liyupi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ErrorCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="number">0</span>, <span class="string">&quot;ok&quot;</span>),</span><br><span class="line">    PARAMS_ERROR(<span class="number">40000</span>, <span class="string">&quot;请求参数错误&quot;</span>),</span><br><span class="line">    NOT_LOGIN_ERROR(<span class="number">40100</span>, <span class="string">&quot;未登录&quot;</span>),</span><br><span class="line">    NO_AUTH_ERROR(<span class="number">40101</span>, <span class="string">&quot;无权限&quot;</span>),</span><br><span class="line">    NOT_FOUND_ERROR(<span class="number">40400</span>, <span class="string">&quot;请求数据不存在&quot;</span>),</span><br><span class="line">    FORBIDDEN_ERROR(<span class="number">40300</span>, <span class="string">&quot;禁止访问&quot;</span>),</span><br><span class="line">    SYSTEM_ERROR(<span class="number">50000</span>, <span class="string">&quot;系统内部异常&quot;</span>),</span><br><span class="line">    OPERATION_ERROR(<span class="number">50001</span>, <span class="string">&quot;操作失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">    ErrorCode(<span class="type">int</span> code, String message) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后通过ResultUtil类自定义不同场景的静态方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> https://github.com/liyupi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; BaseResponse&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>&lt;&gt;(<span class="number">0</span>, data, <span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败响应1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BaseResponse <span class="title function_">error</span><span class="params">(ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>&lt;&gt;(errorCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败响应2</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BaseResponse <span class="title function_">error</span><span class="params">(<span class="type">int</span> code, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>(code, <span class="literal">null</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败响应3</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BaseResponse <span class="title function_">error</span><span class="params">(ErrorCode errorCode, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>(errorCode.getCode(), <span class="literal">null</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，在每个接口的响应返回处直接调用ResultUtil的静态方法即可。</p>
<h2 id="AOP实现登录判断">AOP实现登录判断</h2>
<div class="note info simple"><p>现实情况下，一些接口需要判断用户是否进行了登录，而一些接口不用，如果每次都在进入接口后对用户登录与否进行判断，是一件很麻烦的事情，就算写了工具类，也会有大量的接口的入参需要 <code>@RequestHeader String token</code> 。</p>
<p>这种情况可以采用AOP的方式解决，在需要判断登录的接口处添加注解即可。</p>
<p>注：AOP在需要标识或者接口前后做一些事情的时候非常适用。</p>
</div>
<p>首先，自定义需要登录标识注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lenl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-04-18 12:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>  约定：必须经过登录校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequiredLogin &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后添加自定义拦截器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lenl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-04-18 11:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 登录拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckLoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserinfoRedisService iUserinfoRedisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//放行静态资源或跨域请求</span></span><br><span class="line">        <span class="keyword">if</span>(!(handler <span class="keyword">instanceof</span> HandlerMethod))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//HandlerMethod 请求映射方法信息封装对象</span></span><br><span class="line">        <span class="comment">//springmvc将请求映射方法里面所有信息都封装(类名、方法名、方法参数、方法注解、返回值、映射路径等)</span></span><br><span class="line">        <span class="comment">//为了方便管理，使用类似map集合管理这些handlerMethod对象</span></span><br><span class="line">        <span class="comment">//key：请求映射方法路径  value：该路径对应请求映射方法信息封装对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取HandlerMethod对象</span></span><br><span class="line">        HandlerMethod handlerMethod=(HandlerMethod)handler;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断其头顶是否有RequiredMethod注解</span></span><br><span class="line">        <span class="keyword">if</span>(handlerMethod.hasMethodAnnotation(RequiredLogin.class))&#123;</span><br><span class="line">            <span class="comment">//这里默认token存redis</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">            <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> iUserinfoRedisService.getUserByToken(token);</span><br><span class="line">            <span class="keyword">if</span>(userInfo==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//使用响应流返回未登录信息</span></span><br><span class="line">                response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                response.getWriter().write(JSON.toJSONString(JsonResult.noLogin()));</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有则放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里可以对标识有自定义的注解的接口进行登录检测，此时在需要进行检测的接口上方加上对应注解即可。</p>
<p>这种方式比直接加拦截器，并配置方形的路径要高明一些。</p>
<div class="note warning simple"><p>如果接口中只有少数不需要登录而大多数需要登录，也可以更改为添加了注解的不必登录，没有该注解的则必须登录。</p>
<p>不过这一方式不利于项目的扩展，如集成Knife4j的话，文档需要访问api接口，这时会被拦截器拦下。</p>
</div>
<h2 id="自定义参数解析器">自定义参数解析器</h2>
<div class="note info simple"><p>有很多接口需要用到用户信息，但每次都获取用户信息或者使用工具类获取也会很麻烦，此时可以通过自定义参数解析器，将用户信息自动注入到入参中。</p>
</div>
<p>具体方式可以参照站内文章第三章： <a href="https://lienle.gitee.io/2023/04/20/notes/wolf2w/">wolf2w项目经验_缓存、持久化与参数解析器</a></p>
<h2 id="善用常量">善用常量</h2>
<ol>
<li class="lvl-3">
<p>在项目中将常会使用到一些常量，为了方便同一管理，最好拟定一个常量类，专门管理这些常量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lenl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-04-10 11:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 系统常量类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consts</span> &#123;</span><br><span class="line">    <span class="comment">//验证码有效时间</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">final</span> <span class="type">int</span> VERIFY_CODE_VAI_TIME=<span class="number">5</span>; <span class="comment">//单位 分钟</span></span><br><span class="line">    <span class="comment">//token 有效时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">int</span> USER_INFO_TOKEN_VAI_TIME=<span class="number">30</span>;<span class="comment">//单位 分钟</span></span><br><span class="line">	<span class="comment">//验证码前缀</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">final</span>  String VERIFY_CODE=<span class="string">&quot;verify_code&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>在一些domain或者叫entity实体类中常常会有一些用于标识状态或者类别的约定好的字段，适用 <code>Integer</code> 值来代表不同的状态或类型，但是在具体代码中直接使用数字会使可读性变低，且不好维护。此时可以在实体类定义出一些具有可读性静态变量，在对应地方使用这些变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Users</span> <span class="keyword">extends</span> <span class="title class_">BaseDoamin</span>&#123;</span><br><span class="line">    <span class="comment">//自定义静态常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> STATE_NORMAL=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> STATE_ABANDON=<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer name;</span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUsers</span><span class="params">()</span>&#123;</span><br><span class="line">    Users user=<span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    user.setState(Users.STATE_NORMAL);</span><br><span class="line">    <span class="built_in">super</span>.save(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>学习经验</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>wolf2w项目经验_站内搜索与接口安全</title>
    <url>/notes/wolf2w_2/</url>
    <content><![CDATA[<h1>wolf2w项目学习随记_2</h1>
<div class="note warning simple"><p>本随记为跟随B站视频<a href="https://www.bilibili.com/video/BV1re4y1e7rJ" title="旅游出行项目学习">2022版 Spring Boot+Vue前后端分离项目实战</a> 学习时随手记下的一些经验整理。以便在后续学习开发中遇到类似问题能够找到解答依据。</p>
</div>
<h2 id="使用ElasticSearch实现站内搜索">使用ElasticSearch实现站内搜索</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>官方网站：<a href="https://www.elastic.co/cn/elasticsearch/">Elasticsearch：官方分布式搜索和分析引擎 | Elastic</a></p>
</li>
<li class="lvl-2">
<p>中文文档：<a href="https://elasticsearch.bookhub.tech/">Elasticsearch 翻译说明 | Elasticsearch 中文文档 (bookhub.tech)</a></p>
</li>
</ul>
<div class="note warning simple"><p>为笔记方便，以下对 <code>Elasticsearch</code> 简称为 <code>es</code> 。</p>
</div>
<h3 id="1-数据初始化准备">1 数据初始化准备</h3>
<blockquote>
<p>具体初始化实现分析：</p>
<ol>
<li class="lvl-3">
<p>要初始化哪些数据？ --攻略-目的地-游记-用户；即需要进行搜索的数据</p>
</li>
<li class="lvl-3">
<p>怎么初始化数据？ --监听器-servlet/controller-&gt;因为避免每次启动都要初始化，选用controller。</p>
</li>
<li class="lvl-3">
<p>初始化的数据内容？-- 将mysql表中数据中参与条件搜索的列(条件列)和id主键，初始化到es中</p>
<p><em>es数据变动的维护成本很大，因此不建议将所有列初始化到es中</em></p>
</li>
<li class="lvl-3">
<p>后续搜索时，先搜索es得到满足条件的数据id，然后将数据id作为条件查询mysql。</p>
</li>
</ol>
</blockquote>
<h4 id="1-1-引入与配置">1.1 引入与配置</h4>
<p>引入es的maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在yml中设置对应的配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#elasticseatch配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">uris:</span> <span class="string">http://localhost:9200</span></span><br></pre></td></tr></table></figure>
<h4 id="1-2-创建es需要的对应的domain对象">1.2 创建es需要的对应的domain对象</h4>
<p>因为es初始化的数据为 <code>mysql表中数据中参与条件搜索的列(条件列)和id主键</code> ，因此domain对象也是这些字段即可。一个示例的domain对象如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;userinfo&quot;)</span> <span class="comment">//指定索引名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoEs</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//常量识别字段</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INDEX_NAME=<span class="string">&quot;userinfo&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//@Field 每个文档的字段配置（类型、是否分词、是否存储、分词器）</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Long)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="meta">@Field(analyzer = &quot;ik_max_word&quot;,searchAnalyzer = &quot;ik_max_word&quot;,type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于User信息，需要使用info和city字段进行检索，加上id主键，一共三个字段。</p>
<h4 id="1-3-生成对应的Repository">1.3 生成对应的Repository</h4>
<p>这一步一般继承 <code>ElasticsearchRepository</code> 即可，其中泛型第一个字段为domain对象，第二个为搜索类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserInfoEsRepository</span> <span class="keyword">extends</span> <span class="title class_">ElasticsearchRepository</span>&lt;UserInfoEs,String&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-4-生成对应的service和impl">1.4 生成对应的service和impl</h4>
<p>即类似于mysql和mongo的CRUD相关操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserInfoEsService</span> &#123;</span><br><span class="line">    <span class="comment">/** 添加</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> userInfoEs</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(UserInfoEs userInfoEs)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userInfoEs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(UserInfoEs userInfoEs)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查单个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UserInfoEs <span class="title function_">get</span><span class="params">(String id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;UserInfoEs&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的impl：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoEsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserInfoEsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserInfoEsRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(UserInfoEs userInfoEsEs)</span> &#123;</span><br><span class="line">        <span class="comment">//userInfoEsEs.setId(null);</span></span><br><span class="line">        repository.save(userInfoEsEs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(UserInfoEs userInfoEsEs)</span> &#123;</span><br><span class="line">        repository.save(userInfoEsEs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserInfoEs <span class="title function_">get</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> repository.findById(id).orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserInfoEs&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;UserInfoEs&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Iterable&lt;UserInfoEs&gt; all = repository.findAll();</span><br><span class="line">        all.forEach(a -&gt; list.add(a));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        repository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-安装es">2 安装es</h3>
<p>安装es遇到了一些坑，因此在这里记录一下。这里以当前的最新版本8.7.0为例。</p>
<p>详细安装入门可参考这篇 <a href="https://www.cnblogs.com/coderxz/p/13268417.html">保姆级教程</a></p>
<h4 id="2-1-下载安装es">2.1 下载安装es</h4>
<p>前往 <a href="https://www.elastic.co/cn/elasticsearch/">es官网</a> 下载7.17.6版本的压缩包，解压到本地后的目录如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin</span><br><span class="line">config</span><br><span class="line">jdk</span><br><span class="line">lib</span><br><span class="line">logs</span><br><span class="line">modules</span><br><span class="line">plugins</span><br></pre></td></tr></table></figure>
<p>打开bin目录，双击 <code>elasticsearch.bat</code> 初次启动，8以上版本的es可能默认开启了ssl，因此需要使用https以及用户密码进行访问。此时可以修改 <code>config/elasticsearch.yml</code> 中的配置项，关闭ssl：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Enable security features</span></span><br><span class="line"><span class="attr">xpack.security.enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># Enable encryption for HTTP API client connections, such as Kibana, Logstash, and Agents</span></span><br><span class="line"><span class="attr">xpack.security.http.ssl:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># Enable encryption and mutual authentication between cluster nodes</span></span><br><span class="line"><span class="attr">xpack.security.transport.ssl:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>如果打开yml文件发现没有上述配置，则需要初次启动一次bat才会生成这些。另外，可以加上支持跨域的一些配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使ES支持跨域请求</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>
<p>再次启动bat，访问<a href="http://localhost:9200/">localhost:9200</a> 能够得到一个json数据，即代表安装成功。</p>
<div class="note warning simple"><p>es启动后会自动为添加了注解的domain创建索引，除非手动指定 <code>createIndex=false</code></p>
</div>
<p>启动后如果出现一些其他报错，参考如下信息：</p>
<p><strong>问题1：内存直接占满</strong></p>
<p>此时你打开任务管理器，发现一个问题，ES启动后，占据了沙盒的全部内存。我的本机是32G的，启动也是直接打满，导致系统卡爆。因此我们需要配置启动内存，配置文件conf/jvm.options。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Xms1g</span><br><span class="line">-Xmx1g</span><br></pre></td></tr></table></figure>
<p><strong>问题2：二次启动报错</strong></p>
<p>修改配置文件后，再次启动，这时不会再次打印第一次启动时的配置信息了。但是报错了 “org.elasticsearch.ElasticsearchException: not all primary shards of [.geoip_databases] index are active” 。这是因为启动时会去更新地图的一些数据库，这里直接禁掉即可，用到时再说，配置文件onf/elasticsearch.yml，增加配置:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ingest.geoip.downloader.enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4 id="2-2-安装ik分词插件">2.2 安装ik分词插件</h4>
<p>es的许多功能需要额外安装插件，分词插件是很重要的插件。</p>
<p>前往 <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">ik下载地址</a> 下载zip压缩包，这里存在很多版本，ik版本与es的版本参照可查阅 <a href="https://github.com/medcl/elasticsearch-analysis-ik/blob/master/README.md">版本参照</a> 。</p>
<p>将zip解压后，会发现里层结构为 <code>config</code> 文件夹、一些jar包和一些配置文件。</p>
<p>在es的plugins文件夹下新建 <code>ik</code> 目录，将所解压的内容拷贝进去。</p>
<div class="note warning simple"><p>这里要注意，拷贝的是一系列jar包那一层，而不是直接解压后的含版本号的那个文件夹。</p>
</div>
<p>再次启动后，即可安装该插件。</p>
<h4 id="2-3-安装可视化插件">2.3 安装可视化插件</h4>
<div class="note info simple"><p>ElasticSearch不同于Solr自带图形化界面，我们可以通过安装ElasticSearch的head插件，完成图形化界面的效果，完成索引数据的查看。</p>
</div>
<p>下载地址： <a href="https://github.com/mobz/elasticsearch-head">head插件下载地址</a></p>
<p>根据文档，es5以上的head网站插件方式已不支持，需要 <code>Run as a standalone server</code> 。</p>
<p>elasticsearch-head插件是使用JavaScript开发的，依赖Node.js库，使用Grunt工具构建，所以要安装elasticsearch-head，还需要先安装Node.js和Grunt。</p>
<p><code>git clone</code> 源码后执行 <code>npm install</code> 安装依赖，安装完成后执行 <code>npm run start</code> 启动head插件，随后访问 <code>http://localhost:9100/</code> 即可。集群健康值如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>绿色：最健康的状态，代表所有的分片包括备份都可用</p>
</li>
<li class="lvl-2">
<p>黄色：基本的分片可用，但是备份不可用（也可能是没有备份）</p>
</li>
<li class="lvl-2">
<p>红色：部分的分片可用，表明分片有一部分损坏。此时执行查询部分数据仍然可以查到，遇到这种情况，还是赶快解决比较好</p>
</li>
<li class="lvl-2">
<p>灰色：未连接到elasticsearch服务</p>
</li>
</ul>
<p>当健康值为灰色时，可能是因为未配置跨域，需要添加2.2中所说的yml配置。</p>
<div class="note warning simple"><p><code>npm install</code> 后可能会遇到报错 <code>PhantomJS not found on PATH</code> 此时需要先执行 <code>npm install phantomjs@2.1.1 --ignore-scripts</code> 然后再install即可。</p>
</div>
<h3 id="3-数据维护">3 数据维护</h3>
<h4 id="3-1-首次初始化">3.1 首次初始化</h4>
<p>创建一个controller实现es的首次初始化，以后就不再进行初始化，而通过其他逻辑进行数据的增量更新。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserinfoService userinfoService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserInfoEsService userInfoEsService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//项目第一次启动执行，后面就不执行了</span></span><br><span class="line">    <span class="comment">//后续另外使用其他逻辑实现数据增量更新</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/dataInit&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dataInit</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//mysql ==&gt; es</span></span><br><span class="line"></span><br><span class="line">        List&lt;UserInfo&gt; us = userinfoService.list();</span><br><span class="line">        <span class="keyword">for</span> (UserInfo u : us) &#123;</span><br><span class="line">            <span class="type">UserInfoEs</span> <span class="variable">userInfoEs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInfoEs</span>();</span><br><span class="line">            BeanUtils.copyProperties(u,userInfoEs);</span><br><span class="line">            userInfoEsService.save(userInfoEs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务跑起来后直接访问该接口，将数据初始化到es中。通过可视化插件可以查看到详情。</p>
<h4 id="3-2-mysql与es数据同步">3.2 mysql与es数据同步</h4>
<blockquote>
<p>当mysql中数据发生改动时，es中是没法同步更新的，需要进行数据同步。</p>
</blockquote>
<p>可选方案：</p>
<ol>
<li class="lvl-3">
<p>在更动接口实现es同步更新–不建议，耗时+事务问题+单一责任原则</p>
</li>
<li class="lvl-3">
<p>使用异步方式进行es数据同步：使用spring的自定义事件。</p>
<ul class="lvl-2">
<li class="lvl-5">自定义一个mysql数据更新事件；</li>
<li class="lvl-5">一旦代码中发生了数据更新，马上触发该事件；</li>
<li class="lvl-5">定义一个spring监听器，监听该事件，一旦事件触发，马上执行es数据同步逻辑。</li>
</ul>
</li>
</ol>
<p>监听器在redis的数据初始化有涉及。自定义事件的实现方式可以参照文章：<a href="https://blog.csdn.net/C_AJing/article/details/109803124">自定义事件发布与监听</a></p>
<ol start="3">
<li class="lvl-3">
<p>使用消息中间件-最佳方式。</p>
<ul class="lvl-2">
<li class="lvl-5">mysql更新成功之后，往消息队列中推送一条数据；</li>
<li class="lvl-5">消息队列接收后在es中进行数据同步更新。</li>
</ul>
</li>
<li class="lvl-3">
<p>使用第三方数据同步组件：canal</p>
</li>
</ol>
<h3 id="4-全文检索实现">4 全文检索实现</h3>
<p>为了实现全文索引并将检索词高亮显示，定义一个Service进行高亮查询：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 全文搜索 + 高亮显示</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> clz ES类型</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> qo 查询对象</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> fields 检索域</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &lt;T&gt; 泛型展位</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 带有分页的全文搜索(高亮显示)结果集</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&lt;T&gt; Page&lt;T&gt;  <span class="title function_">searchWithHighlight</span><span class="params">(String index, Class&lt;T&gt; clz, SearchQueryObject qo, String... fields)</span>;</span><br></pre></td></tr></table></figure>
<p>实现这个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> ElasticsearchRestTemplate template;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关键字: keyword = 广州</span></span><br><span class="line"><span class="comment">//以title为例:</span></span><br><span class="line"><span class="comment">//原始匹配: &quot;有娃必看,广州长隆野生动物园全攻略&quot;</span></span><br><span class="line"><span class="comment">//高亮显示后:&quot;有娃必看,&lt;span style=&quot;color:red;&quot;&gt;广州&lt;/span&gt;长隆野生动物园全攻略&quot;</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">searchWithHighlight</span><span class="params">(String index, Class&lt;T&gt; clz, SearchQueryObject qo, String... fields)</span> &#123;</span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(index);</span><br><span class="line">    <span class="type">SearchSourceBuilder</span> <span class="variable">searchSourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">    <span class="comment">//高亮显示</span></span><br><span class="line">    <span class="comment">/*&quot;query&quot;:&#123;</span></span><br><span class="line"><span class="comment">            &quot;multi_match&quot;: &#123;</span></span><br><span class="line"><span class="comment">                &quot;query&quot;: &quot;广州&quot;,</span></span><br><span class="line"><span class="comment">                &quot;fields&quot;: [&quot;title&quot;,&quot;subTitle&quot;,&quot;summary&quot;]</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;,*/</span></span><br><span class="line">    <span class="type">MultiMatchQueryBuilder</span> <span class="variable">queryBuilder</span> <span class="operator">=</span> QueryBuilders.multiMatchQuery(qo.getKeyword(),fields);</span><br><span class="line">    <span class="type">HighlightBuilder</span> <span class="variable">highlightBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>(); <span class="comment">// 生成高亮查询器</span></span><br><span class="line">    <span class="keyword">for</span> (String field: fields) &#123;</span><br><span class="line">        highlightBuilder.field(field);<span class="comment">// 高亮查询字段</span></span><br><span class="line">    &#125;</span><br><span class="line">    highlightBuilder.requireFieldMatch(<span class="literal">false</span>); <span class="comment">// 如果要多个字段高亮,这项要为false</span></span><br><span class="line">    highlightBuilder.preTags(<span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>); <span class="comment">// 高亮设置</span></span><br><span class="line">    highlightBuilder.postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line">    highlightBuilder.fragmentSize(<span class="number">800000</span>); <span class="comment">// 最大高亮分片数</span></span><br><span class="line">    highlightBuilder.numOfFragments(<span class="number">0</span>); <span class="comment">// 从第一个分片获取高亮片段</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         &quot;from&quot;: 0,</span></span><br><span class="line"><span class="comment">         &quot;size&quot;:3,</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="type">Pageable</span> <span class="variable">pageable</span> <span class="operator">=</span> PageRequest.of(qo.getCurrentPage() - <span class="number">1</span>, qo.getPageSize(),</span><br><span class="line">                                       Sort.Direction.ASC, <span class="string">&quot;_id&quot;</span>);<span class="comment">// 设置分页参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">NativeSearchQuery</span> <span class="variable">searchQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NativeSearchQueryBuilder</span>()</span><br><span class="line">        .withQuery(queryBuilder) <span class="comment">// match查询</span></span><br><span class="line">        .withHighlightBuilder(highlightBuilder) <span class="comment">// 设置高亮</span></span><br><span class="line"></span><br><span class="line">        .withPageable(pageable)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    SearchHits&lt;T&gt; searchHits = template.search(searchQuery, clz,IndexCoordinates.of(index));</span><br><span class="line">    List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit&lt;T&gt; searchHit : searchHits) &#123; <span class="comment">// 获取搜索到的数据</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">content</span> <span class="operator">=</span> <span class="built_in">this</span>.parseType(clz, searchHit.getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理高亮</span></span><br><span class="line">        Map&lt;String, String&gt; map = highlightFieldsCopy(searchHit.getHighlightFields(), fields);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1：spring 框架中BeanUtils 类，如果是map集合是无法进行属性复制</span></span><br><span class="line">        <span class="comment">//   copyProperties(源， 目标)</span></span><br><span class="line">        <span class="comment">//2: apache  BeanUtils 类 可以进map集合属性复制</span></span><br><span class="line">        <span class="comment">//   copyProperties(目标， 源)</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.copyProperties(content, map);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(content);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Page</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageImpl</span>(list, pageable, searchHits.getTotalHits());</span><br><span class="line">    <span class="keyword">return</span>  page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断类型并填充数据</span></span><br><span class="line"><span class="comment">//这里是将ES domain类型转换为 mysql domain类型，因为前端需要展示查询字段以外的信息。</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; T <span class="title function_">parseType</span><span class="params">(Class&lt;T&gt; clz, String id)</span>&#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">lId</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.hasLength(id))&#123;</span><br><span class="line">        lId = Long.valueOf(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(clz == UserInfo.class)&#123;</span><br><span class="line">        t = (T) userInfoService.getById(lId);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(clz == Travel.class)&#123;</span><br><span class="line">        t = (T) travelService.getById(lId);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(clz == Strategy.class)&#123;</span><br><span class="line">        t = (T) strategyService.getById(lId);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(clz == Destination.class)&#123;</span><br><span class="line">        t = (T) destinationService.getById(lId);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        t= <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//fields: title subTitle summary</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt;   <span class="title function_">highlightFieldsCopy</span><span class="params">(Map&lt;String, List&lt;String&gt;&gt; map, String ...fields)</span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; mm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//title:  &quot;有娃必看，&lt;span style=&#x27;color:red;&#x27;&gt;广州&lt;/span&gt;长隆野生动物园全攻略&quot;</span></span><br><span class="line">    <span class="comment">//subTitle: &quot;&lt;span style=&#x27;color:red;&#x27;&gt;广州&lt;/span&gt;长隆野生动物园&quot;</span></span><br><span class="line">    <span class="comment">//summary: &quot;如果要说动物园，楼主强烈推荐带娃去&lt;span style=&#x27;color:red;&#x27;&gt;广州&lt;/span&gt;长隆野生动物园</span></span><br><span class="line">    <span class="comment">//title subTitle summary</span></span><br><span class="line">    <span class="keyword">for</span> (String field : fields) &#123;</span><br><span class="line">        List&lt;String&gt; hfs = map.get(field);</span><br><span class="line">        <span class="keyword">if</span> (hfs != <span class="literal">null</span> &amp;&amp; !hfs.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//获取高亮显示字段值, 因为是一个数组, 所有使用string拼接</span></span><br><span class="line"></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (String hf : hfs) &#123;</span><br><span class="line">                sb.append(hf);</span><br><span class="line">            &#125;</span><br><span class="line">            mm.put(field, sb.toString());  <span class="comment">//使用map对象将所有能替换字段先缓存, 后续统一替换</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>于是，在Controller中就能够通过它实现全站检索：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SearchController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DestinationService destinationService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ITravelService travelService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StrategyService strategyService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserinfoService userinfoService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ISearchService searchService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/q&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">search</span><span class="params">(SearchQueryObject qo)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="comment">//解码url中文参数</span></span><br><span class="line">        qo.setKeyword(URLDecoder.decode(qo.getKeyword(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//判断检索的类型，返回指定的检索结果</span></span><br><span class="line">        <span class="keyword">switch</span>(qo.getType())&#123;</span><br><span class="line">            <span class="keyword">case</span> SearchQueryObject.TYPE_DEST:<span class="keyword">return</span> <span class="built_in">this</span>.searchDest(qo);</span><br><span class="line">            <span class="keyword">case</span> SearchQueryObject.TYPE_STRATEGY:<span class="keyword">return</span> <span class="built_in">this</span>.searchStrategy(qo);</span><br><span class="line">            <span class="keyword">case</span> SearchQueryObject.TYPE_TRAVEL:<span class="keyword">return</span> <span class="built_in">this</span>.searchTravel(qo);</span><br><span class="line">            <span class="keyword">case</span> SearchQueryObject.TYPE_USER:<span class="keyword">return</span> <span class="built_in">this</span>.searchUser(qo);</span><br><span class="line">            <span class="keyword">default</span>:<span class="keyword">return</span> <span class="built_in">this</span>.searchAll(qo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//检索所有</span></span><br><span class="line">    <span class="keyword">private</span> JsonResult <span class="title function_">searchAll</span><span class="params">(SearchQueryObject qo)</span> &#123;</span><br><span class="line">        SearchResultVo vo=<span class="keyword">new</span> <span class="title class_">SearchResultVo</span>();</span><br><span class="line">        <span class="comment">//dest</span></span><br><span class="line">        Page&lt;Destination&gt; ds = searchService.searchWithHighlight(DestinationEs.INDEX_NAME, Destination.class, qo, <span class="string">&quot;name&quot;</span>,<span class="string">&quot;info&quot;</span>);</span><br><span class="line">        vo.setDests(ds.getContent());</span><br><span class="line">        <span class="comment">//游记</span></span><br><span class="line">        Page&lt;Travel&gt; ts = searchService.searchWithHighlight(TravelEs.INDEX_NAME, Travel.class, qo, <span class="string">&quot;title&quot;</span>,  <span class="string">&quot;summary&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Travel travel:ts)&#123;</span><br><span class="line">            travel.setAuthor(userinfoService.getById(travel.getAuthorId()));</span><br><span class="line">        &#125;</span><br><span class="line">        vo.setTravels(ts.getContent());</span><br><span class="line">        <span class="comment">//攻略</span></span><br><span class="line">        Page&lt;Strategy&gt; sts = searchService.searchWithHighlight(StrategyEs.INDEX_NAME, Strategy.class, qo, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;subTitle&quot;</span>, <span class="string">&quot;summary&quot;</span>);</span><br><span class="line">        vo.setStrategys(sts.getContent());</span><br><span class="line">        <span class="comment">//用户</span></span><br><span class="line">        Page&lt;UserInfo&gt; us = searchService.searchWithHighlight(UserInfoEs.INDEX_NAME, UserInfo.class, qo, <span class="string">&quot;info&quot;</span>, <span class="string">&quot;city&quot;</span>);</span><br><span class="line">        vo.setUsers(us.getContent());</span><br><span class="line">        <span class="comment">//总数</span></span><br><span class="line">        vo.setTotal(ds.getTotalElements()+ts.getTotalElements()+sts.getTotalElements()+us.getTotalElements());</span><br><span class="line">        <span class="keyword">return</span> JsonResult.success(ParamMap.newInstance().put(<span class="string">&quot;result&quot;</span>,vo).put(<span class="string">&quot;qo&quot;</span>,qo));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//检索用户</span></span><br><span class="line">    <span class="keyword">private</span> JsonResult <span class="title function_">searchUser</span><span class="params">(SearchQueryObject qo)</span> &#123;</span><br><span class="line">        <span class="comment">//用户的全文搜索 + 高亮显示</span></span><br><span class="line">        Page&lt;UserInfo&gt; page = searchService.searchWithHighlight(UserInfoEs.INDEX_NAME, UserInfo.class, qo, <span class="string">&quot;info&quot;</span>, <span class="string">&quot;city&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.success(ParamMap.newInstance().put(<span class="string">&quot;page&quot;</span>,page).put(<span class="string">&quot;qo&quot;</span>,qo));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//检索游记</span></span><br><span class="line">    <span class="keyword">private</span> JsonResult <span class="title function_">searchTravel</span><span class="params">(SearchQueryObject qo)</span> &#123;</span><br><span class="line">        <span class="comment">//游记的全文搜索 + 高亮显示</span></span><br><span class="line">        Page&lt;Travel&gt; page = searchService.searchWithHighlight(TravelEs.INDEX_NAME, Travel.class, qo, <span class="string">&quot;title&quot;</span>,  <span class="string">&quot;summary&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Travel travel:page)&#123;</span><br><span class="line">            travel.setAuthor(userinfoService.getById(travel.getAuthorId()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JsonResult.success(ParamMap.newInstance().put(<span class="string">&quot;page&quot;</span>,page).put(<span class="string">&quot;qo&quot;</span>,qo));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//检索攻略</span></span><br><span class="line">    <span class="keyword">private</span> JsonResult <span class="title function_">searchStrategy</span><span class="params">(SearchQueryObject qo)</span> &#123;</span><br><span class="line">        <span class="comment">//攻略的全文搜索 + 高亮显示</span></span><br><span class="line">        Page&lt;Strategy&gt; page = searchService.searchWithHighlight(StrategyEs.INDEX_NAME, Strategy.class, qo, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;subTitle&quot;</span>, <span class="string">&quot;summary&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.success(ParamMap.newInstance().put(<span class="string">&quot;page&quot;</span>,page).put(<span class="string">&quot;qo&quot;</span>,qo));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//检索目的地</span></span><br><span class="line">    <span class="keyword">private</span> JsonResult <span class="title function_">searchDest</span><span class="params">(SearchQueryObject qo)</span> &#123;</span><br><span class="line">        <span class="comment">//通过keyword查询目的地</span></span><br><span class="line">        Destination dest=destinationService.queryByName(qo.getKeyword());</span><br><span class="line">        SearchResultVo rs=<span class="keyword">new</span> <span class="title class_">SearchResultVo</span>();</span><br><span class="line">        <span class="comment">//判断目的地是否存在 如果存在，查询目的地下所有的攻略、游记、用户</span></span><br><span class="line">        <span class="keyword">if</span>(dest!=<span class="literal">null</span>)&#123;</span><br><span class="line">           List&lt;Travel&gt; ts= travelService.queryByDestId(dest.getId());</span><br><span class="line">           List&lt;Strategy&gt; sts=strategyService.queryByDestId(dest.getId());</span><br><span class="line">           List&lt;UserInfo&gt; us=userinfoService.queryByCity(dest.getName());</span><br><span class="line"></span><br><span class="line">           rs.setUsers(us);</span><br><span class="line">           rs.setStrategys(sts);</span><br><span class="line">           rs.setTravels(ts);</span><br><span class="line">           rs.setTotal(ts.size()+sts.size()+us.size()+<span class="number">0L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JsonResult.success(ParamMap.newInstance().put(<span class="string">&quot;result&quot;</span>,rs).put(<span class="string">&quot;dest&quot;</span>,dest).put(<span class="string">&quot;qo&quot;</span>,qo));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="接口文档与安全">接口文档与安全</h2>
<div class="note info simple"><p>接口文档与安全问题一般出现在前后端分离项目中。</p>
<p>前后端分离的好处：责任分离</p>
<p>前端：负责页面开发与页面交互-web工程师</p>
<p>后端：负责业务接口开发，java后端工程师</p>
</div>
<h3 id="接口文档">接口文档</h3>
<h4 id="前言">前言</h4>
<p><strong>需求会议：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前端工程师：开发页面----|</span><br><span class="line"></span><br><span class="line">					|-----(一定进度后)联合调试----|</span><br><span class="line"></span><br><span class="line">后端工程师：开发接口----|                         |</span><br><span class="line"></span><br><span class="line">测试工程师：测试案例------------------------------|----封版----上线</span><br></pre></td></tr></table></figure>
<p><em>此时前后端的联合开发、调试就需要接口文档</em></p>
<h4 id="swagger2使用">swagger2使用</h4>
<p>首先，引入swagger2的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后新建swagger2包，新建SwaggerConfig类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">productApi</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加head参数start</span></span><br><span class="line">        <span class="type">ParameterBuilder</span> <span class="variable">tokenPar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParameterBuilder</span>();</span><br><span class="line">        List&lt;Parameter&gt; pars = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Parameter&gt;();</span><br><span class="line">        tokenPar.name(<span class="string">&quot;token&quot;</span>).description(<span class="string">&quot;令牌&quot;</span>).modelRef(<span class="keyword">new</span> <span class="title class_">ModelRef</span>(<span class="string">&quot;string&quot;</span>)).parameterType(<span class="string">&quot;header&quot;</span>).required(<span class="literal">false</span>).build();</span><br><span class="line">        pars.add(tokenPar.build());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//controller的包路径名称</span></span><br><span class="line">        String packageRoute=<span class="string">&quot;cn.wolfcode.wolf2w.controller&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).select()</span><br><span class="line">                <span class="comment">// 扫描的包路径</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(packageRoute))</span><br><span class="line">                <span class="comment">// 定义要生成文档的Api的url路径规则</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .globalOperationParameters(pars)</span><br><span class="line">                <span class="comment">// 设置swagger-ui.html页面上的一些元素信息。</span></span><br><span class="line">                .apiInfo(metaData());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">metaData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                <span class="comment">// 标题</span></span><br><span class="line">                .title(<span class="string">&quot;SpringBoot集成Swagger2&quot;</span>)</span><br><span class="line">                <span class="comment">// 描述</span></span><br><span class="line">                .description(<span class="string">&quot;狼行天下项目接口文档&quot;</span>)</span><br><span class="line">                <span class="comment">// 文档版本</span></span><br><span class="line">                .version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">                .license(<span class="string">&quot;Apache License Version 2.0&quot;</span>)</span><br><span class="line">                .licenseUrl(<span class="string">&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//ui页面</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;swagger-ui.html&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动后如果出现 <code>Failed to start bean 'documentationPluginsBootstrapper'</code> 错误，需要在 <code>application.yml</code> 中进行如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">pathmatch:</span></span><br><span class="line">      <span class="attr">matching-strategy:</span> <span class="string">ant_path_matcher</span></span><br></pre></td></tr></table></figure>
<p>再次启动后，访问 <code>http://localhost:port/swagger-ui.html</code> 即可查看和接口文档</p>
<p>接口文档为英文且缺少说明文字，可以添加一些注解帮助生成的文档更加详细：</p>
<ol>
<li class="lvl-3">
<p>关于控制器的说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(value = &quot;用户资源&quot;,tags = &quot;用户控制器&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>关于接口方法的说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;账号检测&quot;,notes=&quot;查看当前电话是否已经注册&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/checkPhone&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">checkPhone</span><span class="params">(String phone)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> ret=userinfoService.checkPhone(phone);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>关于接口方法请求参数的说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;账号检测&quot;,notes=&quot;查看当前电话是否已经注册&quot;)</span></span><br><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta"> 	@ApiImplicitParam(value = &quot;手机号&quot;,name=&quot;phone&quot;,dataType = &quot;String&quot;,required = true), //这里可以添加多个，用逗号隔开</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/checkPhone&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">checkPhone</span><span class="params">(String phone)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> ret=userinfoService.checkPhone(phone);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>关于响应的说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/currentUser&quot;)</span></span><br><span class="line"><span class="meta">@ApiResponse(code = 200,message = &quot;获取当前用户成功&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult <span class="title function_">getCurrentUser</span><span class="params">(<span class="meta">@UserParam</span> UserInfo user)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> JsonResult.success(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>当请求参数为对象时，可以直接在对应参数上添加说明注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 游记查询参数封装对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ApiModel(value=&quot;游记查询&quot;,description=&quot;游记查询参数&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TravelQuery</span> <span class="keyword">extends</span>  <span class="title class_">QueryObject</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long destId;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;天数类型&quot;,name=&quot;dayType&quot;,dataType=&quot;Integer&quot;,requird=true)</span></span><br><span class="line">    <span class="keyword">private</span> Integer dayType;</span><br><span class="line">    <span class="keyword">private</span> Integer travelTimeType;</span><br><span class="line">    <span class="keyword">private</span> Integer consumeType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<div class="note warning simple"><p>但是个人认为swagger的接口文档很丑且不好查阅。而swagger+Knife4j似乎体验更佳，因此之后会再开一个坑来专门学习Knife4j。</p>
</div>
<h3 id="接口安全">接口安全</h3>
<div class="note info simple"><p>接口安全要求：</p>
<ol>
<li class="lvl-3">防伪装攻击（如在公共网络中，第三方恶意调用接口）：接口防刷</li>
<li class="lvl-3">防篡改攻击（如在公共网络环境中，请求头/查询字符/内容 在传输过程中被修改）：接口防篡改（签名机制）</li>
<li class="lvl-3">防重放攻击（如在公共网络中，请求被截获，稍后被重放或多次重放）：接口时效性</li>
<li class="lvl-3">防数据信息泄漏（案例：截获用户登录请求，截获到账号、密码等）：接口加密（https/对称加解密）</li>
</ol>
</div>
<h4 id="接口防刷">接口防刷</h4>
<p><strong>问题描述</strong>：不法分子超频访问某个接口，导致接口超频使用，影响正常请求处理，导致系统异常。此时需要对超频请求进行限制。</p>
<p>**核心：**如何定义超频访问。如限制10次/分钟，超过后算超频。</p>
<p>**注意：**计数器的key值需要以客户端和接口作为识别键，客户端使用ip，接口采用接口路径。 前缀:ip:url – value</p>
<p>**选择：**使用redis进行计数：快+时效需求；要在请求进入前处理，因此需要使用filter或interceptor实现。此处选择interceptor。</p>
<p><strong>思路：</strong></p>
<ol>
<li class="lvl-3">
<p>设计一个redis临时key，有效时间1分钟，1分钟内只允许访问10次。</p>
<p>key &gt; 前缀:url:ip</p>
<p>value &gt; 访问的次数</p>
</li>
<li class="lvl-3">
<p>设置拦截器，拦截需要防刷的接口url</p>
</li>
<li class="lvl-3">
<p>拦截逻辑：</p>
<ul class="lvl-2">
<li class="lvl-5">拦截url，拼接key查询redis中是否存在</li>
<li class="lvl-5">如果不存在 setnx url:ip 10</li>
<li class="lvl-5">如果存在 derc url:ip</li>
<li class="lvl-5">如果次数减到0，拦截返回，请勿频繁访问</li>
<li class="lvl-5">其他情况放行</li>
</ul>
</li>
</ol>
<p><strong>实现：</strong></p>
<p>首先，定义一个接口防刷拦截器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lenl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-05-02 10:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 防刷拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BrushProofInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ISecurityRedisService securityRedisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(!(handler <span class="keyword">instanceof</span> HandlerMethod))&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//防刷验证</span></span><br><span class="line">        String url=request.getRequestURI().substring(<span class="number">1</span>);</span><br><span class="line">        String ip= RequestUtil.getIPAddress();</span><br><span class="line"></span><br><span class="line">        String key= RedisKeys.BRUSH_PROOF.join(url,ip);</span><br><span class="line">        <span class="keyword">if</span>(!securityRedisService.isAllowBrush(key))&#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;text/json;charset=UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(JsonResult.error(<span class="number">500</span>,<span class="string">&quot;请勿频繁操作！&quot;</span>,<span class="literal">null</span>)));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里用到了自定义的一些工具类，如下：</p>
<p>RequestUtil.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getIPAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest(); ;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//X-Forwarded-For：Squid 服务代理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ipAddresses</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;X-Forwarded-For&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (ipAddresses == <span class="literal">null</span> || ipAddresses.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ipAddresses)) &#123;</span><br><span class="line">            <span class="comment">//Proxy-Client-IP：apache 服务代理</span></span><br><span class="line">            ipAddresses = request.getHeader(<span class="string">&quot;Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ipAddresses == <span class="literal">null</span> || ipAddresses.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ipAddresses)) &#123;</span><br><span class="line">            <span class="comment">//WL-Proxy-Client-IP：weblogic 服务代理</span></span><br><span class="line">            ipAddresses = request.getHeader(<span class="string">&quot;WL-Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ipAddresses == <span class="literal">null</span> || ipAddresses.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ipAddresses)) &#123;</span><br><span class="line">            <span class="comment">//HTTP_CLIENT_IP：有些代理服务器</span></span><br><span class="line">            ipAddresses = request.getHeader(<span class="string">&quot;HTTP_CLIENT_IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ipAddresses == <span class="literal">null</span> || ipAddresses.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ipAddresses)) &#123;</span><br><span class="line">            <span class="comment">//X-Real-IP：nginx服务代理</span></span><br><span class="line">            ipAddresses = request.getHeader(<span class="string">&quot;X-Real-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//有些网络通过多层代理，那么获取到的ip就会有多个，一般都是通过逗号（,）分割开来，并且第一个ip为客户端的真实IP</span></span><br><span class="line">        <span class="keyword">if</span> (ipAddresses != <span class="literal">null</span> &amp;&amp; ipAddresses.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            ip = ipAddresses.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//还是不能获取到，最后再通过request.getRemoteAddr();获取</span></span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ipAddresses)) &#123;</span><br><span class="line">            ip = request.getRemoteAddr();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SecurityRedisService的isAllowBrush：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityRedisServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ISecurityRedisService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate template;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAllowBrush</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">//如果没有则添加</span></span><br><span class="line">        template.opsForValue().setIfAbsent(key,<span class="string">&quot;10&quot;</span>, RedisKeys.BRUSH_PROOF.getTime(), TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//数量 -1</span></span><br><span class="line">        Long decrement=template.opsForValue().decrement(key);</span><br><span class="line">        <span class="keyword">return</span> decrement&gt;=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于RedisKeys是redis key的一些生成工具，可参照前面的关于Redis的笔记。</p>
<p>拦截器建成之后，在Config中添加并配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span>  <span class="title class_">WebMvcConfigurer</span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BrushProofInterceptor <span class="title function_">brushProofInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BrushProofInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//添加防刷拦截器</span></span><br><span class="line">        registry.addInterceptor(brushProofInterceptor())</span><br><span class="line">            <span class="comment">//所有的请求路径都进行拦截</span></span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次访问接口时，频繁刷新到达10次则会禁止，具体数目可自行设置。</p>
<h4 id="接口防篡改">接口防篡改</h4>
<p>**问题描述：**正常请求被不法分子拦截，并篡改其中的请求参数，然后伪装成正常请求发送到服务端，服务端无法识别而当成正常请求处理导致不合法事情发生，此时需要进行防护。</p>
<p>**核心：**服务端如何识别参数已经被篡改：最优解为签名机制。</p>
<p>**签名机制：**客户端在发起请求之前们将所有的参数按照一定的规则拼接成字符串，然后对字符串进行加密得到一个密文（签名）：client_sign；客户端将所有参数与签名以期发送到服务端；服务端接收到参数与签名，使用相同算法对数据进行签名；比对签名如果一致，则数据没有被篡改，反之则已经被篡改。</p>
<p><strong>思路：</strong></p>
<ol>
<li class="lvl-3">
<p>前端传参时，对参数的名进行字典排序，然后按照参数名的属性对参数值进行有序拼接</p>
<p>如：</p>
<p>参数列表：c-参数1，f-参数2，a-参数3，b-参数4；</p>
<p>参数排名：a b c f</p>
<p>参数值拼接：a-参数3&amp;b-参数4&amp;c-参数1&amp;f-参数2</p>
</li>
<li class="lvl-3">
<p>使用MD5对拼接参数值串进行加密得到参数签名sign_client</p>
</li>
<li class="lvl-3">
<p>将所有参数与sign一同发送到后端</p>
</li>
<li class="lvl-3">
<p>后端获取到所有参数，按照相同的逻辑，MD5加密得到sign_server</p>
</li>
<li class="lvl-3">
<p>对比sign_server跟sign_client2个签名是否一致，一致则表示参数没有变更篡改，否则参数被改，不合法。</p>
</li>
</ol>
<p><strong>实现：</strong></p>
<p>首先，前端发起请求需要对参数进行一个签名：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSignString</span>(<span class="params">param</span>) &#123;</span><br><span class="line">    <span class="comment">//默认按字典顺序排序</span></span><br><span class="line">    <span class="keyword">var</span> sdic=<span class="title class_">Object</span>.<span class="title function_">keys</span>(param).<span class="title function_">sort</span>();</span><br><span class="line">    <span class="keyword">var</span> signStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> sdic)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">            signStr +=sdic[i]+<span class="string">&quot;=&quot;</span>+param[sdic[i]];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            signStr +=<span class="string">&quot;&amp;&quot;</span>+sdic[i]+<span class="string">&quot;=&quot;</span>+param[sdic[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">hex_md5</span>(signStr).<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每次发起请求时带上这个sign，在后端同样使用拦截器的方式进行防护：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lenl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-05-02 11:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 签名拦截（防篡改）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SignInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(!(handler <span class="keyword">instanceof</span> HandlerMethod))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//签名验证</span></span><br><span class="line">        Map&lt;String,String[]&gt; map=request.getParameterMap();</span><br><span class="line">        Set&lt;String&gt; keys=map.keySet();</span><br><span class="line">        Map&lt;String,Object&gt; param=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s:map.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;sign&quot;</span>.equalsIgnoreCase(s))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            param.put(s,arrayToString(map.get(s)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//server_sign</span></span><br><span class="line">        String signatures= Md5Utils.signatures(param);</span><br><span class="line">        <span class="comment">//client_sign</span></span><br><span class="line">        String sign=request.getParameter(<span class="string">&quot;sign&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(sign==<span class="literal">null</span>||!sign.equalsIgnoreCase(signatures))&#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;text/json;charset=UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(<span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">501</span>,<span class="string">&quot;签名校验失败&quot;</span>,<span class="literal">null</span>)));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">arrayToString</span><span class="params">(String[] array)</span> &#123;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s:array)&#123;</span><br><span class="line">            sb.append(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里涉及到一些工具类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Md5Utils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 签名：请求参数排序并后面补充key值，最后进行MD5加密，返回大写结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params 参数内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">signatures</span><span class="params">(Map&lt;String, Object&gt; params)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">signatures</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;String&gt; paramsStr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">            <span class="keyword">for</span> (String key1 : params.keySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="literal">null</span> != key1 &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(key1))&#123;</span><br><span class="line">                    paramsStr.add(key1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Collections.sort(paramsStr);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sbff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (String kk : paramsStr) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> params.get(kk).toString();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(sbff.toString())) &#123;</span><br><span class="line">                    sbff.append(kk + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sbff.append(<span class="string">&quot;&amp;&quot;</span> + kk + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//加上key值</span></span><br><span class="line">            signatures = getMD5(sbff.toString()).toUpperCase();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> signatures;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 生成MD5</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMD5</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">md5</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>); <span class="comment">// 创建一个md5算法对象</span></span><br><span class="line">            <span class="type">byte</span>[] messageByte = message.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] md5Byte = md.digest(messageByte); <span class="comment">// 获得MD5字节数组,16*8=128位</span></span><br><span class="line">            md5 = bytesToHex(md5Byte); <span class="comment">// 转换为16进制字符串</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> md5;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 二进制转十六进制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">bytesToHex</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">hexStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            num = bytes[i];</span><br><span class="line">            <span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                num += <span class="number">256</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num &lt; <span class="number">16</span>) &#123;</span><br><span class="line">                hexStr.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            hexStr.append(Integer.toHexString(num));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hexStr.toString().toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拦截器建成之后，在Config中添加并配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span>  <span class="title class_">WebMvcConfigurer</span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SignInterceptor <span class="title function_">signInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SignInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//添加签名拦截器（防篡改）</span></span><br><span class="line">        registry.addInterceptor(signInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note warning simple"><p>签名机制操作需要注意的细节：</p>
<ol>
<li class="lvl-3">如果接口为文件上传，接口需要额外处理。</li>
<li class="lvl-3">如果接口参数是一个大体积参数，需要额外处理</li>
<li class="lvl-3">签名算法不能外泄–需要对前端签名算法进行加密混淆。</li>
</ol>
</div>
<h4 id="接口时效性">接口时效性</h4>
<p>**描述：**一个请求路径+参数在一定时间内可以重复请求，但是一旦超时，不允许访问。经典用法为：具有时效的二维码。</p>
<p>**核心：**如何判断该请求是否超时。</p>
<p><strong>思路：</strong></p>
<ol>
<li class="lvl-3">
<p>前端传参数时，对参数的名字进行字段排序，然后按参数名的属性对参数值进行有序拼接：</p>
<p>参数列表：c=参数1，f=参数2，a=参数3，b=参数4，timestamp=19999999</p>
<p>参数排名：a b c f timestamp</p>
<p>参数值拼接：a=参数3&amp;b=参数4&amp;c=参数1&amp;f=参数2&amp;timestamp=19999999</p>
</li>
<li class="lvl-3">
<p>使用MD5拼接参数值串加密得到的参数签名sign_client</p>
</li>
<li class="lvl-3">
<p>将所有参数与sign一同发送到后端</p>
</li>
<li class="lvl-3">
<p>后端获取所有参数，按照同样的逻辑，MD5加密得到sign_server</p>
</li>
<li class="lvl-3">
<p>获取timestamp与当前时间对比是否在有效时间内。不在则提示接口访问超时。</p>
</li>
<li class="lvl-3">
<p>对比sign_server与sign_clent2个签名是否一致，一致表示参数没有被篡改，否则参数不合法。</p>
</li>
</ol>
<div class="note info simple"><p>该方法与接口防篡改方法重合度高，此处不再提供参考。</p>
</div>
<h4 id="接口加密">接口加密</h4>
<p>https = http + ssl</p>
<p>SpringBoot可以生成本地SSL假证书 进行测试。详情可参照 <a href="https://blog.csdn.net/zyx1260168395/article/details/112802464">文章链接</a></p>
]]></content>
      <categories>
        <category>编程随记</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>ElasticSearch</tag>
        <tag>接口安全</tag>
      </tags>
  </entry>
  <entry>
    <title>wolf2w项目经验_缓存、持久化与参数解析器</title>
    <url>/notes/wolf2w/</url>
    <content><![CDATA[<h1>wolf2w项目学习随记_1</h1>
<div class="note warning simple"><p>本随记为跟随B站视频<a href="https://www.bilibili.com/video/BV1re4y1e7rJ" title="旅游出行项目学习">2022版 Spring Boot+Vue前后端分离项目实战</a> 学习时随手记下的一些经验整理。以便在后续学习开发中遇到类似问题能够找到解答依据。</p>
</div>
<h2 id="SQL排序列运算性能问题">SQL排序列运算性能问题</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>分析：大表order by 排序字段涉及运算时性能极低。</p>
</li>
<li class="lvl-2">
<p>原因：<mark class="hl-label red">数据量大</mark>    <mark class="hl-label red">排序列有运算</mark> </p>
</li>
<li class="lvl-2">
<p>解决方案：使用分时统计表。</p>
</li>
</ul>
<h3 id="分时统计表操作思路：大表转小表">分时统计表操作思路：大表转小表</h3>
<ol>
<li class="lvl-3">
<p>先按照需求创建出一张临时表；</p>
</li>
<li class="lvl-3">
<p>第一次查询大表得到10条数据，然后将数据缓存到临时表中</p>
</li>
<li class="lvl-3">
<p>下一次查询直接查询临时表即可。</p>
</li>
<li class="lvl-3">
<p>临时表的数据跟大表数据存在一定延时，需要定时维护更新数据。(牺牲实时性换取性能)</p>
</li>
</ol>
<p><strong>思考：</strong> 分时统计表应该如何设计</p>
<p><strong>分析：</strong> 必须拥有原始sql查询出来的结果列；两列计算可结合成自定义列；需要加上时间和类别区分。</p>
<blockquote>
<p>分时更新，取用的时候要指定最新时间，如下。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> xxx</span><br><span class="line">	<span class="keyword">where</span> type<span class="operator">=</span>a <span class="keyword">and</span> xx_time<span class="operator">=</span>(<span class="keyword">select</span> <span class="built_in">max</span>(xx_time) <span class="keyword">from</span> xxx <span class="keyword">where</span> type<span class="operator">=</span>a)</span><br><span class="line">	<span class="keyword">order</span> <span class="keyword">by</span> xx_num <span class="keyword">desc</span></span><br><span class="line">	limit <span class="number">10</span></span><br></pre></td></tr></table></figure>
<h3 id="如何定期-定时维护分时统计表">如何定期/定时维护分时统计表</h3>
<p><strong>分析：</strong> 实现分时统计表操作特点：</p>
<ol>
<li class="lvl-3">
<p>周期执行；</p>
</li>
<li class="lvl-3">
<p>尽量减少人工参与；</p>
</li>
</ol>
<blockquote>
<p>上面的特点很明显需要使用定时任务：</p>
<ul class="lvl-1">
<li class="lvl-2">方案1：数据库定时任务存储过程；</li>
<li class="lvl-2">方案2：操作系统的定时任务 + sql脚本</li>
<li class="lvl-2">方案3：Java代码层面–定时器 *</li>
</ul>
</blockquote>
<p>Java定时器的常用实现技术有多种：</p>
<ol>
<li class="lvl-3">
<p>jdk自带timer</p>
</li>
<li class="lvl-3">
<p>Spring Task</p>
</li>
<li class="lvl-3">
<p>第三方组件-quartz</p>
</li>
<li class="lvl-3">
<p>elastic-job / xxl-job</p>
</li>
</ol>
<p>教程中使用了 <mark class="hl-label blue">SpringTask</mark>  。</p>
<div class="note warning simple"><p>为了方便可能的集群部署跟微服务拆分拓展时的实现，对于定时任务建议单独创建一个新的模块——任务调度模块，统一处理项目中的定时任务。</p>
</div>
<h4 id="第一步-新建Job">第一步 新建Job</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyRankDataHandlerJob</span> &#123;</span><br><span class="line">    <span class="meta">@Scheduled(cron=&quot;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>+System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中 <code>cron</code> 表达式可参照：<a href="https://cron.qqe2.com/">在线Cron表达式生成器</a></p>
<div class="note warning simple"><p>cron表达式有2种形式，含年(7位)和不含年(6位)，Spring支持不含年的形式。</p>
</div>
<h4 id="第二步-给启动类加上-EnableScheduling注解">第二步 给启动类加上@EnableScheduling注解</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MgrSite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MgrSite.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，启动后便会按照cron执行逻辑。</p>
<div class="note warning simple"><p>教程中直接进行每5秒一次的插入Mysql，个人觉得还需要执行一个清理逻辑，不然数据会越来越多，存在大量冗余。</p>
<p>另外，既然使用了redis，那么这些数据选择进redis缓存，定时刷新，是一个不错的选择呢。</p>
</div>
<h3 id="关于对大表进行GroupBy统计">关于对大表进行GroupBy统计</h3>
<div class="note warning simple"><p>对大表数据进行GroupBy操作非常消耗性能，一般能不用就不用。</p>
<p>必须使用时，仍可以采用分时统计表策略。</p>
</div>
<ol>
<li class="lvl-3">
<p>建一张临时表（分时统计表）</p>
</li>
<li class="lvl-3">
<p>先执行group by语句查询大表，得到满足需求数据</p>
</li>
<li class="lvl-3">
<p>将数据缓存临时表中</p>
</li>
<li class="lvl-3">
<p>下次查询直接查询临时表即可</p>
</li>
<li class="lvl-3">
<p>定期维护临时表（分时统计表）</p>
</li>
</ol>
<p>同一模块多section数据结构相同但字段名不同时，可以通过自定义列名方式，设计在同一张表中，但需要一个type字段进行区分。同时，同样需要加一个分时统计表用于保存统计的时间。</p>
<h2 id="项目集成MongoDB">项目集成MongoDB</h2>
<div class="note info simple"><p>wolf2w项目中是需要评论系统，因此将文章评论存在mongoDB中。</p>
<p>可学习借鉴，当下次有类似需求时可以借鉴。</p>
</div>
<h3 id="集成与数据添加">集成与数据添加</h3>
<ol>
<li class="lvl-3">
<p>首先，在公共模块中引入依赖：</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>然后在application.yml中建好配置：</p>
</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#mongodb</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">mongodb://127.0.0.1:27017/wolf2w</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">org:</span></span><br><span class="line">      <span class="attr">springframework:</span></span><br><span class="line">        <span class="attr">data:</span></span><br><span class="line">          <span class="attr">mongodb:</span></span><br><span class="line">            <span class="attr">core:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>新建mongo包，下放对应的包：</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo(mongoDB对应的包)</span><br><span class="line">|--domain(需要存入mongoDB的数据对象)</span><br><span class="line">|--query(需要进行查询的参数对象)</span><br><span class="line">|--repository(持久化仓储对象)</span><br><span class="line">|--service(数据库处理工具定义)</span><br><span class="line">|--|--impl(数据库处理工具实现类)</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>在repository中建立对应的持久化仓储工具（下面以项目中的攻略评论为例）</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wolfcode.wolf2w.mongo.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.wolfcode.wolf2w.mongo.domain.StrategyComment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.repository.MongoRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lenl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-04-26 18:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>  MongoRepository第二个参数为主键类型，一般用String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StrategyCommentRepository</span> <span class="keyword">extends</span> <span class="title class_">MongoRepository</span>&lt;StrategyComment,String&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>值得一提的是，不同于mybatis-plus，mongo在仓储继承了 <code>MongoRepository</code> 后Spring容器会自动进行扫描，而不用像m-p那样需要@Mapper</p>
</div>
<ol start="5">
<li class="lvl-3">
<p>在service中建立对应的数据库处理工具定义，并在impl下实现它：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//service定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IStrategyCommentService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(StrategyComment strategyComment)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//impl实现</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyCommentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IStrategyCommentService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StrategyCommentRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(StrategyComment comment)</span> &#123;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        1.避免空串导致的id不回显</span></span><br><span class="line"><span class="comment">        2.避免前面处理中Bean属性拷贝造成这里的id有值</span></span><br><span class="line"><span class="comment">        总之，设一个null是有好处的。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        comment.setId(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//指定创建时间</span></span><br><span class="line">        comment.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//存储</span></span><br><span class="line">        repository.save(comment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="6">
<li class="lvl-3">
<p>controller层调用，完成评论的存储</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IStrategyCommentService strategyCommentService;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IUserinfoRedisService userinfoRedisService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/commentAdd&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult <span class="title function_">commentAdd</span><span class="params">(StrategyComment comment, HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    <span class="comment">//从redis获取用户信息，并存入comment，以保证数据查询时的方便</span></span><br><span class="line">    <span class="type">UserInfo</span> <span class="variable">user</span> <span class="operator">=</span> userinfoRedisService.getUserByToken(token);</span><br><span class="line">    <span class="comment">//bean属性拷贝，将user与comment中的相同属性拷贝至comment中</span></span><br><span class="line">    <span class="comment">//底层实现原理：反射</span></span><br><span class="line">    BeanUtils.copyProperties(user,comment);</span><br><span class="line">    strategyCommentService.save(comment);</span><br><span class="line">    <span class="keyword">return</span> JsonResult.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note warning simple"><p>由于spring-data的处理，在存储数据时会识别类所有的属性，而java类的总父类Object含getClass()方法，所以一般来说，存储后mongoDB对应文档中会多出 <code>_class</code> 字段。</p>
<p>以下记录以下去掉 <code>_class</code> 的方法。</p>
</div>
<ol start="7">
<li class="lvl-3">
<p>去掉存储时的 <code>_class</code> 属性</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//采用配置类方式</span></span><br><span class="line"><span class="comment">//在WebConfig下添加如下Bean</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span>  <span class="title class_">WebMvcConfigurer</span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MappingMongoConverter <span class="title function_">mappingMongoConverter</span><span class="params">(MongoDatabaseFactory factory, MongoMappingContext context, BeanFactory beanFactory)</span>&#123;</span><br><span class="line">        DbRefResolver dbRefResolver=<span class="keyword">new</span> <span class="title class_">DefaultDbRefResolver</span>(factory);</span><br><span class="line">        MappingMongoConverter mappingMongoConverter=<span class="keyword">new</span> <span class="title class_">MappingMongoConverter</span>(dbRefResolver,context);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            		mappingMongoConverter.setCustomConversions(beanFactory.getBean(CustomConversions.class));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NoSuchBeanDefinitionException ignore)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 去除_class属性</span></span><br><span class="line">        mappingMongoConverter.setTypeMapper(<span class="keyword">new</span> <span class="title class_">DefaultMongoTypeMapper</span>(<span class="literal">null</span>));</span><br><span class="line">        <span class="keyword">return</span> mappingMongoConverter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note warning simple"><p>关于mongoDB中存储的时间：</p>
<p>时间数据存储后用navicate展示时，会发现其时间为伦敦时间，与国内本地时间相差8小时；</p>
<p>但我们不必自己进行处理，框架会自动进行处理的！</p>
</div>
<h3 id="数据查询分页">数据查询分页</h3>
<div class="note info simple"><p>mongoDB的分页思想类似mybatis-plus，但没有像那样现成的封装类，方法需要自己做封装。</p>
<p>感觉要使用还是要先多熟悉熟悉mongoDB的相关api。</p>
</div>
<ol>
<li class="lvl-3">
<p>在Controller中调用时，返回的Page类是spring框架的封装类</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IStrategyCommentService strategyCommentService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/commentsPage&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult <span class="title function_">comments</span><span class="params">(StrategyCommentQuery qo)</span>&#123;</span><br><span class="line">    <span class="comment">//注意这里的Page是spring框架的page</span></span><br><span class="line">    <span class="comment">//org.springframework.data.domain.Page;</span></span><br><span class="line">    Page page= strategyCommentService.queryPage(qo);</span><br><span class="line">    <span class="keyword">return</span> JsonResult.success(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>在Impl中实现queryPage方法</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StrategyCommentRepository repository;</span><br><span class="line"><span class="comment">// 引入MongoDB的Template，需要使用它的方法进行分页</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MongoTemplate template;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Page <span class="title function_">queryPage</span><span class="params">(StrategyCommentQuery qo)</span> &#123;</span><br><span class="line">    <span class="comment">//在MongoDB中没有现成的分页方法，需要自己去封装</span></span><br><span class="line">    <span class="comment">//totalCount 查询需要分页的总数据量</span></span><br><span class="line">    Query query=<span class="keyword">new</span> <span class="title class_">Query</span>();</span><br><span class="line">    <span class="keyword">if</span>(qo.getStrategyId()!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//MongoDB的分类筛选方法 addCriteria Criteria.where...</span></span><br><span class="line">        query.addCriteria(Criteria.where(<span class="string">&quot;strategyId&quot;</span>).is(qo.getStrategyId()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询出总数 template.count</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">totalCount</span> <span class="operator">=</span> template.count(query, StrategyComment.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(totalCount==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//总数为0时 返回空页</span></span><br><span class="line">        <span class="keyword">return</span> Page.empty();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//进行分页</span></span><br><span class="line">    <span class="comment">//方案一 拼接条件</span></span><br><span class="line">    <span class="comment">//query.skip((qo.getCurrentPage()-1)*qo.getPageSize()).limit(qo.getPageSize());</span></span><br><span class="line">    <span class="comment">//方案二 用封装对象</span></span><br><span class="line">    <span class="comment">//参数1：当前页，从0算起； 参数2：每页显示记录数</span></span><br><span class="line">    Pageable page= PageRequest.of(qo.getCurrentPage()-<span class="number">1</span>,qo.getPageSize());</span><br><span class="line">    <span class="comment">//带上分页条件</span></span><br><span class="line">    query.with(page);</span><br><span class="line">    <span class="comment">//查询得到分页结果</span></span><br><span class="line">    List&lt;StrategyComment&gt; data = template.find(query, StrategyComment.class);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageImpl</span>&lt;StrategyComment&gt;(data,page,totalCount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="条件查询的自定义实现">条件查询的自定义实现</h3>
<h4 id="引入">引入</h4>
<div class="note info simple"><p>spring-data中，mongoDB的一些条件查询只需要在对应的Repository中按要求的语法声明方法即可，无需进行实现。</p>
</div>
<p>如，需要根据游记id查询所有的游记评论，那么在 <code>TravelCommentRepository</code> 中声明一个findByTravelId方法，并传入 <code>travelId</code> 即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TravelCommentRepository</span> <span class="keyword">extends</span> <span class="title class_">MongoRepository</span>&lt;TravelComment,String&gt; &#123;</span><br><span class="line">    List&lt;TravelComment&gt; <span class="title function_">findByTravelId</span><span class="params">(Long travelId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="拓展">拓展</h4>
<p>不仅是findById，在mongorepository中，还有对于其他一些查询的自定义方法：</p>
<table>
<thead>
<tr>
<th>方法关键字</th>
<th>示例</th>
<th>等价于SQL</th>
</tr>
</thead>
<tbody>
<tr>
<td>And</td>
<td>findByLastnameAndFirstname</td>
<td>… where x.lastname = ?1 and x.firstname = ?2</td>
</tr>
<tr>
<td>Or</td>
<td>findByLastnameOrFirstname</td>
<td>… where x.lastname = ?1 or x.firstname = ?2</td>
</tr>
<tr>
<td>Is,Equals</td>
<td>findByFirstname，findByFirstnameIs，findByFirstnameEquals</td>
<td>… where x.firstname = ?1</td>
</tr>
<tr>
<td>Between</td>
<td>findByStartDateBetween</td>
<td>… where x.startDate between ?1 and ?2</td>
</tr>
<tr>
<td>LessThan</td>
<td>findByAgeLessThan</td>
<td>… where x.age &lt; ?1</td>
</tr>
<tr>
<td>LessThanEqual</td>
<td>findByAgeLessThanEqual</td>
<td>… where x.age &lt;= ?1</td>
</tr>
<tr>
<td>GreaterThan</td>
<td>findByAgeGreaterThan</td>
<td>… where x.age &gt; ?1</td>
</tr>
<tr>
<td>GreaterThanEqual</td>
<td>findByAgeGreaterThanEqual</td>
<td>… where x.age &gt;= ?1</td>
</tr>
<tr>
<td>After</td>
<td>findByStartDateAfter</td>
<td>… where x.startDate &gt; ?1</td>
</tr>
<tr>
<td>Before</td>
<td>findByStartDateBefore</td>
<td>… where x.startDate &lt; ?1</td>
</tr>
<tr>
<td>IsNull</td>
<td>findByAgeIsNull</td>
<td>… where x.age is null</td>
</tr>
<tr>
<td>IsNotNull,NotNull</td>
<td>findByAge[Is]NotNull</td>
<td>… where x.age not null</td>
</tr>
<tr>
<td>Like</td>
<td>findByFirstnameLike</td>
<td>… where x.firstname like ?1</td>
</tr>
<tr>
<td>NotLike</td>
<td>findByFirstnameNotLike</td>
<td>… where x.firstname not like ?1</td>
</tr>
<tr>
<td>StartingWith</td>
<td>findByFirstnameStartingWith</td>
<td>… where x.firstname like ?1**（参数绑定附加 <code>%</code> ）**</td>
</tr>
<tr>
<td>EndingWith</td>
<td>findByFirstnameEndingWith</td>
<td>… where x.firstname like ?1**（参数绑定附加 <code>%</code> ）**</td>
</tr>
<tr>
<td>Containing</td>
<td>findByFirstnameContaining</td>
<td>… where x.firstname like ?1**（参数绑定 <code>%</code> ）**</td>
</tr>
<tr>
<td>OrderBy</td>
<td>findByAgeOrderByLastnameDesc</td>
<td>… where x.age = ?1 order by x.lastname desc</td>
</tr>
<tr>
<td>Not</td>
<td>findByLastnameNot</td>
<td>… where x.lastname &lt;&gt; ?1</td>
</tr>
<tr>
<td>In</td>
<td>findByAgeIn(Collection ages)</td>
<td>… where x.age in ?1</td>
</tr>
<tr>
<td>NotIn</td>
<td>findByAgeNotIn(Collection ages)</td>
<td>… where x.age not in ?1</td>
</tr>
<tr>
<td>True</td>
<td>findByActiveTrue()</td>
<td>… where x.active = true</td>
</tr>
<tr>
<td>False</td>
<td>findByActiveFalse()</td>
<td>… where x.active = false</td>
</tr>
<tr>
<td>IgnoreCase</td>
<td>findByFirstnameIgnoreCase</td>
<td>… where UPPER(x.firstame) = UPPER(?1)</td>
</tr>
</tbody>
</table>
<div class="note info simple"><p>总体观之，就是常用的一些命名方式，需要常用以记录，在此留下记录，以便需要用时查找。</p>
<p>此外，mongoDB还能够进行一些聚合查询操作，有用到的案例时再进行记录。</p>
</div>
<h2 id="SpringMVC-参数解析器">SpringMVC 参数解析器</h2>
<h3 id="自定义参数解析器">自定义参数解析器</h3>
<p>一般接口获取用户信息可以在接口传入 <code>HttpServletRequest</code> 参数，并从中获取 <code>token</code> 再解析或从redis中获取用户，但大量接口都需要该操作，形成了大量重复。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult <span class="title function_">info</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    String token=request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    <span class="type">UserInfo</span> <span class="variable">user</span> <span class="operator">=</span> userInfoRedisService.getUserByToken(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时需要进行优化：自定义参数解析器</p>
<div class="note info simple"><p>当我们在方法接口中声明参数，前端传过来的参数能与其对应，就是因为Spring的 <code>默认参数解析器</code> 所做的工作；</p>
<p>而解析不存在的参数则需要 <code>自定义参数解析器</code> 。</p>
</div>
<p><strong>因此现在要做的就是把前端传的Header中的token映射成当前登录的User信息，并注入到接口的指定类型参数中。</strong></p>
<ol>
<li class="lvl-3">
<p>首先建一个resolver包，新建 <code>UserInfoArgumentResolver</code> 类如下：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lenl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-04-30 9:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 将请求映射方法中UserInfo类型的参数解析成当前登录对象中 </span></span><br><span class="line"><span class="comment"> * 通过实现HandlerMethodArgumentResolver的两个方法进行解析注入：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoArgumentResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerMethodArgumentResolver</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserinfoRedisService userinfoRedisService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//标识当前解析器支持解析的类型 -&gt; 此处当前解析器只支持解析UserInfo类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> parameter.getParameterType().equals(UserInfo.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//解析参数</span></span><br><span class="line">    <span class="comment">//该方法执行的前提 supportsParameter 返回 true</span></span><br><span class="line">    <span class="comment">//此处表示将请求头 token 解析成当前登录的用户对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter,</span></span><br><span class="line"><span class="params">                                  ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">                                  NativeWebRequest webRequest,</span></span><br><span class="line"><span class="params">                                  WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//方法1 直接获取请求头参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> webRequest.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//方法2 先获取原生对象，然后使用原生对象获取请求头</span></span><br><span class="line">        <span class="comment">//HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);</span></span><br><span class="line">        <span class="comment">//String token = request.getHeader(&quot;token&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> userinfoRedisService.getUserByToken(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>在自定义的WebConfig中进行解析器的配置：</p>
</li>
</ol>
<p>通过@Bean生成参数解析器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> UserInfoArgumentResolver <span class="title function_">userInfoArgumentResolver</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserInfoArgumentResolver</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后通过重写 <code>WebMvcConfigurer</code> 的 <code>addArgumentResolvers</code> 方法将自定义参数解析器放进容器中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; resolvers)</span> &#123;</span><br><span class="line">    resolvers.add(userInfoArgumentResolver());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>以上步骤完成后，之前的获取用户信息的接口就可以直接声明参数自动注入了：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此处UserInfo非前端所传参数</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult <span class="title function_">info</span><span class="params">(UserInfo user)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> JsonResult.success(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参数解析器实现流程">参数解析器实现流程</h3>
<ol>
<li class="lvl-3">
<p>请求进入请求映射方法之后，会解析方法中所有参数得到参数列表：paramList</p>
</li>
<li class="lvl-3">
<p>遍历paramList列表，在循环中遍历所有参数解析器（包括自定义参数解析），然后逐一调用参数解析器中的supportsParameter方法，一旦该方法返回true，表示当前解析器能解析当前参数，然后马上执行当前解析器的resolveArgument方法，将结果返回并注入到请求映射参数形参中，同时马上结束当前循环，进入外层的下一轮循环。</p>
</li>
</ol>
<p>伪代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(MethodParameter parameter:paramList)&#123;</span><br><span class="line">    <span class="keyword">for</span>(HanlerMethodArgmentResolver hmar:resolvers)&#123;</span><br><span class="line">        <span class="keyword">if</span>(hmar.supportParameter(parameter))&#123;</span><br><span class="line">            Object ret= hmar.resolverArgment(parameter,...);</span><br><span class="line">            <span class="comment">//注入逻辑...</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注解区分默认与自定义解析器">注解区分默认与自定义解析器</h3>
<p>如果自定义参数解析器类型与默认解析器需要解析的类型相同，如上述情况下修改用户信息的接口前端传来UserInfo参数也会被自定义解析器注入，从而产生冲突。</p>
<p>因此需要自定义一个参数注解，标注了对应注解的参数才使用自定义参数解析器进行解析。</p>
<ol>
<li class="lvl-3">
<p>自定义注解@UserParam:</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lenl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-04-30 10:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 指定的注解的参数使用自定义的参数解析器</span></span><br><span class="line"><span class="comment"> *  此处将UserInfo类型的参数解析未当前登录对象（使用自定义注解）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.PARAMETER)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UserParam &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>在自定义参数解析器的 <code>supportsParameter</code> 方法假如注解的判断：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">        parameter.getParameterType().equals(UserInfo.class)</span><br><span class="line">        &amp;&amp;</span><br><span class="line">        parameter.hasParameterAnnotation(UserParam.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>在需要进行自定义参数解析器解析的参数前加上自定义注解即可：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult <span class="title function_">info</span><span class="params">(<span class="meta">@UserParam</span> UserInfo user)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> JsonResult.success(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时，未加该注解的对应类型参数将会被默认解析器自动解析。</p>
<h2 id="数据统计相关">数据统计相关</h2>
<p>此处此项目目前的统计指的是文章阅读量、点赞数、评论数、收藏数等这些数据的统计。</p>
<h3 id="阅读量-评论数类型">阅读量/评论数类型</h3>
<p>以攻略的 <code>阅读数量</code> 统计为例，分析其实现：</p>
<p><strong>实现</strong>：页面访问获取攻略信息接口，执行update sql 修改攻略表的viewNum列，实现+1逻辑。</p>
<p><strong>分析</strong>：可以实现阅读量添加操作，但如果访问量很大，过于频繁执行sql会导致mysql宕机。</p>
<p><strong>思考</strong>：那么该如何解决？</p>
<p><strong>解决方案</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>&gt; 垂直拓展（升级服务器性能：加钱）</p>
</li>
<li class="lvl-2">
<p>&gt; 使用mysql集群（主从分离，读写分离等）</p>
</li>
<li class="lvl-2">
<p>&gt; 使用消息中间件（削峰填谷）</p>
</li>
<li class="lvl-2">
<p>&gt; 使用缓存（最廉价的方式）</p>
</li>
</ul>
<p>缓存一个计数器，达到一定条件后再一次性加入mysql执行。</p>
<p><strong>适合的缓存技术</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>jdk中的Map（不建议使用，没有持久化功能）</p>
</li>
<li class="lvl-2">
<p>第三方组件：Ehcache（单体项目[同一jvm]中可以使用，集群/分布式微服务项目不建议使用）</p>
</li>
<li class="lvl-2">
<p>第三方组件：Redis\memcached（强烈建议使用：redis适用各种场景，同时性能较高）</p>
</li>
<li class="lvl-2">
<p>非关系型数据库：mongoDB（但其定位在应用数据库，不建议做缓存-半内存级别）</p>
</li>
</ul>
<p>因此，选择Redis实现最佳。</p>
<p><strong>通用k-v设计</strong>：</p>
<table>
<thead>
<tr>
<th>key</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td>strategy_viewnum:sid</td>
<td>阅读数</td>
</tr>
<tr>
<td>strategy_replynum:sid</td>
<td>回复数</td>
</tr>
<tr>
<td>strategy_favornum:sid</td>
<td>收藏数</td>
</tr>
<tr>
<td>strategy_sharenum:sid</td>
<td>分享数</td>
</tr>
<tr>
<td>strategy_thumbnum:sid</td>
<td>点赞数</td>
</tr>
</tbody>
</table>
<p><strong>存在瑕疵</strong>：首先key有点多；其次维护不方便</p>
<p><strong>改进方案</strong>：</p>
<ol>
<li class="lvl-3">
<p>适用hash方式</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>key</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td>strategy_hash:sid</td>
<td>{ <br>     viewnum:阅读数<br><br>     replynum:回复数<br/><br/>     favornum:收藏数<br/><br/>     sharenum:分享数<br/><br/>     thumbnum:点赞数<br/>}</td>
</tr>
</tbody>
</table>
<p>如果阅读数+1 ：hincrby strategy_hash:sid viewnum</p>
<ol start="2">
<li class="lvl-3">
<p>适用vo的方式</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>key</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td>strategy_vo:sid</td>
<td>vo对象</td>
</tr>
</tbody>
</table>
<p>如果阅读数+1：获取vo对象-修改vo对象的viewnum属性值-更新redis中的vo对象。</p>
<div class="note warning simple"><p>如果想要数据不丢失[线程安全，数据不被覆盖]，适用hash方式，反之适用vo方式；</p>
<p>如果想代码操作方便，适用vo方式，反之适用hash方式；</p>
<p>综合：数据安全选hash，操作方便选vo。</p>
</div>
<p>因为项目不关注具体小个数，因此使用vo方式。但实际业务用hash方式更好。</p>
<h3 id="点赞数-收藏数类型">点赞数/收藏数类型</h3>
<p>点赞与收藏需要判断请求是[点赞/收藏]操作还是[取消]操作</p>
<p>因为http的无状态性，对每个请求同等对待且每个请求独立，所以需要设计某种逻辑让后端服务器能够识别不同请求或者不同请求存在关系。如 <code>用户登录</code> 功能。</p>
<p>解决：</p>
<p>在服务端缓存用户身份识别码（list/set）。每次请求带上用户信息。</p>
<p>考虑此处缓存的工具为redis。key-value设计方案：</p>
<table>
<thead>
<tr>
<th>方案</th>
<th>key</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td>方案1</td>
<td>strategy_favor:sid</td>
<td>[uid1,uid2…]</td>
</tr>
<tr>
<td>方案2</td>
<td>strategy_favor:uid</td>
<td>[sid1,sid2…]</td>
</tr>
</tbody>
</table>
<p>方案2从用户角度出发，此处更适合。</p>
<p>方案1从对象角度出发，适合朋友圈点赞。</p>
<p>具体实现流程：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>用户点击收藏按钮，未登录则提示。</p>
</li>
<li class="lvl-2">
<p>如果已登录，带上被收藏的sid以及请求token。</p>
</li>
<li class="lvl-2">
<p>接口接收请求，获取sid以及用户uid。</p>
</li>
<li class="lvl-2">
<p>使用uid拼接key，获取redis中的sid的set集合</p>
</li>
<li class="lvl-2">
<p>判断sid是否在其中</p>
<ul class="lvl-2">
<li class="lvl-4">如果不在，当前请求为收藏请求，获取vo对象，收藏数+1，sid入set；</li>
<li class="lvl-4">如果在，当前请求为取消收藏，获取vo对象，收藏数-1，sid移除sidSet;</li>
</ul>
</li>
<li class="lvl-2">
<p>更新redis中的vo对象，sid的set集合。</p>
</li>
</ul>
<blockquote>
<p>redis的set直接使用template.opsForSet().add()可以直接添加。</p>
</blockquote>
<h3 id="缓存操作的完整流程">缓存操作的完整流程</h3>
<ol>
<li class="lvl-3">
<p>缓存数据预热（初始化）；</p>
</li>
<li class="lvl-3">
<p>缓存数据业务实现；</p>
</li>
<li class="lvl-3">
<p>缓存数据落地（持久化）。</p>
</li>
</ol>
<h4 id="缓存初始化">缓存初始化</h4>
<p>数据从数据库 初始化/预热/同步 到缓存中。</p>
<ol>
<li class="lvl-3">
<p>需要将什么数据初始化到缓存数据库中：</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>频繁改动（DML）的数据，需要缓存到redis数据库中；</p>
</li>
<li class="lvl-2">
<p>不频繁改动（DQL）数据，需要缓存到redis数据库中。</p>
</li>
</ul>
<ol start="2">
<li class="lvl-3">
<p>在什么模块中 初始化 逻辑：考虑到集群扩展，api可能会有多个，因此推荐初始化在后台后端中。</p>
</li>
<li class="lvl-3">
<p>在那种组件中实现 初始化 逻辑（filter\servlet\interceptor\controller listener\定时器）</p>
</li>
</ol>
<p>初始化操作特点：尽可能早地初始化；尽可能少的操作。</p>
<p>filter/interceptor：定位在拦截请求，不建议使用；</p>
<p>servlet/controller：定位在接受请求，处理请求；响应请求，也可行（一般用于业务初始化）；</p>
<p>listener：定位在监听事件并执行预设逻辑，可行。java web 的web容器监听器可行(tomcat 启动后马上执行)。</p>
<p><strong>关于监听器有2个方案：</strong></p>
<ol>
<li class="lvl-3">
<p>使用java web容器监听-监听tomcat服务器的启动，功能简单，操作灵活；</p>
</li>
<li class="lvl-3">
<p>使用springMVC容器监听器-监听spring容器的启动，功能强大，操作简单，推荐。</p>
</li>
</ol>
<h4 id="Spring容器监听">Spring容器监听</h4>
<p><strong>Spring容器中不同类型的事件</strong>：</p>
<ol>
<li class="lvl-3">
<p>上下文更新事件(ContextRefreshedEvent)：</p>
<p>在调用ConfigurableApplicationContext 接口中的refresh()方法时被触发。AOP、IOC等都会在这个方法里执行。</p>
</li>
<li class="lvl-3">
<p>上下文开始事件(ContextStartedEvent)：</p>
<p>当容器调用ConfigurableApplicationContext的Start()方法开始/重新开始容器时触发该事件。</p>
</li>
<li class="lvl-3">
<p>上下文停止事件(ContextStoppedEvent)：</p>
<p>当容器调用ConfigurableApplicationContext的Stop()方法停止容器时触发该事件。</p>
</li>
<li class="lvl-3">
<p>上下文关闭事件(ContextClosedEvent)：</p>
<p>当ApplicationContext被关闭时触发该事件。容器被关闭时，其管理的所有单例Bean都被销毁。</p>
</li>
<li class="lvl-3">
<p>请求处理事件(RequestHadledEvent)：</p>
<p>在Web应用中，当一个http请求（request）结束触发该事件。</p>
</li>
</ol>
<p>如果一个容器是实现了ApplicationListener接口，当一个ApplicationEvent被发布以后，bean会自动被通知。</p>
<p><strong>自定义事件监听器：</strong></p>
<p>新建Java类继承 <code>ApplicationListener</code> 类，其泛型即为需要进行监听的事件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lenl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-04-30 16:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 继承的类泛型即为需要监听的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisDataInitListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; &#123;</span><br><span class="line">    <span class="comment">//当Spring容器初始化之后立即执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> &#123;</span><br><span class="line">		<span class="comment">//执行初始化逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="数据持久化">数据持久化</h4>
<ol>
<li class="lvl-3">
<p>将什么数据持久化到mysql数据库中？</p>
</li>
</ol>
<p>缓存中还需要参与后续业务操作的数据。</p>
<ol start="2">
<li class="lvl-3">
<p>在哪个模块实现持久化逻辑？</p>
</li>
</ol>
<p>考虑到持久化也属于数据维护范畴，因此推荐初始化在后台后端中。</p>
<ol start="3">
<li class="lvl-3">
<p>在那种组件中实现持久化逻辑？</p>
</li>
</ol>
<p>持久化特点：1.周期执行；2.程序控制执行</p>
<p>选用轻量级的spring task实现。</p>
<p>如果需要管理定制化周期，则需要使用quartz等组件。</p>
]]></content>
      <categories>
        <category>编程随记</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>MongoDB</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统安装参考-Windows</title>
    <url>/copy/wzz/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<div class="note info simple"><p>本文来自 <code>璺道斋主</code> 的博客文章<a href="https://www.bookrest.top/2022/11/PC%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E6%8C%87%E5%8C%97/">PC 操作系统安装指北 | 书歇于此 (bookrest.top)</a></p>
</div>
<blockquote>
<p>我们首先明确一点，在个人计算机（person computer）中安装操作系统，本质上是告诉主板如何寻找并启动操作系统相关文件。</p>
<p>因此，操作系统的安装，宏观上是两步 —— 引导文件的写入和操作环境的展开（我们可以把镜像文件看成压缩文件，环境展开即是镜像文件解压缩）。</p>
</blockquote>
<h2 id="0-前言">0 前言</h2>
<p>使用该方案的前提如下，需要检查是否满足：</p>
<ol>
<li class="lvl-3">
<p>已经拥有一个可以正常运行的系统（可以开机）；</p>
</li>
<li class="lvl-3">
<p>能够联网（使用浏览器访问外部资源）；</p>
</li>
<li class="lvl-3">
<p>当前系统的合法用户（能够设置密码和安装软件）</p>
</li>
</ol>
<p>在升级或迁移的条件下，可选方案有：</p>
<ol>
<li class="lvl-3">
<p>官方方案</p>
</li>
<li class="lvl-3">
<p>PE方案</p>
</li>
<li class="lvl-3">
<p>引导启动盘方案</p>
</li>
</ol>
<h2 id="1-官方方案">1 官方方案</h2>
<p>Windows 微软官方有<a href="https://www.microsoft.com/zh-cn/software-download/windows10">集成化的下载安装工具</a> 。参考官方教程可完成安装。</p>
<h2 id="2-PE方案">2 PE方案</h2>
<h3 id="2-1-工具介绍">2.1 工具介绍</h3>
<p>PE, 是预安装环境（Preinstallation Environment）的英文首字母缩写，由于现代操作系统的绝大部分份额为 Windows 系统，因此 PE 主要是 Windows PE（简称 WinPE）。</p>
<p>在众多第三方编写的<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>、具有丰富功能性的WinPE种，笔者推荐<a href="https://www.wepe.com.cn/download.html">微PE工具箱</a> 和 <a href="https://www.upe.net/">优启通</a> 。考虑到优启通过大(900+MB)，简单安装系统更推荐微PE（虽然，微 PE 也有 200M+)。</p>
<p>所需准备：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>微PE安装软件</p>
</li>
<li class="lvl-2">
<p>系统镜像文件（推荐从微软官方下载，也称磁盘映像文件，格式为 ISO）</p>
</li>
</ul>
<h3 id="2-2-安装PE">2.2 安装PE</h3>
<ol>
<li class="lvl-3">
<p>下载微PE软件</p>
</li>
<li class="lvl-3">
<p>打开<code>wepe.exe</code> 文件</p>
</li>
<li class="lvl-3">
<p>安装微PE</p>
</li>
</ol>
<p><a href="https://z4a.net/image/VuIGl0"><img src="https://z4a.net/images/2023/04/22/wepe1.md.png" alt="微PE安装界面"></a></p>
<div class="note info simple"><p>微 PE 支持<code>安装进系统</code>、<code>安装到U盘</code>、<code>安装到移动硬盘</code>、<code>生成可启动ISO</code> 四种方式。</p>
<p>在无 U 盘，且打算将系统安装在新的硬盘（比如说原先系统在机械硬盘，现在想换到固态硬盘）的话，直接选择<code>安装进系统</code>即可。因为之后旧系统和 PE 都不需要了，可以在迁移该盘文件后，直接对该盘进行格式化。</p>
</div>
<h3 id="2-3-启动PE">2.3 启动PE</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>设置、系统、恢复、恢复选项 - 高级启动、立即重新启动；</p>
</li>
<li class="lvl-2">
<p>设置、Windows 更新、高级选项、其他选项 - 恢复、恢复选项 - 高级启动、立即重新启动</p>
</li>
</ul>
<p>使用其他操作系统、微PE工具箱</p>
<h3 id="2-4-分区-迁移或安装系统">2.4 分区 | 迁移或安装系统</h3>
<p>进入微PE后，打开无损分区助手，对新硬盘进行分区：</p>
<p><a href="https://z4a.net/image/VuI5DP"><img src="https://z4a.net/images/2023/04/22/disktool.md.jpg" alt="傲梅分区助手"></a></p>
<p>如果仅是将系统从机械硬盘迁移到固态硬盘，可以直接使用分区助手提供的工具。如果是将新的、尚未格式化的硬盘用作系统盘，直接分区（如果需要的话，不然可以直接格式化）即可自动生成引导分区（EFI PART，文件系统一般为 fat16 或 fat32，无盘符是正常的）。</p>
<p>注意，傲梅分区助手实行的是提交 - 执行制，即选择确认操作后，还需点击左上角的 “提交”。方可执行。（此设计旨在避免用户误操作）</p>
<p>打开Windows安装器</p>
<p><a href="https://z4a.net/image/VuIK2T"><img src="https://z4a.net/images/2023/04/22/setuptool.md.jpg" alt="Windows安装器"></a></p>
<div class="note warning simple"><ol>
<li class="lvl-3">
<p>Windows 安装文件，即上面所说的系统镜像文件</p>
</li>
<li class="lvl-3">
<p>引导驱动器的位置，即上面分区所分出的 fat32 空间，必须保证旁边的 EFI PART 灯为绿色。</p>
</li>
<li class="lvl-3">
<p>安装驱动器的位置，即新系统将要安装在哪个硬盘上。</p>
</li>
</ol>
</div>
<h3 id="2-5-引导启动盘方案">2.5 引导启动盘方案</h3>
<p>无操作系统的电脑如何安装操作系统？答案是启动盘。<strong>启动盘</strong> 在这里不是专指早期购买的 Windows 正版光碟，而是指那些通过烧录<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>技术写入系统镜像文件和引导启动操作的存储媒介。</p>
<p>推荐启动盘制作工具：<a href="https://rufus.ie/zh/">Rufus - 轻松创建 USB 启动盘</a></p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>微软官方 PE 整合在 media creation tool 中；Linux 的发行版一般没有 PE，是通过烧录（可以理解为全方面的复制）引导启动盘实现安装的。 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>早期系统安装光盘都是只读的，也就是说数据是激光在光盘上蚀刻记录数据的，这种激光蚀刻，称为烧录。现在延续这种说法，指全方面的绝对的复制（一般复制无法复制系统文件日志等信息）。 <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>记录BUG与坑--Java相关</title>
    <url>/bugs/bugsOne/</url>
    <content><![CDATA[<div class="note info simple"><p>日常coding难免会偶遇Bug或坑，经过千辛万苦摁死这只虫子或者跳出这坑之后，一阵欢喜涌入心头</p>
<p>然而，在将来的某个时刻，某个奇妙的命运邂逅之时，这个怪坑又被你一脚踏进去了</p>
<p>你记得，那是你曾踩过的坑，可是怎么也抓不住脑袋里零星的回忆碎片~你忘了怎么从坑里出来</p>
<p>翻箱倒柜，终于从积灰的硬盘角落抽出那段陈年代码，啊，原来是这样解决的嘛，斯国一~~</p>
<p>这次，你终于想起来，我其实可以在博客里记录下这段珍贵的积灰代码</p>
<p>哼~下次再掉进坑里，我一定能第一时间找到这段代码</p>
<p>(#`O′)/ 喂，给我记住这个点，别再掉坑里啊喂~</p>
</div>
]]></content>
      <categories>
        <category>Bug与坑</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
</search>
